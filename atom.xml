<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人随想</title>
  
  <subtitle>fly97&#39;s Blogs</subtitle>
  <link href="https://fly97.cn/atom.xml" rel="self"/>
  
  <link href="https://fly97.cn/"/>
  <updated>2023-09-16T07:42:00.000Z</updated>
  <id>https://fly97.cn/</id>
  
  <author>
    <name>fly97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rockylinux常见操作</title>
    <link href="https://fly97.cn/p/how-to-use-rockylinux/"/>
    <id>https://fly97.cn/p/how-to-use-rockylinux/</id>
    <published>2023-09-16T07:42:00.000Z</published>
    <updated>2023-09-16T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词：RockyLinux 9</strong></p><span id="more"></span><h2 id="下载地址">下载地址</h2><p><a href="https://mirrors.nju.edu.cn/rocky/9/isos/">RockyLinux9</a></p><p><a href="https://mirrors.nju.edu.cn/rocky/8/isos/">RockyLinux8</a></p><p>这里一般下载minimal镜像，免去设置镜像源的烦恼。</p><p><img data-src="image-20230916195636348.png" /></p><h2 id="换源">换源</h2><p>参考：<ahref="https://mirror.nju.edu.cn/mirrorz-help/rocky/?mirror=NJU">RockyLinux 软件仓库镜像使用帮助 - MirrorZ Help (nju.edu.cn)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -e <span class="string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \</span><br><span class="line">         -e <span class="string">&#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirror.nju.edu.cn/rocky|g&#x27;</span> \</span><br><span class="line">         -i.bak \</span><br><span class="line">         /etc/yum.repos.d/rocky-extras.repo \</span><br><span class="line">         /etc/yum.repos.d/rocky.repo</span><br></pre></td></tr></table></figure><h2 id="网络管理">网络管理</h2><p>默认的管理工具是NetworkManager，附带有nmcli网络管理工具</p><p>配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmcli c add <span class="built_in">type</span> ethernet con-name enp6s18 ifname enp6s18 \</span><br><span class="line">ipv4.addr 192.168.8.211/24 ipv4.gateway 192.168.8.1 ipv4.method manual \</span><br><span class="line">ipv4.dns 192.168.8.1</span><br></pre></td></tr></table></figure><p>配置成功后会自动生成配置文件，配置文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/NetworkManager/system-connections</span></span><br><span class="line">[connection]</span><br><span class="line"><span class="built_in">id</span>=enp6s18</span><br><span class="line">uuid=b944afc1-e640-4b36-ad04-c7342189565f</span><br><span class="line"><span class="built_in">type</span>=ethernet</span><br><span class="line">interface-name=enp6s18</span><br><span class="line"></span><br><span class="line">[ethernet]</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line">address1=192.168.8.210/24,192.168.8.1</span><br><span class="line">dns=192.168.8.1;</span><br><span class="line">method=manual</span><br><span class="line"></span><br><span class="line">[ipv6]</span><br><span class="line">addr-gen-mode=default</span><br><span class="line">method=auto</span><br><span class="line"></span><br><span class="line">[proxy]</span><br></pre></td></tr></table></figure><p>修改完成后，直接使用nmcli c up即可启动网卡。</p><p>rocklinux8一般使用ifup/ifdown进行管理，配置文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=ens3</span><br><span class="line">UUID=badebd4f-dbf2-4d42-8e49-0e3839499e59</span><br><span class="line">DEVICE=ens3</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>修改完成后，直接使用ifup ifcfg-网卡名即可启动网卡。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;关键词：RockyLinux 9&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://fly97.cn/tags/learning/"/>
    
    <category term="rockylinux" scheme="https://fly97.cn/tags/rockylinux/"/>
    
  </entry>
  
  <entry>
    <title>运维自动化实战（一）Linux Shell 自动交互</title>
    <link href="https://fly97.cn/p/linux-shell-automatic-interaction/"/>
    <id>https://fly97.cn/p/linux-shell-automatic-interaction/</id>
    <published>2023-08-27T06:00:00.000Z</published>
    <updated>2023-08-27T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍自动化输入脚本的方式。</p><p>关键词：<strong>shell</strong></p><span id="more"></span><h2 id="bash脚本输入方式">bash脚本输入方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;ServiceName\nOperator\nPassword&quot;</span> | upx login</span><br></pre></td></tr></table></figure><p>输入每行文字后输入一个回车，某些情况不适用。</p><h2 id="expect脚本">Expect脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash    </span></span><br><span class="line">/usr/bin/expect &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">set timeout 50</span></span><br><span class="line"><span class="string">spawn upx login </span></span><br><span class="line"><span class="string">expect &quot;*ServiceName*&quot; &#123;send &quot;ServiceName\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;*Operator*&quot; &#123;send &quot;Operator\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;*Password*&quot; &#123;send &quot;Password\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect eof</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>expect 提示的字段是捕获输出，然后在后面跟着输入。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍自动化输入脚本的方式。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;shell&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="devops" scheme="https://fly97.cn/tags/devops/"/>
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>K8s核心能力</title>
    <link href="https://fly97.cn/p/learn-K8s/"/>
    <id>https://fly97.cn/p/learn-K8s/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是K8s的学习。</p><p><strong>关键词：K8s</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是K8s的学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：K8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>红帽认证RHCSA</title>
    <link href="https://fly97.cn/p/learn-Red-Hat-certification-rhcsa/"/>
    <id>https://fly97.cn/p/learn-Red-Hat-certification-rhcsa/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是红帽认证RHCSA。</p><p><strong>关键词：Red Hat RHCSA</strong></p><span id="more"></span><h1 id="红帽认证rhcsa">红帽认证RHCSA</h1><h2 id="命令行概述格式快捷键">命令行概述、格式、快捷键</h2><figure><img data-src="image-20230802155436739.png" alt="image-20230802155436739" /><figcaption aria-hidden="true">image-20230802155436739</figcaption></figure><figure><img data-src="image-20230802155744136.png" alt="image-20230802155744136" /><figcaption aria-hidden="true">image-20230802155744136</figcaption></figure><figure><img data-src="image-20230802160003170.png" alt="image-20230802160003170" /><figcaption aria-hidden="true">image-20230802160003170</figcaption></figure><figure><img data-src="image-20230802160320052.png" alt="image-20230802160320052" /><figcaption aria-hidden="true">image-20230802160320052</figcaption></figure><h2 id="常用的命令">常用的命令</h2><figure><img data-src="image-20230802160459480.png" alt="image-20230802160459480" /><figcaption aria-hidden="true">image-20230802160459480</figcaption></figure><p>注意：su 切换到别的用户时建议使用 - 来模拟登录过程。</p><figure><img data-src="image-20230802165404943.png" alt="image-20230802165404943" /><figcaption aria-hidden="true">image-20230802165404943</figcaption></figure><p>mv 移动文件、重命名文件</p><h2 id="获取命令的帮助man">获取命令的帮助man</h2><figure><img data-src="image-20230802171358699.png" alt="image-20230802171358699" /><figcaption aria-hidden="true">image-20230802171358699</figcaption></figure><h2 id="vivim编辑器">vi/vim编辑器</h2><p><img data-src="image-20230802172136098.png" /></p><p>++ yum -y install vim-enhanced 安装增强版的vim</p><h2 id="systemctl服务控制">systemctl服务控制</h2><figure><img data-src="image-20230803092228191.png" alt="image-20230803092228191" /><figcaption aria-hidden="true">image-20230803092228191</figcaption></figure><p>++ 重启后生效</p><p>++ setenforce 0|1立即变成宽松模式|强制模式：只能在宽松模式和强制模式之间切换，不能在关闭和打开之前切换。</p><p>++ getenforce：获取selinux状态。</p><h2 id="网络控制">网络控制</h2><p>使用nmtul设置网络。</p><figure><img data-src="image-20230803100131748.png" alt="image-20230803100131748" /><figcaption aria-hidden="true">image-20230803100131748</figcaption></figure><figure><img data-src="image-20230803101248194.png" alt="image-20230803101248194" /><figcaption aria-hidden="true">image-20230803101248194</figcaption></figure><p>hostname查看主机名，hostnamectl设置主机名</p><p>nmcli：networkManager Commander Interface</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  查看网卡设备状态</span></span><br><span class="line">nmcli device status</span><br><span class="line"><span class="comment">#  查看网络连接状态</span></span><br><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置网络连接</span></span><br><span class="line">nmcli connection modify enp1s0 ipv4.method manal ipv4.addresses 192.168.8.121/24   ipv4.gateway 192.168.8.1 ipv4.dns 192.168.8.1 connection.autoconnect <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 激活网卡连接</span></span><br><span class="line">nmcli connection up enp1s0</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230803102043041.png" alt="image-20230803102043041" /><figcaption aria-hidden="true">image-20230803102043041</figcaption></figure><figure><img data-src="image-20230803103614245.png" alt="image-20230803103614245" /><figcaption aria-hidden="true">image-20230803103614245</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[BaseOSUSTC]</span><br><span class="line">name = BaseOSUSTC</span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/centos-vault/8.5.2111/BaseOS/x86_64/os/media.repo</span><br><span class="line">gpgcheck = 0</span><br><span class="line"></span><br><span class="line">[AppStreamUSTC]</span><br><span class="line">name = AppStremUSTC</span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/centos-vault/8.5.2111/AppStream/x86_64/os/media.repo</span><br><span class="line">gpgcheck = 0</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230803140654846.png" alt="image-20230803140654846" /><figcaption aria-hidden="true">image-20230803140654846</figcaption></figure><figure><img data-src="image-20230803141927636.png" alt="image-20230803141927636" /><figcaption aria-hidden="true">image-20230803141927636</figcaption></figure><h2 id="调试服务">调试服务</h2><figure><img data-src="image-20230803145531367.png" alt="image-20230803145531367" /><figcaption aria-hidden="true">image-20230803145531367</figcaption></figure><h2 id="selinux调试">SELinux调试</h2><figure><img data-src="image-20230803150645826.png" alt="image-20230803150645826" /><figcaption aria-hidden="true">image-20230803150645826</figcaption></figure><figure><img data-src="image-20230803152634490.png" alt="image-20230803152634490" /><figcaption aria-hidden="true">image-20230803152634490</figcaption></figure><figure><img data-src="image-20230803153321589.png" alt="image-20230803153321589" /><figcaption aria-hidden="true">image-20230803153321589</figcaption></figure><figure><img data-src="image-20230803154524540.png" alt="image-20230803154524540" /><figcaption aria-hidden="true">image-20230803154524540</figcaption></figure><figure><img data-src="image-20230803155912452.png" alt="image-20230803155912452" /><figcaption aria-hidden="true">image-20230803155912452</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 查看selinx状态</span></span><br><span class="line">getenforce </span><br></pre></td></tr></table></figure><h2 id="用户账户管理">用户账户管理</h2><figure><img data-src="image-20230803160112653.png" alt="image-20230803160112653" /><figcaption aria-hidden="true">image-20230803160112653</figcaption></figure><p><img data-src="image-20230804091730441.png" /></p><h2 id="归属权限以及acl">归属、权限以及ACL</h2><figure><img data-src="image-20230804094922756.png" alt="image-20230804094922756" /><figcaption aria-hidden="true">image-20230804094922756</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置某文件/文件夹的属主权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=rx /xxx </span><br><span class="line"><span class="comment"># 设置某文件/文件夹的属组权限</span></span><br><span class="line"><span class="built_in">chmod</span> g+rx /xxx </span><br><span class="line"><span class="comment"># 设置某文件/文件夹的其他人权限</span></span><br><span class="line"><span class="built_in">chmod</span> o-rx /xxx </span><br></pre></td></tr></table></figure><figure><img data-src="image-20230804110002258.png" alt="image-20230804110002258" /><figcaption aria-hidden="true">image-20230804110002258</figcaption></figure><figure><img data-src="image-20230804143107386.png" alt="image-20230804143107386" /><figcaption aria-hidden="true">image-20230804143107386</figcaption></figure><p>使用访问控制列表设置zhangsan能读能写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m user:zhangsan:rw /var/tmp/hosts</span><br></pre></td></tr></table></figure><p>使用访问控制列表设置lisi不能读不能写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m user:lisi:--- /var/tmp/hosts</span><br></pre></td></tr></table></figure><h3 id="附加权限">附加权限</h3><p><img data-src="image-20230804110835797.png" /></p><h2 id="ntp同步">NTP同步</h2><figure><img data-src="image-20230804151425466.png" alt="image-20230804151425466" /><figcaption aria-hidden="true">image-20230804151425466</figcaption></figure><figure><img data-src="image-20230804154830315.png" alt="image-20230804154830315" /><figcaption aria-hidden="true">image-20230804154830315</figcaption></figure><h2 id="查找文件">查找文件</h2><figure><img data-src="image-20230804160644701.png" alt="image-20230804160644701" /><figcaption aria-hidden="true">image-20230804160644701</figcaption></figure><p>查找文件大于5KB，文件名是以file为开头，同时需要使用ls-lh查看大小的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc -size +5k -name <span class="string">&quot;file*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230804161536008.png" alt="image-20230804161536008" /><figcaption aria-hidden="true">image-20230804161536008</figcaption></figure><h2 id="查找字符串">查找字符串</h2><figure><img data-src="image-20230804164614308.png" alt="image-20230804164614308" /><figcaption aria-hidden="true">image-20230804164614308</figcaption></figure><figure><img data-src="image-20230804164653597.png" alt="image-20230804164653597" /><figcaption aria-hidden="true">image-20230804164653597</figcaption></figure><p>题目：</p><figure><img data-src="image-20230804164830102.png" alt="image-20230804164830102" /><figcaption aria-hidden="true">image-20230804164830102</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep sbin /etc/man_db.conf &gt; /root/out.txt</span><br></pre></td></tr></table></figure><h2 id="归档和压缩">归档和压缩</h2><p><img data-src="image-20230804165655396.png" /></p><h2 id="配置autofs">配置autoFS</h2><figure><img data-src="image-20230807094123859.png" alt="image-20230807094123859" /><figcaption aria-hidden="true">image-20230807094123859</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载远程资源</span></span><br><span class="line">mount 10.10.10.1:/home/wf09 /mnt</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230807100925339.png" alt="image-20230807100925339" /><figcaption aria-hidden="true">image-20230807100925339</figcaption></figure><figure><img data-src="image-20230807112248031.png" alt="image-20230807112248031" /><figcaption aria-hidden="true">image-20230807112248031</figcaption></figure><figure><img data-src="image-20230807112546761.png" alt="image-20230807112546761" /><figcaption aria-hidden="true">image-20230807112546761</figcaption></figure><h2 id="设置root密码">设置ROOT密码</h2><figure><img data-src="image-20230807144542841.png" alt="image-20230807144542841" /><figcaption aria-hidden="true">image-20230807144542841</figcaption></figure><figure><img data-src="image-20230807145422169.png" alt="image-20230807145422169" /><figcaption aria-hidden="true">image-20230807145422169</figcaption></figure><h2 id="配置网络">配置网络</h2><p><img data-src="image-20230807150656550.png" /></p><h2 id="磁盘分区">磁盘分区</h2><figure><img data-src="image-20230807151801644.png" alt="image-20230807151801644" /><figcaption aria-hidden="true">image-20230807151801644</figcaption></figure><figure><img data-src="image-20230807153835938.png" alt="image-20230807153835938" /><figcaption aria-hidden="true">image-20230807153835938</figcaption></figure><h2 id="逻辑卷">逻辑卷</h2><figure><img data-src="image-20230807164615687.png" alt="image-20230807164615687" /><figcaption aria-hidden="true">image-20230807164615687</figcaption></figure><figure><img data-src="image-20230808094037624.png" alt="image-20230808094037624" /><figcaption aria-hidden="true">image-20230808094037624</figcaption></figure><figure><img data-src="image-20230808094900139.png" alt="image-20230808094900139" /><figcaption aria-hidden="true">image-20230808094900139</figcaption></figure><figure><img data-src="image-20230808101315117.png" alt="image-20230808101315117" /><figcaption aria-hidden="true">image-20230808101315117</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建卷组并指定扩展块</span></span><br><span class="line">vgcreate -s 16M myvg /dev/nvme0n1p3</span><br><span class="line"><span class="comment"># 创建逻辑卷并设置大小为50个扩展单元</span></span><br><span class="line">lvcreate -n mylv -L 800M myvg</span><br><span class="line"><span class="comment"># 格式化成vfat格式</span></span><br><span class="line">mkfs.vfat /dev/myvg/mylv</span><br><span class="line"><span class="comment"># 设置自动挂载</span></span><br><span class="line"><span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/myvg/mylv    /mnt/mylv  vfat defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="vdo虚拟卷">VDO虚拟卷</h2><figure><img data-src="image-20230808102351816.png" alt="image-20230808102351816" /><figcaption aria-hidden="true">image-20230808102351816</figcaption></figure><figure><img data-src="image-20230808103639259.png" alt="image-20230808103639259" /><figcaption aria-hidden="true">image-20230808103639259</figcaption></figure><blockquote><p>总结成一句话：用实际容量小的物理磁盘创建容量大的逻辑磁盘</p></blockquote><p><img data-src="image-20230808104325531.png"alt="image-20230808104325531" /> <img data-src="image-20230808105540492.png"alt="image-20230808105540492" /></p><figure><img data-src="image-20230808111305131.png" alt="image-20230808111305131" /><figcaption aria-hidden="true">image-20230808111305131</figcaption></figure><figure><img data-src="image-20230808111331418.png" alt="image-20230808111331418" /><figcaption aria-hidden="true">image-20230808111331418</figcaption></figure><figure><img data-src="image-20230808111345237.png" alt="image-20230808111345237" /><figcaption aria-hidden="true">image-20230808111345237</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是红帽认证RHCSA。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：Red Hat RHCSA&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT x86各个版本的区别</title>
    <link href="https://fly97.cn/p/the-difference-between-each-version-of-openwrt(x86)/"/>
    <id>https://fly97.cn/p/the-difference-between-each-version-of-openwrt(x86)/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是OpenWRTX86各个架构的区别。</p><p><strong>关键词： OpenWRT x86各个版本的区别</strong></p><span id="more"></span><p>简单介绍 <ahref="https://itlangzi.com/jump.html?https:%2F%2Fopenwrt.org%2F">openwrt</a><code>x86</code> 平台各个版本的区别</p><p>x86 OpenWrt有多个目标，其中一些针对旧的或特定的硬件，它们的构建默认值可能不适合现代x86 硬件：</p><ul><li><strong>64</strong>适用于现代 PC 硬件（从 2007年左右开始的任何硬件），它是为 64 位功能的计算机构建的，并且支持现代 CPU功能。除非您有充分的理由不这样做，否则请选择此选项。</li><li><strong>Generic</strong>适用于仅 32 位的硬件（旧硬件或某些 Atom处理器），应该是<strong>i686</strong> Linux 架构，可在 Pentium 4及更高版本上工作。仅当您的硬件无法运行 64 位版本时才使用此选项。</li><li><strong>Legacy</strong>是针对非常老的PC硬件，PentiumMMX，在Linux架构中被称为<strong>i586的支持。</strong>它将错过您在现代硬件上想要/需要的许多功能，例如多核支持和对4GB 以上 RAM的支持，但实际上可以在古老的硬件上运行，而其他版本则不能。</li><li><strong>Geode</strong>是为 Geode SoC定制的传统目标，它仍在许多（老化的）网络设备中使用，例如 PCEngines 的旧Alix 板。</li></ul><h1 id="ext4-combined-efi.img.gz">1. ext4-combined-efi.img.gz</h1><ul><li>使用可读写的<code>ext4</code>分区，没有<code>squashfs</code>的只读文件系统</li><li>根分区可以使用更大的驱动器(e.g. SSD/SATA/mSATA/SATADOM/NVMe/etc)进行扩展</li><li>没有故障安全模式和出厂重置等功能，这些功能需要<code>squashfs</code>的支持</li><li>自带引导分区和根分区以及主引导记录 (MBR) 区域以及更新的 GRUB2</li><li>支持efi引导</li></ul><h1 id="ext4-combined.img.gz">2. ext4-combined.img.gz</h1><ul><li><ahref="https://itlangzi.com/s/FCZV11.html#1-ext4-combined-efiimggz">同1</a>，但不支持efi引导</li></ul><h1 id="ext4-rootfs.img.gz">3. ext4-rootfs.img.gz</h1><ul><li>只有根分区的镜像，重新安装不会覆盖引导分区和主引导记录 (MBR)，</li><li>由于不带引导分区，首次安装需要自行使用<code>grub</code>或者<code>syslinux</code>来引导</li><li>使用<code>ext4</code>分区</li></ul><h1 id="kernel.bin">4. kernel.bin</h1><ul><li>独立的内核</li></ul><h1 id="squashfs-combined-efi.img.gz">5.squashfs-combined-efi.img.gz</h1><ul><li><code>squashfs</code>是个只读的文件系统,相当于<code>windows</code>的<code>ghost</code>,支持故障安全模式和出厂重置等功能</li><li>包含一个只读的根文件系统和一个存储设置以及安装软件可读写的分区</li><li>组合模式，只有不到<code>100MB</code>的空间来存储额外的包和配置，并且无法扩展根分区</li><li>支持efi引导</li></ul><h1 id="squashfs-combined.img.gz">6. squashfs-combined.img.gz</h1><ul><li><ahref="https://itlangzi.com/s/FCZV11.html#5-squashfs-combined-efiimggz">同5</a>，但不支持efi引导</li></ul><h1 id="squashfs-rootfs.img.gz">7. squashfs-rootfs.img.gz</h1><ul><li><不知道是干啥的></li></ul><h1 id="rootfs.tar.gz">8. rootfs.tar.gz</h1><ul><li>所有的文件都在根目录下</li><li>不带引导，需要自行使用<code>grub</code>或者<code>syslinux</code>来引导</li></ul><p><strong>建议:</strong></p><ul><li>需要扩展分区使用:<code>combined-ext4.img.gz</code>和<code>ext4-combined-efi.img.gz</code></li><li>不需要扩展分区使用:<code>squashfs-combined.img.gz</code>和<code>squashfs-combined-efi.img.gz</code></li></ul><p><strong>参考:</strong></p><ol type="1"><li><ahref="">https://openwrt.org/docs/guide-user/installation/openwrt_x86</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是OpenWRT
X86各个架构的区别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词： OpenWRT x86各个版本的区别&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="learning" scheme="https://fly97.cn/tags/learning/"/>
    
    <category term="OpenWRT" scheme="https://fly97.cn/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>搭建zabbix监控系统</title>
    <link href="https://fly97.cn/p/install-zabbix/"/>
    <id>https://fly97.cn/p/install-zabbix/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是zabbix监控系统的学习。</p><p><strong>关键词：zabbix</strong></p><span id="more"></span><h2 id="zabbix架构">zabbix架构</h2><p><img data-src="使用docker搭建zabbix监控系统/image-20230811085633556.png" /></p><h2 id="镜像种类">镜像种类</h2><table><colgroup><col style="width: 9%" /><col style="width: 45%" /><col style="width: 45%" /></colgroup><thead><tr class="header"><th>说明</th><th>镜像</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>Zabbix agent</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-agent/">zabbix/zabbix-agent</a></td><td></td></tr><tr class="even"><td>Zabbix server</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-server-mysql/">zabbix/zabbix-server-mysql</a></td><td>支持 MySQL 数据库的 Zabbix server</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-server-pgsql/">zabbix/zabbix-server-pgsql</a></td><td>支持 PostgreSQL 数据库的 Zabbix server</td></tr><tr class="even"><td>Zabbix web UI</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-apache-mysql/">zabbix/zabbix-web-apache-mysql</a></td><td>基于Apache2 Web服务器 的 Zabbix web 界面，支持 MySQL 数据库</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-apache-pgsql/">zabbix/zabbix-web-apache-pgsql</a></td><td>基于Apache2 Web服务器 的 Zabbix web 界面，支持 PostgreSQL数据库</td></tr><tr class="even"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql/">zabbix/zabbix-web-nginx-mysql</a></td><td>基于Nginx Web服务器 的 Zabbix web 界面，支持 MySQL 数据库</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-nginx-pgsql/">zabbix/zabbix-web-nginx-pgsql</a></td><td>基于Nginx Web服务器 的 Zabbix web 界面，支持 PostgreSQL 数据库</td></tr><tr class="even"><td>Zabbix proxy</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/">zabbix/zabbix-proxy-sqlite3</a></td><td>Zabbix proxy ，支持 SQLite3 数据库（Zabbixproxy是使得Zabbix支持分布式监控的扩展的组件）</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-proxy-mysql/">zabbix/zabbix-proxy-mysql</a></td><td>Zabbix proxy， 支持 MySQL 数据库</td></tr><tr class="even"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-java-gateway/">zabbix/zabbix-java-gateway</a></td><td>Zabbix Java 网关（ZabbixJava网关是用于与Java应用程序中集成并监控其性能和状态，可以充当Zabbix服务器与Java应用程序之间的中间代理）</td></tr></tbody></table><h2 id="docker-compose.yml文件">docker-compose.yml文件</h2><p>根据架构图，zabbix主要有以下组件：</p><ul><li>zabbixserver服务端，负责处理由agent或者proxy发送来的数据，并将这部分数据写入数据库。与这部分相关的docker配置文件如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-server-mysql</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment">#- ./zabbix:/etc/zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./alertscripts:/usr/lib/zabbix/alertscripts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY_ENABLE=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAYPORT=10052</span></span><br></pre></td></tr></table></figure><p>主要设置以下几个地方：</p><ol type="1"><li>DB_SERVER_HOST：这部分是设置后端数据库的地址，如果两者在同一台机器上直接使用localhost即可。</li><li>MYSQL_DATABASE：数据库名称，默认是zabbix。</li><li>MYSQL_USER：zabbix数据库的用户名，默认也是zabbix。</li><li>MYSQL_PASSWORD：zabbix数据库的密码，默认也是zabbix。</li><li>MYSQL_ROOT_PASSWORD：数据库的root密码</li><li>ZBX_JAVAGATEWAY：java gateway的地址，这里以容器的名称代替。</li><li>ZBX_JAVAGATEWAY_ENABLE：设置是否启用java gateway。</li><li>ZBX_JAVAGATEWAYPORT：java gateway的端口。</li></ol><blockquote><p>配置文件目录对应/etc/zabbix/zabbix_server.conf</p></blockquote><ul><li>zabbix 需要连接的mysql数据库</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql:debian</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysqld</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--collation-server=utf8_bin</span></span><br></pre></td></tr></table></figure><p>这部分是zabbix连接的mysql数据库，需要注意的是mysql的版本对于某个特定版本可能会有要求，这个可以在日志中查看到对应的报错。</p><ul><li><p>zabbix的javagateway：可以通过JAVA程序的JMX特性连接到JAVA应用程序，进而查看JAVA应用程序的性能。这部分没有默认设置。</p><blockquote><p>该应用程序的默认端口是10052，这个端口和设置的JMX端口不同，一个是客户端（应用程序）的端口（JMX端口），另外一个相当于是代理的gateway端口（默认工作在10052）</p></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-java-gateway:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-java-gateway</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><ul><li>zabbix的前端展示界面，一般是php+nginx的环境。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-web-nginx-mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-web-nginx-mysql</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./Song.ttf:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf</span></span><br></pre></td></tr></table></figure><blockquote><p>这里注意区分DB_SERVER_HOST和ZBX_SERVER_HOST的区别，一个是连接后端数据库的端口，另一个是连接zabbix服务端的端口。</p><p>此外容器的默认字体无法正常显示中文，这里使用宋体进行替换。</p></blockquote><ul><li>zabbix的代理客户端：负责监控当前主机的组件,配合自定义的脚本可以实现自定义监控.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-agent:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-agent</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_HOSTNAME=Zabbix</span> <span class="string">server</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_PORT=10051</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><blockquote><p>主要设置Zabbix Server的IP地址和Zabbix的端口地址</p></blockquote><p>总体zabbix配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zabbix-web-nginx-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-web-nginx-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./Song.ttf:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-server-mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-mysql</span></span><br><span class="line">  <span class="attr">zabbix-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:debian</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysqld</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8_bin</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-java-gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-java-gateway</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-server-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-server-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment">#- ./zabbix:/etc/zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./alertscripts:/usr/lib/zabbix/alertscripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY_ENABLE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAYPORT=10052</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-mysql</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-agent</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_HOSTNAME=Zabbix</span> <span class="string">server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_PORT=10051</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是zabbix监控系统的学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：zabbix&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
    <category term="zabbix" scheme="https://fly97.cn/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>鸟哥的私房菜：基础学习篇</title>
    <link href="https://fly97.cn/p/the-basics-of-learning-private-kitchen-in-linux/"/>
    <id>https://fly97.cn/p/the-basics-of-learning-private-kitchen-in-linux/</id>
    <published>2023-07-31T01:29:30.000Z</published>
    <updated>2023-07-31T01:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是鸟哥的私房菜</p><p><strong>关键词：鸟哥的私房菜</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是鸟哥的私房菜&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：鸟哥的私房菜&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx进行反向代理</title>
    <link href="https://fly97.cn/p/reverse-proxy-with-nginx/"/>
    <id>https://fly97.cn/p/reverse-proxy-with-nginx/</id>
    <published>2023-05-30T02:03:00.000Z</published>
    <updated>2023-05-30T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用Nginx的流（stream）模块对指定网站进行反向代理。</p><p><strong>关键词：Nginx，反向代理</strong></p><span id="more"></span><p>Nginx的stream模块可以通过SNI（服务器名称指示）进行识别，可以设置根据不同的SNI名访问不同的upstream（上游）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> proxy <span class="string">&#x27;<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$protocol</span> <span class="variable">$status</span> <span class="variable">$bytes_sent</span> <span class="variable">$bytes_received</span> &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$session_time</span> &quot;<span class="variable">$upstream_addr</span>&quot; &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;&quot;<span class="variable">$upstream_bytes_sent</span>&quot; &quot;<span class="variable">$upstream_bytes_received</span>&quot; &quot;<span class="variable">$upstream_connect_time</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/tcp-access.log proxy;</span><br><span class="line">    <span class="attribute">open_log_file_cache</span> <span class="literal">off</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SNI识别，将一个个域名映射成一个配置名</span></span><br><span class="line">    <span class="attribute">map</span> <span class="variable">$ssl_preread_server_name</span> <span class="variable">$stream_map</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> others;</span><br><span class="line">        cloudflare.<span class="attribute">com</span> cloudflare;</span><br><span class="line">        ocsp.pki.<span class="attribute">goog</span> google; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> cloudflare &#123;</span><br><span class="line">        <span class="attribute">server</span> cloudflare.com:<span class="number">443</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># upstream, 也就是流量上游的配置</span></span><br><span class="line">    <span class="section">upstream</span> google &#123;</span><br><span class="line">        <span class="attribute">server</span> ocsp.pki.goog:<span class="number">443</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> others &#123;</span><br><span class="line">        <span class="attribute">server</span> unix:/dev/shm/nginx.sock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># stream模块监听443端口，并进行端口复用</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> reuseport;</span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$stream_map</span>;</span><br><span class="line">        <span class="attribute">ssl_preread</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图代码中，cloudflare作为配置名，对应cloudflare.com:443的流量上游；</p><p>google作为配置名，对应google.com:443的流量上游。</p><p>定义一个others配置，对应其余的SNI，也就是默认配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍如何使用Nginx的流（stream）模块对指定网站进行反向代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：Nginx，反向代理&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="https://fly97.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Scaleway星辰Stardust纯IPv6服务器体验</title>
    <link href="https://fly97.cn/p/stardust-VPS-in-scalway/"/>
    <id>https://fly97.cn/p/stardust-VPS-in-scalway/</id>
    <published>2023-02-04T02:03:00.000Z</published>
    <updated>2023-02-04T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Stardust是法国云服务器厂商Scaleway下的一款的经济实例。官方介绍是这样的——“Atiny Instance so powerful and cost effective that we only release itonce a month.”</p><p>Stardust可以使用大小为5G的免费硬盘，并带有免费的IPv6地址，因此为了减免费用可以将收费提供的IPv4地址关掉，这样就可以免费使用流量了。</p><p>本文主要介绍如何开通Scaleway星辰Stardust服务器，并对其进行一些配置，以便其可以正常使用。</p><p>关键词：<strong>Stardust</strong></p><span id="more"></span><h2 id="开通">开通</h2><p>注册地址：<ahref="https://console.scaleway.com/">https://console.scaleway.com/</a></p><p>Stardust服务器仅仅在以下地区提供：</p><p><img data-src="image-20230204184827546.png" /></p><p>由于是限量供应，因此网站常常显示已售罄。</p><p><img data-src="image-20230204184955458.png" /></p><p>可以通过API进行开通，进而绕过此限制。</p><h3 id="安装api">安装API</h3><p>下载地址：<ahref="https://github.com/scaleway/scaleway-cli">https://github.com/scaleway/scaleway-cli</a></p><p>安装完毕以后需要创建一个token：<ahref="https://console.scaleway.com/project/credentials">https://console.scaleway.com/project/credentials</a>，创建完了以后如下图所示，需要记录<strong>SecretKey</strong>，该值显示一次。</p><p><img data-src="image-20230204185843449.png" /></p><p>在cmd或者shell控制台输入<code>scw init</code>，根据提示输入上文记录的SecretKey.</p><p><img data-src="image-20230204190323811.png" /></p><h3 id="使用api创建机器">使用API创建机器</h3><p>Github的readme提供了很详细的使用说明：<ahref="https://github.com/scaleway/scaleway-cli#reference-documentation">https://github.com/scaleway/scaleway-cli#reference-documentation</a></p><figure><img data-src="image-20230204190729175.png" alt="image-20230204190729175" /><figcaption aria-hidden="true">image-20230204190729175</figcaption></figure><p>我们这里需要使用的是<code>instance CLI</code>，点击CLI并选择<code>Ceate server</code>.</p><figure><img data-src="image-20230204190904436.png" alt="image-20230204190904436" /><figcaption aria-hidden="true">image-20230204190904436</figcaption></figure><p>根据下面表格中列的信息，设置输入的参数</p><figure><img data-src="image-20230204202125963.png" alt="image-20230204202125963" /><figcaption aria-hidden="true">image-20230204202125963</figcaption></figure><p>主要有以下几个参数需要设置</p><p>image：服务器镜像，这里使用debian_bullseye, 也可以使用其他</p><p>type：服务器类型， 这里使用STARDUST1-S</p><p>ip：这里使用none，即不创建IPv4地址</p><p>ipv6：这里使用true，创建ipv6地址</p><p>zone：地区，默认地区是法国</p><p>组合以上参数，在控制台执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure><img data-src="image-20230204203837121.png" alt="image-20230204203837121" /><figcaption aria-hidden="true">image-20230204203837121</figcaption></figure><p>说明以及创建成功。</p><p>登录后台，查看运行的机器。登录到后台以后发现无法开机器，后来才发现是创建机器的时候没有声明根存储，最小是10G.</p><figure><img data-src="image-20230204204234274.png" alt="image-20230204204234274" /><figcaption aria-hidden="true">image-20230204204234274</figcaption></figure><p>重新执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span> root-volume=b:10G</span><br></pre></td></tr></table></figure><p>还是无法开机。说明当前地域资源已用尽。于是切换到另外一个荷兰地区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span> root-volume=b:10G zone=nl-ams-1</span><br></pre></td></tr></table></figure><p>创建成功啦！</p><figure><img data-src="image-20230204205112843.png" alt="image-20230204205112843" /><figcaption aria-hidden="true">image-20230204205112843</figcaption></figure><h2 id="设置机器">设置机器</h2><p>注意：需要使用IPv6地址连接。</p><figure><img data-src="image-20230204205425980.png" alt="image-20230204205425980" /><figcaption aria-hidden="true">image-20230204205425980</figcaption></figure><h3 id="访问ipv4网络">访问IPv4网络</h3><p>由于常见的网络地址都是IPv4地址，因此需要赋予机器访问IPv4地址的能力。这里有两种方案。</p><h4 id="dns64和nat64">DNS64和NAT64</h4><p>使用DNS64和NAT64技术，具体可以参考这一篇文章：<ahref="https://developers.google.com/speed/public-dns/docs/dns64?hl=zh-cn">Google公共 DNS64 | Public DNS | Google Developers</a></p><p>简单说就是请求DNS时，将IPv4地址嵌入在IPv6地址里，此时需要有一个支持DNS64服务的DNS。因此只需要将DNS地址更改为支持DNS64服务的地址，就可以实现访问IPv4的网站。</p><p>经过我的测试，谷歌的DNS64dns在这一款服务器上无法使用，可能是和网络有关。给出几个可以使用的DNS64服务的地址。</p><table><colgroup><col style="width: 17%" /><col style="width: 20%" /><col style="width: 27%" /><col style="width: 34%" /></colgroup><thead><tr class="header"><th>提供商</th><th>国家/城市</th><th>DNS64服务</th><th>NAT64前缀</th></tr></thead><tbody><tr class="odd"><td>Kasper Dupont</td><td>德国/纽伦堡</td><td>2a01:4f8:c2c:123f::1</td><td>2a01:4f8:c2c:123f:64::/96</td></tr><tr class="even"><td>Kasper Dupont</td><td>英国/伦敦</td><td>2a00:1098:2c::1</td><td>2a00:1098:2c::/96</td></tr><tr class="odd"><td>Kasper Dupont</td><td>荷兰/阿姆斯特丹</td><td>2a00:1098:2b::1</td><td>2a00:1098:2b::/96</td></tr></tbody></table><p>将DNS更改为以上的DNS服务即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf </span><br><span class="line"><span class="comment">## nameserver 2a00:1098:2b::1</span></span><br></pre></td></tr></table></figure><p>设置完毕以后发现可以访问github.com了。</p><p><img data-src="image-20230205141017958.png" /></p><p>但是这种方式也有一定的问题，就是无法访问纯ipv4地址，下面来看第二种方案。</p><h4 id="cloudflare-warp">Cloudflare warp</h4><p>warp是Cloudflare基于wireguard提供的一款免费软件，可以通过其经过ipv6地址访问ipv4的网站，也可以访问纯ipv4的地址。</p><p>可以使用一键脚本，已经开源在GitHub上：<ahref="https://github.com/fscarmen/warp">fscarmen/warp: WARP one-clickscript. Add an IPv4, IPv6 or dual-stack CloudFlare WARP networkinterface and Socks5 proxy for VPS. 一键脚本 (github.com)</a></p><p>根据脚本的提示操作即可。</p><p><img data-src="image-20230205152823725.png" /></p><p>实测这种方式最方便。</p><h2 id="性能测试">性能测试</h2><p>安装经典的<code>bench.ch</code>脚本测试以下服务器的性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230205153728307.png" alt="image-20230205153728307" /><figcaption aria-hidden="true">image-20230205153728307</figcaption></figure><p>相比于<strong>国内某些厂商</strong>提供的服务器，性能还是非常不错的。</p><h2 id="账单">账单</h2><p>这款机器如果只开IPv6，系统盘设置为最小10G，则每个月只需要不到0.5欧元。还不到人民币五块钱。如果你那里IPv6连接比较好，可以试试这一款服务器。</p><p><img data-src="image-20230205154205719.png" /></p><p>全文完。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Stardust是法国云服务器厂商Scaleway下的一款的经济实例。官方介绍是这样的——“A
tiny Instance so powerful and cost effective that we only release it
once a month.”&lt;/p&gt;
&lt;p&gt;Stardust可以使用大小为5G的免费硬盘，并带有免费的IPv6地址，因此为了减免费用可以将收费提供的IPv4地址关掉，这样就可以免费使用流量了。&lt;/p&gt;
&lt;p&gt;本文主要介绍如何开通Scaleway星辰Stardust服务器，并对其进行一些配置，以便其可以正常使用。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;Stardust&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go操作数据库(二)</title>
    <link href="https://fly97.cn/p/go-with-database-2/"/>
    <id>https://fly97.cn/p/go-with-database-2/</id>
    <published>2023-01-31T09:26:00.000Z</published>
    <updated>2023-01-31T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。</p><p>关键词：<strong>golang</strong></p><p>在项目中我们通常会使用<code>database/sql</code>连接MySQL数据库。本文结束<code>sqlx</code>实现批量插入数据的例子，介绍了<code>sqlx</code>中可能被忽略的<code>sqlx.In</code>和<code>DB.NameExec</code>方法。</p><span id="more"></span><h2 id="sqlx介绍">sqlx介绍</h2><p><code>sqlx</code>被分为是<code>database/sql</code>的超集，在<code>database/sql</code>的基础上提供了一组扩展，而这组扩展处理大家常用来查询的<code>Get(dest interface&#123;&#125;, ...) error</code>和<code>Select(dest interface&#123;&#125;, ...) error</code>之外，还有很多强大的功能。</p><p>仓库地址：<ahref="github.com/jmoiron/sqlx">github.com/jmoiron/sqlx</a></p><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure><h2 id="基本使用">基本使用</h2><h3 id="连接数据库">连接数据库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line">    dsn := <span class="string">&quot;user:password@tcp(xxx.aws.us-west-1.rds.amazonaws.com:3306)/mt_subtitle_table?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">    <span class="comment">//也可以使用MustConnect，连接不成功就panic</span></span><br><span class="line">    db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;connect DB failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    db.SetMaxOpenConns(<span class="number">20</span>)              <span class="comment">// 设置最大连接数</span></span><br><span class="line">    db.SetMaxIdleConns(<span class="number">10</span>)   <span class="comment">// 设置最大闲置连接数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询">查询</h3><h4 id="查询单行数据">查询单行数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    <span class="keyword">var</span> m Moive</span><br><span class="line">    err := db.Get(&amp;m, sqlStr, <span class="string">&quot;AAA-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m: %v&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询多行数据">查询多行数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where actress= ?&quot;</span></span><br><span class="line">   <span class="keyword">var</span> movies []Movie</span><br><span class="line">    err := db.Select(&amp;moives, sqlStr, <span class="string">&quot;川岛芳子&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;query failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;movies: %#v&quot;</span>, movies)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入更新和删除">插入、更新和删除</h3><p>sqlx中的exec方法和原生sql中的exec使用基本一致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values (?,?)&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;AAA-002&quot;</span>, <span class="string">&quot;仲川そら&quot;</span>,<span class="string">&quot;赤面羞恥&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    theID, err := ret.LastInsertId() <span class="comment">// 新插入数据的id</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get lastinsert ID failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;insert success, the id is %d&quot;</span>, theID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;update mt_subtitle_table set actress=? where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;仲川そら&quot;</span>, <span class="string">&quot;マジックミラ&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;update failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowAffected() <span class="comment">// 影响操作的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowAffected failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;update success, affected rows:%d&quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;delete from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;AAA-002&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;delete failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowsAffected() <span class="comment">// 影响操作的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowAffected failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;delete success, affected rows:%d&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="namedexec">NamedExec</h3><p><code>DB.NamedExec</code>方法用来绑定SQL语句与<strong>结构体或者map中的同名字段</strong>。</p><p>map同名字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertUserDemo</span><span class="params">()</span></span> (err <span class="type">error</span>)  &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) values(:name, :age)&quot;</span></span><br><span class="line">    _, err = db.NamedExec(sqlStr,</span><br><span class="line">                          <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">                              <span class="string">&quot;id&quot;</span>: <span class="string">&quot;ABC-001&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;actress&quot;</span>: <span class="string">&quot;川岛芳子&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;title&quot;</span>: <span class="string">&quot;上海回忆录&quot;</span></span><br><span class="line">                          &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>:字段名</code>的用法要记住。</li></ul><p>结构体同名字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    FirstName <span class="type">string</span> <span class="string">`db:&quot;first_name&quot;`</span></span><br><span class="line">    LastName  <span class="type">string</span> <span class="string">`db:&quot;last_name&quot;`</span></span><br><span class="line">    Email     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.NamedExec(<span class="string">&quot;INSERT INTO person (first_name, last_name, email) VALUES (:first_name, :last_name, :email)&quot;</span>, &amp;Person&#123;<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Citizen&quot;</span>, <span class="string">&quot;jane.citzen@example.com&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="namedquery">NamedQuery</h3><p>与<code>DB.NamedExec</code>同理，这里是支持查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nameQuery</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;SELECT * FROM mt_subtitle_table WHERE actress=:actress&quot;</span></span><br><span class="line">    <span class="comment">// 使用map做命名查询</span></span><br><span class="line">    rows, err := db.NamedQuery(sqlStr, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;actress&quot;</span>: <span class="string">&quot;川岛芳子&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;dn.NamedQuery failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Movie</span><br><span class="line">        err := rows.StructScan(&amp;m)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;movie: %v&quot;</span>, m)</span><br><span class="line">    &#125;</span><br><span class="line">    m1 := Movie&#123;</span><br><span class="line">        Id: <span class="string">&quot;SNAA-001&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用结构体命名查询，根据结构体的 db tag 进行映射</span></span><br><span class="line">    rows, err := db.NameQuery(sqlStr, m1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;db.NamedQuery failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close() </span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Moive</span><br><span class="line">        err != rows.StructScan(&amp;m)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err:%v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;movie: %#v&quot;</span>, m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务操作">事务操作</h3><p>对于事务操作，我们可以使用<code>sqlx</code>中提供的<code>db.Beginx()</code>和<code>tx.Exec()</code>方法。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transationDemo</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">    tx. err := db.Begin() <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Prinf(<span class="string">&quot;事务开始失败，错误:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return之前执行</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line">            tx.Rollback()</span><br><span class="line">            <span class="built_in">panic</span>(p)      <span class="comment">// 回滚之后重新panic</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;rollback&quot;</span>)</span><br><span class="line">            tx.Rollback() <span class="comment">// 有错误，因此需要回滚</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            err = tx.Commit() <span class="comment">// 没有错误，提交事务</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;commit&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    sqlStr1 := <span class="string">&quot;UPDATE mt_subtitle_table SET title=&#x27;艺妓回忆录&#x27; where id = ?&quot;</span></span><br><span class="line">    rs, err := tx.Exec(sqlStr1, <span class="string">&quot;ABC-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;sqlStr1执行失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr2 := <span class="string">&quot;UPDATE mt_subtitle_table SET title=&#x27;上海回忆录&#x27; where id = ?&quot;</span></span><br><span class="line">    rs, err := tx.Exec(sqlStr2, <span class="string">&quot;AAA-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    n, err = rs.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;sqlStr2执行失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="sqlx.in">sqlx.In</h2><p><code>sqlx.In</code>是<code>sqlx</code>提供的一个非常方便的函数。</p><h3 id="批量插入">批量插入</h3><p>这里创建一个表，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mt_subtitle_table`  (</span><br><span class="line">  `id` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `actress` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>定义一个结构体，字段通过tag和上述表中的字段一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Moive <span class="keyword">struct</span>&#123;</span><br><span class="line">    ID <span class="type">string</span> <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">    Actress <span class="type">string</span> <span class="string">`db:&quot;actress&quot;`</span></span><br><span class="line">    Title <span class="type">string</span> <span class="string">`db:&quot;title&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绑定变量：bindvars</strong></p><p>查询占位符<code>?</code>又被称为<strong>bindvars</strong>，非常重要，应该<strong>始终使用它们向数据库发送值</strong>，因为他们可以防止SQL注入攻击。<code>database/sql</code>不尝试对查询文本进行任何验证；它与编码的参数一起按照原样发送到服务器，除非驱动程序实现一个特殊的接口，否则在执行之前，查询实在服务器上准备的。</p><p><code>bindvars</code>是特定于数据库的：</p><ul><li>MySQL中使用<code>?</code></li><li>PostgreSQL使用枚举的<code>$1</code>、<code>$2</code>等语法</li><li>SQLite中使用<code>?</code>和<code>$1</code>的语法都支持</li><li>Oracle中使用<code>:name</code>的语法</li></ul><p><code>bindvars</code>的一个常见错误是，他们用来在sql语句中插入值。其实他们<strong>仅仅用于参数化</strong>，不允许更改SQL语句的结构。例如使用<code>bindvars</code>尝试参数化列或表名将不起作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 不能用来插入表名（叫SQL语句中表名的占位符）</span></span><br><span class="line">db.Query(<span class="string">&quot;SELECT * FROM ?&quot;</span>, <span class="string">&quot;mytable&quot;</span>)</span><br><span class="line"><span class="comment">// ? 不能用来插入列名（叫做SQL语句中列名的占位符）</span></span><br><span class="line">db.Query(<span class="string">&quot;SELECT ?, ? FROM people&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;location&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="自己实现语句实现批量插入">自己实现语句实现批量插入</h4><p>比较笨，但是好理解。就是有多少个movie就拼接多少个<code>(?, ?)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BatchInsertMoive 自行构造批量插入的语句</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsertMovie</span><span class="params">(movies []*Movie)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 存放(?, ?)的slice</span></span><br><span class="line">    valueStrings := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(movies))</span><br><span class="line">    <span class="comment">// 存放values的slice</span></span><br><span class="line">    valueArgs := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>, <span class="built_in">len</span>(movies) * <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// 遍历users准备相关数据</span></span><br><span class="line">    <span class="keyword">for</span> _, m := <span class="keyword">range</span> moives &#123;</span><br><span class="line">        <span class="comment">// 此处占位符要与插入值的个数对应</span></span><br><span class="line">        valuesStrings = <span class="built_in">append</span>(valuesStrings, <span class="string">&quot;(?, ?, ?)&quot;</span>)</span><br><span class="line">        valueArgs = <span class="built_in">append</span>(valuesArgs, m.ID, m.Actress, m.Title)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自行拼接要执行的具体语句</span></span><br><span class="line">    stmt := fmt.Sprintf(<span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES %s&quot;</span>,</span><br><span class="line">strings.Join(valueStrings, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">    _, err := db.Exec(stmt, valueArgs...)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用sqlx.in实现批量插入">使用sqlx.In实现批量插入</h4><p>前提是需要我们的结构体实现<code>driver.Valuer</code>接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Movie)</span></span> Value() (driver.Value, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">interface</span>&#123;&#125;&#123;m.ID, m.Actress, m.title&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>sqlx.In</code>实现批量插入代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BatchInsertMoive 使用的是sqlx.In帮我们拼接语句和参数，注意传入的参数是[]interface&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsertMoive</span><span class="params">(moive []<span class="keyword">interface</span>&#123;&#125;)</span></span> (<span class="type">error</span>) &#123;</span><br><span class="line">    query, args, _ := sqlx.In(</span><br><span class="line">        <span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES (?), (?), (?),&quot;</span> <span class="comment">// 这里是根据movie长度来，还是根据字段的个数来，有待观察</span></span><br><span class="line">        movies..., <span class="comment">// 如果参数实现了driver.Valuer, sqlx.In会通过调用Value()来展开它</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(query) <span class="comment">// 查看生成的querysting</span></span><br><span class="line">    fmt.Println(args) <span class="comment">// 查看生成的args</span></span><br><span class="line">    _, err := db.Exec(query, args...)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用namedexec实现批量插入">使用NamedExec实现批量插入</h4><p>使用NamedExec实现批量插入的方法如下</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsert</span><span class="params">(users []*User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    _, err := db.NameExec(<span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES(:name, :age)&quot;</span>, users)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="sqlx.in的查询例子">sqlx.In的查询例子</h3><p>关于<code>sqlx.In</code>这里在补充一个用法，在<code>sqlx</code>查询语句中实现了In查询和FIND_IN_SET函数。即实现<code>SELECT * FROM mt_subtitle_table WHERE actress in ("川岛芳子"，"广田雅美")</code>和<code>SELECT * FROM mt_subtitle_table in (3, 2, 1) ORDER BY FIND_IN_SET(id, "川岛芳子"，"广田雅美")</code>.</p><h4 id="in查询">in查询</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QueryByIDs 根据指定ID查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryByIDs</span><span class="params">(ids []<span class="type">string</span>)</span></span> (movies []Movie, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 动态填充id</span></span><br><span class="line">    query, args, err := sqlx.In(<span class="string">&quot;SELECT id, actress, title FROM mt_subtitle_table WHERE actress IN (?)&quot;</span>, ids)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sqlx.In返回带`?`bindvar`的查询语句，我们使用Rebind()重新绑定他</span></span><br><span class="line">    query = db.Rebind(query)</span><br><span class="line">    err = db.Select(&amp;movies, query, args...)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="in查询和find_in_set函数">in查询和FIND_IN_SET函数</h4><p>查询id在给定id集合的数据并维持给定id集合的顺序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QuertAndOrderByIDs 按照指定id查询并维护顺序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuertAndOrderByIDs</span><span class="params">(ids []<span class="type">string</span>)</span></span>(moives []Movie, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 动态填充id</span></span><br><span class="line">    strIDs := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(ids))</span><br><span class="line">    <span class="keyword">for</span> _, id := <span class="keyword">range</span> ids &#123;</span><br><span class="line">        strIDs = <span class="built_in">append</span>(strIDs, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, id))</span><br><span class="line">    &#125;</span><br><span class="line">    query, args, err := sqlx.In(<span class="string">&quot;SELECT id, actress FROM user WHERE id IN (?) ORDER BY FIND_IN_SET(id, ?) ORDER BY FIND_IN_SET(id, ?)&quot;</span>, ids, strings.Join(strIDs, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sqlx.In 返回带 `?` bindvar的查询语句，我们使用Rebind()重新绑定它</span></span><br><span class="line">    query = db.Rebind(query)</span><br><span class="line">    err = db.Select(&amp;movie, query, args...)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目中我们通常会使用&lt;code&gt;database/sql&lt;/code&gt;连接MySQL数据库。本文结束&lt;code&gt;sqlx&lt;/code&gt;实现批量插入数据的例子，介绍了&lt;code&gt;sqlx&lt;/code&gt;中可能被忽略的&lt;code&gt;sqlx.In&lt;/code&gt;和&lt;code&gt;DB.NameExec&lt;/code&gt;方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
    <category term="mysql在、" scheme="https://fly97.cn/tags/mysql%E5%9C%A8%E3%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Go操作数据库(一)</title>
    <link href="https://fly97.cn/p/go-with-database-1/"/>
    <id>https://fly97.cn/p/go-with-database-1/</id>
    <published>2023-01-30T09:26:00.000Z</published>
    <updated>2023-01-30T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。</p><p>关键词：<strong>golang</strong></p><span id="more"></span><h2 id="连接">连接</h2><p>sql包提供了保证SQL或类SQL数据库的泛用接口。</p><p>使用sql包时必须注入（至少）一个数据库驱动。参见http://golang.org/s/sqldrivers获取驱动列表。</p><p>更多用法示例，参见wiki页面：http://golang.org/s/sqlwiki。</p><p>这里使用<code>github.com/go-sql-driver/mysql/</code>作为MySQL的驱动。</p><h3 id="下载依赖">下载依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure><h3 id="初始化链接">初始化链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(driverName, dataSourceName <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>返回的DB类型可用被多个goroutine同时使用</strong>，只需要创建一次，很少需要关闭这个对象；</p></li><li><p>Open函数<strong>只验证</strong>参数格式是否正确，不创建数据库的连接，无法验证密码是否正确；</p></li><li><p>一般设置成全局变量，<strong>一次初始化然后整个模块使用</strong>。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;https://github.com/go-sql-driver/mysql&quot;</span> <span class="comment">// init mysql驱动</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"><span class="comment">// Data Source Name</span></span><br><span class="line"><span class="keyword">const</span> dsn = <span class="string">&quot;root:xxx@tcp(127.0.0.1)/dbname&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="comment">// Open不会校验账号密码是否正确</span></span><br><span class="line">    <span class="comment">// 这里不要使用:=, 我们是给全局变量赋值，然后在main函数中示意使用全局变量</span></span><br><span class="line">    db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证用户名和密码是否正确">验证用户名和密码是否正确</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Ping() <span class="type">error</span></span><br></pre></td></tr></table></figure><ul><li>验证数据库是否可用</li><li>如果必要的话建立一个连接</li></ul><h3 id="设置最大连接数">设置最大连接数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxOpenConns(n <span class="type">int</span>)</span><br></pre></td></tr></table></figure><ul><li>设置数据库最大连接数</li><li>如果n &gt;0且小于<strong>最大闲置连接数</strong>，则会将最大闲置连接数减少到匹配开启最大连接数的限制</li><li>如果n &lt;= 0（默认值），不会限制最大开启连接数限制</li></ul><h3 id="设置最大闲置连接数">设置最大闲置连接数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxIdleConns(n <span class="type">int</span>)</span><br></pre></td></tr></table></figure><ul><li>设置数据库最大闲置连接数</li><li>如果n大于<strong>最大连接数</strong>，则新的最大闲置连接数会减少到最大连接数</li><li>如果n &lt;= 0，则不会保持闲置连接，<strong>默认值为2</strong></li></ul><h2 id="增删改查">增删改查</h2><h3 id="建库建表">建库建表</h3><p>先在MySQL中创建一个名为movies的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE movies;</span><br></pre></td></tr></table></figure><p>进入该数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE movies;</span><br></pre></td></tr></table></figure><p>创建一张用于测试的数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `mt_subtitle_table`  (</span><br><span class="line">  `id` text NOT NULL,</span><br><span class="line">  `actress` text NOT NULL,</span><br><span class="line">  `title` text NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><p>为了方便查询，我们实现定义一个结构体来存储mt_subtitle_table表的数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Movie <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="type">string</span></span><br><span class="line">    actress <span class="type">string</span></span><br><span class="line">    title <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行查询">单行查询</h3><p>单行查询执行一次查询，并<strong>期望返回最多一行结果（即Row）</strong>。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误，如未找到结果等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> QueryRow(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) *Row</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from user where id=?&quot;</span></span><br><span class="line">    <span class="keyword">var</span> m Movie</span><br><span class="line">    <span class="comment">// 要确保QueryRow之后调用Scan方法，否则持有的数据库连接不会被释放。</span></span><br><span class="line">    err := db.QueryRow(sqlStr, <span class="string">&quot;APAA-401&quot;</span>).Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;id: %s, actress: %s, title: %s&quot;</span>, m.id, m.actress, m.title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行查询">多行查询</h3><p>多行查询<code>db.Query()</code>执行一次查询，返回多行结果（Rows），一般用于执行select命令，<strong>参数args表示query中的占位符参数</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Query(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)(*Rows, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title for user where actress = ?&quot;</span></span><br><span class="line">    rows, err := db.Query(sqlStr, <span class="string">&quot;樱空桃&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printlf(<span class="string">&quot;query failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非常重要：释放持有的数据库连接</span></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Moive</span><br><span class="line">        err := rows.Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;id: %s, actress: %s, title: %s&quot;</span>, m.id, m.name, m.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><p>插入、更新和删除都使用<code>Exec</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Exec(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (Result, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>Exec执行一次命令（包括查询、删除、更新、插入等），返回的Result是对已执行的SQL命令的总结，参数args表示query中的占位参数。</p><p>插入数据代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values(?, ?, ?)&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;APAA-401&quot;</span>, <span class="string">&quot;樱空桃&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    theID, err := ret.LastInsertId() <span class="comment">// 返回插入新数据的ID</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get lastinsert ID failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;insert success, affected id: %v&quot;</span>, theID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数据">更新数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;update mt_subtitle_table set title=? where id=?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>, <span class="string">&quot;APAA-401&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;update failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowsAffected() <span class="comment">// 返回操作影响的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowsAffected failed, err:%v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;update success, affected rows: %d\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据">删除数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;delete from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;APAA-401&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;delete failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowAffected() <span class="comment">// 操作影响的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowsAffected failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;delete success, affected rows: %d&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql预处理">MySQL预处理</h2><h3 id="什么是预处理">什么是预处理</h3><p>普通SQL语句执行过程：</p><ol type="1"><li>客户端对SQL语句进行占位符替换得到完整的SQL语句；</li><li>客户端发送完整的SQL语句到MySQL服务端；</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li></ol><p>预处理执行过程：</p><ol type="1"><li>把SQL语句分成两部分，命令部分与数据部分。</li><li>先把命令部分发送到MySQL服务端，MySQL服务端进行SQL预处理。</li><li>然后把数据部分发送到MySQL服务端，MySQL服务端使用占位符进行替换。</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li></ol><h3 id="为何要预处理">为何要预处理</h3><ol type="1"><li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li><li>避免SQL注入问题。</li></ol><h2 id="go实现mysql预处理">Go实现MySQL预处理</h2><p><code>database/sql</code>使用下面的<code>Prepare</code>方法来实现预处理操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Prepare(query <span class="type">string</span>)(*Stmt, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>Prepare</code>方法会先将sql语句发送给MySQL服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p><p>查询操作的预处理实例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理查询实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareQueryDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where actress = ?&quot;</span></span><br><span class="line">    stmt, err := db.Prepare(sqlStr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;prepare failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> stmt.Close()</span><br><span class="line">    rows, err := stmt.Query(<span class="string">&quot;白桃花&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;query failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line">    <span class="comment">// 循环读取结果中的数据</span></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Movie</span><br><span class="line">        err := rows.Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;id: %v, actress: %v, title: %v&quot;</span>, m.id, m.actress, m.title)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入、更新和删除的预处理操作十分类似，这里以插入数据的预处理为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理插入实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareInsertDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values(?,?)&quot;</span></span><br><span class="line">    stmt, err := db.Prepare(sqlStr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;prepare failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> stmt.Close()</span><br><span class="line">    _, err = stmt.Exec(<span class="string">&quot;APAA-401&quot;</span>, <span class="string">&quot;白桃花&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    _, err = stmt.Exec(<span class="string">&quot;APAA-402&quot;</span>, <span class="string">&quot;樱空桃&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;insert success.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sql注入问题">SQL注入问题</h2><p>任何时候都不应该自己拼接SQL语句！</p><p>这里我们编写一个根据name字段查询user表的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sql注入实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlInjectDemo</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    sqlStr := fmt.Sprinf(<span class="string">&quot;select id, actress, title from mt_subtitle_table where actress = &#x27;%s&#x27;&quot;</span>, name)</span><br><span class="line">    <span class="keyword">var</span> m Movie</span><br><span class="line">    err := db.QueryRow(sqlStr).Scan(&amp;m.id, &amp;m.name, &amp;m.title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;movie: #%v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时输入以下字符串都可以引发SQL注入问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; or 1=1#&quot;</span>)</span><br><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; union select * from user #&quot;</span>)</span><br><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; and (select count(*) from user) &gt; 10&quot;</span>)</span><br></pre></td></tr></table></figure><p>补充：不同的数据库中，SQL语句中使用的占位符语法不尽相同。</p><table><thead><tr class="header"><th>数据库</th><th>占位符</th></tr></thead><tbody><tr class="odd"><td>MySQL</td><td><code>?</code></td></tr><tr class="even"><td>PostgreSQL</td><td><code>$1</code>,<code>$2</code>等</td></tr><tr class="odd"><td>SQlite</td><td><code>?</code>和<code>$1</code></td></tr><tr class="even"><td>Oracle</td><td><code>:name</code></td></tr></tbody></table><h2 id="go实现mysql事务">Go实现MySQL事务</h2><h3 id="什么是事务">什么是事务</h3><p>事务：一个最小的不可再分的工作单元；</p><p>通常一个事务对应一个完整的业务（如银行转账业务，该业务就是一个最小的工作单元）同时这个完整的操作需要执行多次的DML（插入、更新、删除）语句共同联合完成，A转账给B，这里就需要两次update操作。</p><p>在MySQL中只有使用了Innodb数据库引擎的数据库才支持表或事物。事务处理可以用来维护数据的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。</p><h3 id="事务的acid">事务的ACID</h3><p>通常事务必须满足四个条件（ACID）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation又称独立性）、持久性（Durability）。</p><table><colgroup><col style="width: 9%" /><col style="width: 90%" /></colgroup><thead><tr class="header"><th>条件</th><th>解释</th></tr></thead><tbody><tr class="odd"><td>原子性</td><td>一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发送错误，会被回滚（Rollback）到事务前开始的状态，就像这个事务从来没有执行过一样。</td></tr><tr class="even"><td>一致性</td><td>在事务开始之前和事务结束以后，数据库的完整性没有被破坏，这表示写入的资料必须完全符合所有的预设规则，这包含资料的准确度、串联性以及后续数据库可以自发性的完成预定的工作。</td></tr><tr class="odd"><td>隔离性</td><td>数据库允许多个并发事务同时对其数据进行读写和修改的能力。隔离性可以防止多个事务并发执行时由于交叉执行而导致的数据行不一致的情况。事务隔离分为不同级别，包括读未提交（Readuncommitted）、读提交（Read committed)、可重复读（Repeatableread）和串行化（Serializable）。</td></tr><tr class="even"><td>持久性</td><td>事务处理结束以后，对数据的修改就是永久的，即便系统故障也不会丢失。</td></tr></tbody></table><h3 id="事务相关方法">事务相关方法</h3><p>Go语言使用以下三个方法实现MySQL中的事务操作。</p><p>开始事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Begin() (*Tx, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Commit() <span class="type">error</span></span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Rollback() <span class="type">error</span></span><br></pre></td></tr></table></figure><h3 id="事务实例">事务实例</h3><p>下面的代码演示了一个简单的事务操作，该事务操作能够保证两次更新操作要么同时成功要么同时失败，不会出现中间状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务操作实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transationDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tx, err := db.Begin() <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> tx != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;begin trans fail, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr1 := <span class="string">&quot;UPDATE mt_subtitle_table set id = AAA501 where actress=?&quot;</span></span><br><span class="line">    ret1, err := tx.Exec(sqlStr1, <span class="string">&quot;若狭留美&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Prinf(<span class="string">&quot;exec sql1 failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    affRow1, err := ret1.RowAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec ret1.RowAffected() failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr2 := <span class="string">&quot;UPDATE mt_subtitle_table set id = AAA4501 where actress = ?&quot;</span></span><br><span class="line">    ret2, err := tx.Exec(sqlStr2, <span class="string">&quot;泷泽萝拉&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;exec sql2 failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    affRow2, err := ret2.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec ret2.RosAffected() failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(affRow1, affRow2)</span><br><span class="line">    <span class="keyword">if</span> affRow1 == <span class="number">1</span> &amp;&amp; affRow2 == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;很好，事务提交了&quot;</span>)</span><br><span class="line">        tx.Commit() <span class="comment">// 提交事务</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        tx.Rollback()</span><br><span class="line">        fmt.Println(<span class="string">&quot;不好意思，有点问题，事务回滚了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;事务执行成功！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://fly97.cn/tags/mysql/"/>
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础（五）httprouter详解</title>
    <link href="https://fly97.cn/p/httprouter-tutorial-01/"/>
    <id>https://fly97.cn/p/httprouter-tutorial-01/</id>
    <published>2023-01-16T02:03:00.000Z</published>
    <updated>2023-01-16T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>httprouter是一个高性能、可扩展的HTTP路由，可以作为golang默认路由<code>net/http</code>的替代。</p><p>关键词：<strong>httprouter </strong></p><span id="more"></span><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u  <span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br></pre></td></tr></table></figure><p>一个例子作为开始</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;HelloWorld&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := httprouter.New()</span><br><span class="line">router.GET(<span class="string">&quot;/hi&quot;</span>, HelloWorld)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，HelloWorld是一个<code>handle httprouter.Handle</code>类型，需要传入三个参数，三个参数的作用以后说。该<code>handle</code>在main函数忠被注册到<code>/hi</code>路径上。运行代码会得到一下效果。</p><p><img data-src="image-20220416101901309.png" /></p><h2 id="http-method">HTTP Method</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> GET(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;GET&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> HEAD(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;HEAD&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> OPTIONS(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;OPTIONS&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> POST(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;POST&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PUT(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PUT&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PATCH(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PATCH&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> DELETE(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;DELETE&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由匹配">路由匹配</h2><h3 id="nethttp的路由匹配">net/http的路由匹配</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///api,可以访问到</span></span><br><span class="line"><span class="comment">///api/,不可以</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">///api,可以</span></span><br><span class="line"><span class="comment">///api/,也可以</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api/&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="httprouter的路由匹配">httprouter的路由匹配</h3><p>两者路由命名捕获方式：（是路由命名不是路由参数）</p><ul><li><p><code>:name</code>的捕获方式是匹配内容直到下一个斜线或者路径的结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path: /blog/:category/:post  </span><br><span class="line">router.GET(<span class="string">&quot;/blog/:category/:post&quot;</span>, Hello) //category/post可以看成是一个变量</span><br><span class="line"></span><br><span class="line">当请求路径为：</span><br><span class="line">/blog/go/request-routers            match: category=<span class="string">&quot;go&quot;</span>, post=<span class="string">&quot;request-routers&quot;</span></span><br><span class="line">/blog/go/request-routers/           no match, but the router would redirect</span><br><span class="line">/blog/go/                           no match</span><br><span class="line">/blog/go/request-routers/comments   no match</span><br></pre></td></tr></table></figure></li><li><p><code>*name</code>的方式是从指定位置开始（包含前缀"/"）匹配到结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path: /files/*filepath</span><br><span class="line">router.GET(<span class="string">&quot;/files/*filepath&quot;</span>, Hello) //filepath可以看成是一个变量</span><br><span class="line"></span><br><span class="line">当请求路径为：</span><br><span class="line">/files/                             match: filepath=<span class="string">&quot;/&quot;</span></span><br><span class="line">/files/LICENSE                      match: filepath=<span class="string">&quot;/LICENSE&quot;</span></span><br><span class="line">/files/templates/article.html       match: filepath=<span class="string">&quot;/templates/article.html&quot;</span></span><br><span class="line">/files                              no match, but the router would redirect</span><br></pre></td></tr></table></figure></li></ul><p>获取路由命名的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    name := ps.ByName(<span class="string">&quot;who&quot;</span>) <span class="comment">//获取who对应的参数</span></span><br><span class="line">    name := ps[<span class="number">0</span>].Value      <span class="comment">//直接通过Value检索</span></span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;HelloWorld&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">router.GET(<span class="string">&quot;/hi/:who&quot;</span>, HelloWorld)</span><br></pre></td></tr></table></figure><h3 id="httprouter重定向">httprouter重定向</h3><p>如果请求的URL路径包含或者不包含尾随斜线时，但在注册的路径上包含了或没有包含"/"的目标上定义了handler，但是会进行301重定向。简单地说，<strong>不管URL是否带尾随斜线，只要注册路径不存在，但在去掉尾随斜线或加上尾随斜线的路径上定义了handler，就会自动重定向。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Router&#123;</span><br><span class="line"><span class="comment">//是否启用自动重定向</span></span><br><span class="line">        RedirectTrailingSlash:  <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置为true时回尝试修复路径, 第一个多余的路径会被删除. 之后, 路由器对已清理的路径进行不区分大小写的查找. 如果可以找到此路由的句柄，则路由器将重定向到正确的路径</span></span><br><span class="line">        RedirectFixedPath:      <span class="literal">true</span>,</span><br><span class="line">        HandleMethodNotAllowed: <span class="literal">true</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果启用，则路由器会自动回复OPTIONS请求</span></span><br><span class="line">        HandleOPTIONS:          <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面有几种会重定向的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注册路径：/blog/:category/:post</span><br><span class="line">请求URL路径：/blog/go/request-routers/</span><br><span class="line"></span><br><span class="line">注册路径：/blog/:category</span><br><span class="line">请求URL路径：/blog/go</span><br><span class="line"></span><br><span class="line">注册路径：/files/*filepath</span><br><span class="line">请求URL路径：/files</span><br></pre></td></tr></table></figure><h3 id="httprouter-lookup">httprouter lookup</h3><p>Lookup根据<code>method+path</code>检索对应的Handle，以及<code>Params</code>，并可以通过第三个返回值判断是否会进行重定向。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> Lookup(method, path <span class="type">string</span>) (Handle, Params, <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><h3 id="httprouter获取请求相关的信息">httprouter获取请求相关的信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">err := r.ParseForm() <span class="comment">// 解析表单必须</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadGateway)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Who: %v\n&quot;</span>, ps.ByName(<span class="string">&quot;who&quot;</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;Method: %v\n&quot;</span>, r.Method)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Host: %v\n&quot;</span>, r.Host)</span><br><span class="line">fmt.Printf(<span class="string">&quot;UserAgent: %v\n&quot;</span>, r.UserAgent())</span><br><span class="line">fmt.Printf(<span class="string">&quot;r.PostForm: %v\n&quot;</span>, r.PostForm)</span><br><span class="line">fmt.Printf(<span class="string">&quot;r.Form: %v\n&quot;</span>, r.Form)</span><br><span class="line">fmt.Println(<span class="string">&quot;========OK=======&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中PostForm获取<code>x-www-form-urlencoded</code>发送的表单，Form获取明文发送如http://127.0.0.1/hi/xxx?user=xxx如user=xxx的信息。</p><h3 id="http返回信息">http返回信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    w.WriteHeader(http.statusOK)</span><br><span class="line">    status, err := w.Write([]<span class="type">byte</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    w.Header() </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行返回http请求状态码</p><p>第二行返回Body，通常是返回一个json</p><p>第三行是返回Header，格式是map</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;httprouter
是一个高性能、可扩展的HTTP路由，可以作为golang默认路由&lt;code&gt;net/http&lt;/code&gt;的替代。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;httprouter &lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>http请求参数之Query String Parameters、Form Data、Request Payload区别</title>
    <link href="https://fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/"/>
    <id>https://fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/</id>
    <published>2023-01-05T02:20:00.000Z</published>
    <updated>2023-01-05T02:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。</strong></p><p>关键词：<strong>http</strong></p><span id="more"></span><h2 id="query-string-parameters">Query String Parameters</h2><p>Query String Parameters 当发起一次HTTP请求时，参数会以urlstring的形式进行传递。</p><p>即<code>?</code>后面的字符串则为请求的参数，并以<code>&amp;</code>为分隔符。</p><h4 id="header">header</h4><p><img data-src="1620.png" /></p><h4 id="传入参数">传入参数</h4><p><img data-src="1620-1672985410153-3.png" /></p><h2 id="request-payload">Request Payload</h2><p>当发起一次POST请求后，若<code>content-type</code>为<code>application/json</code>，则参数会以RequestPayload的形式进行传递，数据形式为JSON。</p><p>上述请求不会显式的出现在URL中。</p><h4 id="header-1">header</h4><p><img data-src="1620-1672985432471-6.png" /></p><h4 id="传入参数-1">传入参数</h4><figure><img data-src="1620-1672985616176-9.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="form-data">Form Data</h2><p>当发起一次HTTP请求时，若未指定content-type，则默认<code>content-type</code>为<code>application/x-www-form-urlencoded</code>。</p><p>参数会以<code>From Data</code>的形式进行传递，不会显式出现在请求url中。</p><h4 id="传入参数-2">传入参数</h4><p><img data-src="1620-1672985628992-12.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;http&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="http" scheme="https://fly97.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之节点</title>
    <link href="https://fly97.cn/p/agent-in-ros2/"/>
    <id>https://fly97.cn/p/agent-in-ros2/</id>
    <published>2022-12-20T10:36:00.000Z</published>
    <updated>2022-12-20T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的节点。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="节点">节点</h2><p>机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞。众多细胞通过一些机制联系到一起，就成为了一个机器人整体。</p><p>在ROS中，这些细胞被称为节点。</p><h3 id="通信模型">通信模型</h3><p>完成的机器人系统可能并不是一个物理上的整体，比如这样的一个机器人：</p><p><img data-src="image-20220526231417594.png" /></p><p>在机器人身体里搭载了一台计算机A，通过机器人的眼睛——摄像头，获取外界的信息，也可以通过控制机器人的腿——轮子，让机器人一栋栋到想要去的地方。除此之外，还有另外一台计算机B，放在你的桌子上，可以远程监控机器人看到的消息，也可以远程配置机器人的速度和某些参数，还可以连接成为一个摇杆，人为控制机器人左右运动。</p><p>这些功能虽然位于不同的计算机中，但是都是机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。</p><ul><li>节点在机器人系统中的职责就是<strong>执行某些具体的任务</strong>，从操作系统来看，也叫做进程；</li><li>每个节点都是一个<strong>独立运行的可执行文件，</strong>比如执行某一个python程序，或者执行C++编译生成的结果，都是算运行了一个节点；</li><li>既然每一个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的编程语言可以是不同的，比如C++、Python等；</li><li>这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之功能包</title>
    <link href="https://fly97.cn/p/package-in-ros2/"/>
    <id>https://fly97.cn/p/package-in-ros2/</id>
    <published>2022-12-19T10:36:00.000Z</published>
    <updated>2022-12-19T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的功能包。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><p>功能包的机制，是提高ROS中软件复用率的重要方法。</p><h2 id="创建功能包">创建功能包</h2><p>如何在ROS2中创建一个功能包，可以使用以下这个指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create --build-type &lt;build-type&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><ul><li>pkg：表示功能包相关的功能；</li><li>create：表示创建功能包；</li><li>build-type：表示新创建的功能包是C++还是Python的，如果是C++或者C，那这里就用ament_cmake，如果使用Python，就用ament_python；</li><li>package_name：新建功能包的名字。</li></ul><p>比如在终端中分别创建C++和Python版本的功能包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">ros2 pkg create --build-type ament_cmake learning_pkg_c            <span class="comment"># C++</span></span><br><span class="line">ros2 pkg create --build-type ament_python learning_pkg_python      <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><h2 id="编译功能包">编译功能包</h2><p>在创建好的功能包中，可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">colcon build      <span class="comment"># 编译工作空间所有功能包</span></span><br><span class="line"><span class="built_in">source</span> install/local_setup.bash</span><br></pre></td></tr></table></figure><h2 id="功能包的结构">功能包的结构</h2><p>分析以下刚刚创建的两个功能包的结构。</p><h3 id="c功能包">C++功能包</h3><p>首先看下C++的功能包，其中必然存在两个文件：<strong>package.xml和CMakerLists.txt</strong></p><p><img data-src="image-20220524112122164.png" /></p><p>package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。</p><p><img data-src="image-20220524112141298.png" /></p><p>CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，必须要在该文件中设置如何编译，使用CMake语法。</p><p><img data-src="image-20220524112132626.png" /></p><p>Python功能包</p><p>C++功能包需要将源码解释成可执行文件，但是Python语言是解析型的，不需要编译。</p><p>也是有两个文件：package.xml和setup.py。</p><p><img data-src="image-20220524112228806.png" /></p><p>package.xml文件的主要内容和C++版本的功能包一样，包含功能包的版权描述，和各自依赖的声明。</p><p><img data-src="image-20220524112246102.png" /></p><p>setup.py文件里面也包含一些版权信息，初次之外，还有"entry_points"配置的程序入口。</p><p><img data-src="image-20220524112235574.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的功能包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十）ROS2之工作空间</title>
    <link href="https://fly97.cn/p/workspace-in-ros2/"/>
    <id>https://fly97.cn/p/workspace-in-ros2/</id>
    <published>2022-12-17T10:36:00.000Z</published>
    <updated>2022-12-17T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍ROS2上的工作空间。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="工作空间开发过程中的大本营">工作空间：开发过程中的大本营</h2><h3 id="什么是工作空间">什么是工作空间</h3><p>在ROS机器人开发中，我们针对机器人的某些功能需要进行代码便携式，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。</p><p>工作空间是一个存放项目于开发相关文件的文件夹，是开发过程中存放所有资料的大本营。</p><p>ROS系统中一个典型的工作空间如下，一般会有四个子目录：</p><figure><img data-src="https://book.guyuehome.com/ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/image/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/image-20220524111415729.png"alt="image-20220524111415729" /><figcaption aria-hidden="true">image-20220524111415729</figcaption></figure><ul><li><p><strong>src，代码空间</strong>：编写的代码、脚本都需要放在这里；</p></li><li><p><strong>build，编译空间</strong>：保存编译过程中产生的中间文件；</p></li><li><p><strong>install，安装空间</strong>：放置编译过程得到的可执行文件和脚本；</p></li><li><p><strong>log，日志空间</strong>：编译和运行过程中，保存各种警告、错误、信息等日志。</p></li></ul><p>总体来说，这四个空间的文件夹，我们绝大部分的操作都是在src进行的，编译成功后，会执行install里面的结果，build和log两个文件很少用。</p><p>工作空间里的名称我们也可以自己定义，数量也不是唯一的.</p><h3 id="创建工作空间">创建工作空间</h3><p>执行以下命令创建工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/dev_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/guyuehome/ros2_21_tutorials.git</span><br></pre></td></tr></table></figure><h3 id="自动安装依赖">自动安装依赖</h3><p>一般使用<code>rosdep</code>工具进行自动安装，而<code>rosdep</code>默认会使用国外的源进行安装，而一般国内的网络无法正常连接，因此有开发者开发了<code>rosdepc</code>模块，<code>c</code>的含义就是china，这个软件使用了清华源进行了替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install rosdepc</span><br><span class="line">sudo rosdepc init </span><br><span class="line">rosdepc update</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rosdepc install -i --from-path src --rosdistro foxy -y</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-30-20-image.png" /></p><h3 id="编译工作空间">编译工作空间</h3><p>依赖安装完毕，可以使用以下命令编译工作空间，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程中不会出现任何错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-colcon-ros</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-37-46-image.png" /></p><p>编译成功后，就可以在工作空间后就可以看到构建后的文件夹了</p><p><img data-src="2022-12-17-16-40-47-image.png" /></p><h3 id="设置环境变量">设置环境变量</h3><p>编译成功后，为了让系统找到我们的功能包和可执行文件，还需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> install/local_setup.sh <span class="comment"># 仅在当前终端生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/dev_ws/install/local_setup.sh&quot;</span> &gt;&gt; ~/.bashrc <span class="comment"># 全局生效</span></span><br></pre></td></tr></table></figure><p>至此，我们就完成了工作空间的创建、编译、和配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍ROS2上的工作空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（九）安装ROS2</title>
    <link href="https://fly97.cn/p/install-ros2-with-linux/"/>
    <id>https://fly97.cn/p/install-ros2-with-linux/</id>
    <published>2022-12-16T10:36:00.000Z</published>
    <updated>2022-12-16T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍如何在Linux平台上安装ROS2。</p><p><strong>关键词：ROS2</strong> <span id="more"></span></p><h2 id="ros2安装">ROS2安装</h2><p>ROS2的安装受ubuntu发行版的限制，比如ubuntu 20.04LTS只能安装foxy这个发行版；</p><p>ubuntu 22.04 LTS只能按照ROS2长期支持版humble这个发行版。</p><p>本文以ubuntu 20.04 LTS安装foxy发行版为例。</p><h3 id="设置编码">设置编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install locales</span><br><span class="line">sudo locale-gen en_US en_US.UTF-8</span><br><span class="line">sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 </span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="安装必要软件">安装必要软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg lsb-release software-properties-common</span><br><span class="line">sudo add-apt-repository universe</span><br></pre></td></tr></table></figure><h3 id="设置源">设置源</h3><p>此处注意，需要确认你的网络可以连接<code>raw.githubusercontent.com</code>，这里先下载完key然后上传到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key</span><br><span class="line">sudo <span class="built_in">mv</span> ros.key /usr/share/keyrings/ros-archive-keyring.gpg </span><br></pre></td></tr></table></figure><p>这里使用清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/ros2/ubuntu jammy main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/ros2.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装ros2">安装ROS2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install ros-foxy-desktop python3-argcomplete -y</span><br></pre></td></tr></table></figure><p>注意，如果是嵌入式设备，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-foxy-ros-base python3-argcomplete -y </span><br></pre></td></tr></table></figure><p>如果需要安装编译的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-dev-tools -y</span><br></pre></td></tr></table></figure><h3 id="设置环境变量">设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/foxy/setup.bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; source /opt/ros/foxy/setup.bash&quot;</span> &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure><h2 id="ros2测试">ROS2测试</h2><h3 id="命令行">命令行</h3><p>启动一个终端，允许一个数据的发布者节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-16-20-48-59-image.png" /></p><p>启动第二个终端，通过以下命令启动一个数据的订阅者节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_py listener</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-16-20-49-55-image.png" /></p><h3 id="gui">GUI</h3><p>运行一个ROS的经典实例——小海龟仿真器</p><p>启动两个终端，分别执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtlesim_node</span><br><span class="line">ros2 run turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p>第一句指令将启动一个蓝色背景的海龟仿真器，第二局指令将启动一个键盘控制节点，在该终端中点击键盘上的上下左右按键，就可以控制小海龟移动了。</p><h2 id="常见的命令行操作">常见的命令行操作</h2><p>ROS2的命令行的操作机制与Linux相同，不过所有的操作都集中在ros2的总命令中，后面第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，后面还可以继续跟参数表示具体操作。</p><p><img data-src="2022-12-17-12-27-08-image.png" /></p><p>接下来以小乌龟仿真为例，感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大体了解。</p><h3 id="运行节点程序">运行节点程序</h3><p>想要运行ROS2中的某个节点，可以使用ros2 run命令进行操作。</p><p>例如我们要运行海龟仿真节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtlesim_node</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-36-55-image.png" /></p><p>我们要运行键盘控制节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-41-35-image.png" /></p><h3 id="查看节点信息">查看节点信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node list</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-46-11-image.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node info /turtlesim</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-47-32-image.png" /></p><h3 id="查看话题信息">查看话题信息</h3><p>使用以下命令即可查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-48-52-image.png" /></p><p>查看指定话题的消息数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic <span class="built_in">echo</span> /turtle1/pose</span><br></pre></td></tr></table></figure><h3 id="发布话题消息">发布话题消息</h3><p>想让海龟直接动起来，可以直接通过命令行发布话题指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub --rate 1 /turtule1/cmd_vel geometry_msgs/msg/Twist <span class="string">&quot;&#123;linear: &#123;x: 2.0, y: 0.0, z: 0.0&#125;, angular: &#123;x: 0.0, y: 0.0, z: 1.8&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-13-59-05-image.png" /></p><h3 id="发送服务请求">发送服务请求</h3><p>一只小海龟太孤单，仿真器还提供了另外一个服务，产生海龟，我们试一试服务调用，再来一只小海龟，图片也如上图所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call /spawn turtlesim/srv/Spwan <span class="string">&quot;&#123;x: 2, y: 2, theta: 0.2, name:&#x27;&#x27;&#125;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h3 id="发送动作目标">发送动作目标</h3><p>想让海龟完成一个具体动作，比如转到指定角度，仿真器提供的action可以实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span class="string">&quot;theta: 3&quot;</span></span><br></pre></td></tr></table></figure><p>再继续发布上述话题的基础上，会发现小乌龟在转变了角度以后继续转圈：</p><p><img data-src="2022-12-17-14-01-39-image.png" /></p><h3 id="录制控制命令">录制控制命令</h3><p>系统中运行的数据有很多，如果想要把某段数据录制下来，然后再复现这段数据。</p><p>ros2中的rosbag命令可以实现上面的需求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 bag record /turtle1/cmd_vel</span><br><span class="line">ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-14-04-20-image.png" /></p><p>以上就是ROS2中的常见命令。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍如何在Linux平台上安装ROS2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（八）ROS2初探</title>
    <link href="https://fly97.cn/p/hello-to-ros2/"/>
    <id>https://fly97.cn/p/hello-to-ros2/</id>
    <published>2022-12-15T09:36:00.000Z</published>
    <updated>2022-12-15T09:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍ROS2.</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="为什么是ros2">为什么是ROS2</h2><p>ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点：</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114359304.png"alt="image-20220523114359304" /><figcaption aria-hidden="true">image-20220523114359304</figcaption></figure><ul><li><p><strong>系统出现了颠覆性的变化</strong>，ROS1的所有节点都需要在节点管理器ROSMaster下进行工作，一旦Master出现问题，系统就会宕机。ROS2实现了真正的分布式，不再有Master这个角色，借助全新的通信框架DDS，为所有节点提供了可靠通信保障。</p></li><li><p><strong>软件API进行了重新设计</strong>，ROS1原有的接口无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用的API，虽然导致原有ROS1的代码无法直接在ROS2上运行，但是尽量保留了类似的使用方法，同时提供了大量的移植说明。</p></li><li><p><strong>编译系统进行了升级</strong>，ROS1仲使用的rosbuild和catkin问题诸多，尤其是针对代码比较多的项目以及Python编写的项目。编译、连接经常会出错，ROS2对这些进行了优化，重新优化后的编译系统叫做<strong>ament和colcon</strong>。</p><p>以上几点是框架层面的优化，而ROS1和ROS2的明显变化，请看下文：</p><h2 id="ros2-vs-ros1">ROS2 vs ROS1</h2><h3 id="系统架构">系统架构</h3><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image26-16532775781034.png"alt="image26" /><figcaption aria-hidden="true">image26</figcaption></figure><p>如图所示，可以看出最大的变化就是<strong>Master。</strong></p></li><li><p>ROS1中，应用层里面的<strong>Master</strong>节点管理器至关重要，所有节点都得听他指挥。ROS2把这个不稳定的角色请走了，节点可以通过自发现机制找到彼此，从而建立稳定的通信连接；</p></li><li><p>中间层是ROS封装好的标准通信接口，写程序会频繁和这些接口打交道，比如发布一个图像的数据，接受一个雷达的信息，客户端库再调用底层复杂的驱动和通信协议，使得我们的开发变得更加明了。</p></li><li><p>ROS1中，ROS通信依赖底层的TCP和UDP通信，ROS2中，通信协议换成了更见复杂但更见完善的DDS系统；</p></li><li><p>如果是进程内需要大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样；</p></li><li><p>最下面是系统层，也就是ROS可以安装在那些操作系统上，ROS1主要安装在Linux上，ROS2的可选项很多，Linux、Windows、MacOS、RTOS都可以；</p></li></ul><h3 id="dds通信">DDS通信</h3><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image27.png"alt="image27" /><figcaption aria-hidden="true">image27</figcaption></figure><p>ROS1中基于TCP/UDP的通信系统，频繁诟病与延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了；</p><p>DDS是物联网中广泛得到应用的一种通信协议。DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，可以选择多个厂家提供的DDS系统，比如<strong>OpenSplice、FastRTPS</strong>，还有更多厂家提供的，<strong>每一家的性能不同，适用的场景也不一样</strong>；</p><p>ROS2设计了个ROSMiddleware，RMW，也就是指定一个标准的接口，<strong>比如如何发数据、如何收数据，数据的各自属性如何配置，等</strong>。如果厂家想要接入DDS社区，需要按照这个标准写一个适配的接口，将自家的DDS移植过来，这样问题交给了熟悉自家的DDS厂家。</p><p><strong>当我们在产品开发时，可以先用开源版本的DDS满足业务需求，部署交付的产品时，再更改为商业版本更加稳定的DDS，减少开发成本。</strong></p><p>总之，DDS的加入，让ROS2更加稳定，也更加灵活，与之相同的时复杂度也会变高。这样我们不用在纠结ROS的通信系统是否稳定、应该如何优化等问题，更多精力可以放在其他三个部分，专注优化机器人应用功能。</p><h3 id="核心概念">核心概念</h3><p>ROS1应用以及非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式和其中很多的概念。ROS2尽量保留了这些概念，以便开发者从ROS1迁移到ROS2。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114814371.png"alt="image-20220523114814371" /><figcaption aria-hidden="true">image-20220523114814371</figcaption></figure><h3 id="编码方式">编码方式</h3><p>如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114851763.png"alt="image-20220523114851763" /><figcaption aria-hidden="true">image-20220523114851763</figcaption></figure><p>总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。</p><h3 id="命令行"><strong>命令行</strong></h3><p>最后我们再对比下ROS开发中最为常用的一种工具——命令行。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114915528.png"alt="image-20220523114915528" /><figcaption aria-hidden="true">image-20220523114915528</figcaption></figure><p>ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。</p><p>ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2run，表示启动某一个节点，ros2 topic表示话题相关的功能。</p><h2 id="总结">总结</h2><p>ROS2和ROS1相比，总结如下：</p><ul><li><strong>节点干掉了Master</strong></li><li><strong>通信换成了DDS</strong></li><li><strong>核心概念没变化</strong></li><li><strong>编程难度有上升</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍ROS2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础（四）客户端模拟发送HTTP请求</title>
    <link href="https://fly97.cn/p/how-to-send-http-request-in-go/"/>
    <id>https://fly97.cn/p/how-to-send-http-request-in-go/</id>
    <published>2022-12-10T10:33:00.000Z</published>
    <updated>2022-12-10T10:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Golang中web开发中net/http是经常用到的包，在这个包中包含了各种请求与响应的方式，下面我会一一进行介绍。</p><p>关键词：<strong>golang</strong></p><span id="more"></span><h2 id="get请求">GET请求</h2><h3 id="不带参数的get请求">不带参数的GET请求</h3><p>直接使用http.Get()函数，返回一个<code>*http.Response</code>类型的变量，使用<code>os.ReadAll(resp.Body)</code>会读取相应后内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendSimpleGetRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">response, err := http.Get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">s, err := io.ReadAll(response.Body)</span><br><span class="line">fmt.Println(<span class="type">string</span>(s))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="携带参数的get请求">携带参数的GET请求</h3><p>使用<code>url.Values&#123;&#125;</code>返回一个<code>map[string][]string</code>类型，不推荐直接在url地址中携带。</p><p>可以使用<code>params.Encode()</code>对中文进行编码，防止数据在传输过程中出错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendComplexGetRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">params := url.Values&#123;&#125;</span><br><span class="line">urlObj, err := url.Parse(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">params.Set(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;afds&quot;</span>)</span><br><span class="line">params.Set(<span class="string">&quot;id&quot;</span>, <span class="type">string</span>(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有中文参数，这个操作会对中文参数进行解析</span></span><br><span class="line">urlObj.RawQuery = params.Encode()</span><br><span class="line">urlPath := urlObj.String()</span><br><span class="line">resp, err := http.Get(urlPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">response, err := io.ReadAll(resp.Body)</span><br><span class="line">fmt.Printf(<span class="string">&quot;response: %s\n&quot;</span>, response)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="post-请求">Post 请求</h2><h3id="post请求applicationx-www-form-urlencoded">Post请求：application/x-www-form-urlencoded</h3>这应该是最常见的 POST 提交数据的方式了。浏览器的原生<form><p>表单，如果不设置 <code>enctype</code> 属性，那么最终就会以<code>application/x-www-form-urlencoded</code> 方式提交数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpPostForm</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// params := url.Values&#123;&#125;</span></span><br><span class="line"><span class="comment">// params.Set(&quot;id&quot;, &quot;123&quot;)</span></span><br><span class="line">params := url.Values&#123;</span><br><span class="line"><span class="string">&quot;key&quot;</span>: &#123;<span class="string">&quot;value&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;id&quot;</span>:  &#123;<span class="string">&quot;123&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">resp, _ := http.PostForm(<span class="string">&quot;http://baidu.com&quot;</span>, params)</span><br><span class="line">fmt.Println(<span class="string">&quot;request header[Content-Type]:&quot;</span>, resp.Request.Header[<span class="string">&quot;Content-Type&quot;</span>])</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">s, _ := io.ReadAll(resp.Body)</span><br><span class="line">fmt.Println(<span class="type">string</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post请求multipartform-data">Post请求：multipart/form-data</h3><p>multipart/form-data的基础方法是post，其请求头必须包含一个特殊的头信息：<code>Content-Type</code>，值为<code>multipart/form-data</code>，同时还需要规定一个内容分割符用于分割请求体中的多个post的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpPostMultipartField</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">url := <span class="string">&quot;/qb/api/v2/auth/login&quot;</span></span><br><span class="line">method := <span class="string">&quot;POST&quot;</span></span><br><span class="line"></span><br><span class="line">body := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">writer := multipart.NewWriter(body)</span><br><span class="line">err := writer.WriteField(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;fly97&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = writer.WriteField(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = writer.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(method, url, body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, writer.FormDataContentType())</span><br><span class="line">resp, err := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;request header[Content-Type]:&quot;</span>, resp.Request.Header[<span class="string">&quot;Content-Type&quot;</span>])</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">response, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;response: %s&quot;</span>, response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="客户端通用模式">客户端通用模式</h2><p>一般遵循以下的顺序：</p><ol type="1"><li>使用<code>http.Client&#123;&#125;</code>实例化一个客户端；</li><li>使用<code>http.NewRequest()</code>新创建一个请求；</li><li>设置请求头<code>req.Header.Set()</code>；</li><li>使用<code>client.Do(req)</code>发送请求；</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpDo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">    urlmap := url.Values&#123;&#125;</span><br><span class="line"></span><br><span class="line">    urlmap.Add(<span class="string">&quot;client_id&quot;</span>, <span class="string">&quot;esss&quot;</span>)</span><br><span class="line">    urlmap.Add(<span class="string">&quot;client_secret&quot;</span>, <span class="string">&quot;sk&quot;</span>)</span><br><span class="line">    parms := ioutil.NopCloser(strings.NewReader(urlmap.Encode())) <span class="comment">//把form数据编下码</span></span><br><span class="line">    req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>, parms)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">    req.Header.Set(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;name=anny&quot;</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := client.Do(req)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Golang中web开发中net/http是经常用到的包，在这个包中包含了各种请求与响应的方式，下面我会一一进行介绍。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>一些常见的运维操作</title>
    <link href="https://fly97.cn/p/common-operation-and-maintenance-operations/"/>
    <id>https://fly97.cn/p/common-operation-and-maintenance-operations/</id>
    <published>2022-12-10T05:28:00.000Z</published>
    <updated>2022-12-10T05:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：<strong>运维操作</strong></p><span id="more"></span><h3 id="sudo无需输入密码">sudo无需输入密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;%sudo ALL=(ALL) NOPASSWD:ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="一键安装docker">一键安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># sudo sh get-docker.sh --mirror </span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="docker需要使用sudo">docker需要使用sudo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure><h3 id="查看文件夹占用">查看文件夹占用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo du -s /* | sort -nr</span><br><span class="line">sudo du -h  --max-depth=1</span><br></pre></td></tr></table></figure><h3 id="清理docker冗余容器">清理docker冗余容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h3 id="清理k3s冗余容器">清理k3s冗余容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo k3s crictl rmi --prune</span><br></pre></td></tr></table></figure><h3 id="systemctl定时执行任务">Systemctl定时执行任务</h3><p>参考</p><ol type="1"><li><p><ahref="https://www.cnblogs.com/operationhome/p/10720067.html">Linux定时任务 crontab 和 Systemd Timer - 自由早晚乱余生 - 博客园</a></p></li><li><p>https://www.junmajinlong.com/linux/systemd/systemd_timer/</p></li></ol><p>执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=GLaDOS Checkin Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/docker compose -f /home/wf09/glados/docker-compose.yml up</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>timer触发器：以每天3点执行一次为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=GLaDOS Checkin Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 03:00:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="bash-date日期时间">bash date日期时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">2021-08-17 22:49:57</span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d&#x27;</span></span><br><span class="line">2021-08-17</span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y%m%d&#x27;</span></span><br><span class="line">20210817</span><br><span class="line"><span class="built_in">date</span> +%Y%m%d</span><br><span class="line">20210817</span><br><span class="line"><span class="built_in">date</span> +%s</span><br><span class="line">1629211600</span><br></pre></td></tr></table></figure><h3 id="linux软连接">Linux软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s 源文件 目的文件</span><br></pre></td></tr></table></figure><h3 id="debian类修改源">debian类修改源</h3><h4 id="amd64">amd64</h4><h5 id="ubuntu">ubuntu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/cn.archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h5 id="debian">debian</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h4 id="arm64">arm64</h4><h5 id="ubuntu-1">ubuntu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/ports.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/ports.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h4 id="树莓派">树莓派</h4><p>arm64架构的树莓派可以直接用debian的源 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> &gt; /etc/apt/sources.list</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main non-free contrib</span></span><br></pre></td></tr></table></figure>树莓派基金会源 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s|//archive.raspberrypi.org|//mirrors.ustc.edu.cn/archive.raspberrypi.org|g&#x27;</span> /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure> #### Docker</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex \ </span></span><br><span class="line">    &amp;&amp; sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install tzdata curl procps -y \</span><br><span class="line">    &amp;&amp; groupadd -g <span class="number">1000</span> admin -o -f \</span><br><span class="line">    &amp;&amp; useradd -m -G admin --uid <span class="number">1000</span> --gid <span class="number">1000</span> admin \</span><br><span class="line">    &amp;&amp; apt-get clean</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/admin</span></span><br><span class="line"><span class="keyword">USER</span> admin</span><br></pre></td></tr></table></figure><h3 id="安装最新版nginx">安装最新版nginx</h3><h4 id="ubuntu-2">ubuntu</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring -y</span><br><span class="line">curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null</span><br><span class="line">gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># stable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \</span></span><br><span class="line"><span class="string">http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nginx.list</span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/preferences.d/99nginx</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h4 id="debian-1">debian</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring -y</span><br><span class="line">curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null</span><br><span class="line">gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg</span><br><span class="line"><span class="comment"># stable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \</span></span><br><span class="line"><span class="string">http://nginx.org/packages/debian `lsb_release -cs` nginx&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nginx.list</span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/preferences.d/99nginx</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h3 id="nginx基本配置">nginx基本配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="comment">#listen unix:/dev/shm/default.sock proxy_protocol;</span></span><br><span class="line">  <span class="comment">#listen unix:/dev/shm/h2c.sock http2 proxy_protocol;</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> default_server ssl;</span><br><span class="line">  <span class="attribute">server_name</span> harbor.lo;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_certificate</span>     /home/ubuntu/.ssl/cert.cer;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>  /home/ubuntu/.ssl/cert.key;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#ssl_stapling on;</span></span><br><span class="line">  <span class="comment">#ssl_stapling_verify on;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment">#proxy_redirect off;</span></span><br><span class="line">    <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">    <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="gitlab配置">gitlab配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">   charset utf-8;</span><br><span class="line">   <span class="comment">#listen unix:/dev/shm/default.sock proxy_protocol;</span></span><br><span class="line">   <span class="comment">#listen unix:/dev/shm/h2c.sock http2 proxy_protocol;</span></span><br><span class="line">   listen 443  ssl;</span><br><span class="line">   server_name gitlab.lo;</span><br><span class="line">   ssl_session_cache shared:SSL:10m;</span><br><span class="line">   ssl_certificate     /usr/local/ssl/gitlab.lo.crt;</span><br><span class="line">   ssl_certificate_key  /usr/local/ssl/gitlab.lo.key;</span><br><span class="line"></span><br><span class="line">   <span class="comment">#ssl_stapling on;</span></span><br><span class="line">   <span class="comment">#ssl_stapling_verify on;</span></span><br><span class="line"></span><br><span class="line">   ssl_session_timeout 10m;</span><br><span class="line">   ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     <span class="comment">#proxy_redirect off;</span></span><br><span class="line">     <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">     <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">     <span class="comment">#return 403;</span></span><br><span class="line">     client_max_body_size 0;</span><br><span class="line">     proxy_pass http://192.168.15.200:8880;</span><br><span class="line">     proxy_set_header Host <span class="variable">$host</span>; <span class="comment"># required for docker client&#x27;s sake</span></span><br><span class="line">     proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># pass on real client&#x27;s IP</span></span><br><span class="line">     proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他配置">其他配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">proxy_headers_hash_max_size</span> <span class="number">51200</span>;</span><br><span class="line">  <span class="attribute">proxy_headers_hash_bucket_size</span> <span class="number">6400</span>;</span><br><span class="line">  <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;<span class="variable">$proxy_protocol_addr</span>:<span class="variable">$proxy_protocol_port</span>&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> ap-sg-do.fly97.dev;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /usr/local/bin/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /usr/local/bin/key.pem;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="comment">#proxy_redirect off;</span></span><br><span class="line">      <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">      <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">      <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /my/ &#123;</span><br><span class="line">      <span class="comment">#auth_basic &quot;Permission Denied&quot;;</span></span><br><span class="line">      <span class="comment">#auth_basic_user_file /usr/local/passwd;</span></span><br><span class="line">      <span class="attribute">alias</span> /mnt/volume_sgp1_01/;</span><br><span class="line">      <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">proxy_force_ranges</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">max_ranges</span> <span class="number">32</span>;</span><br><span class="line">      <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /qb/ &#123;</span><br><span class="line">      <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">      <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Range <span class="variable">$http_range</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> If-Range <span class="variable">$http_if_range</span>;</span><br><span class="line">      <span class="attribute">proxy_no_cache</span> <span class="variable">$http_range</span> <span class="variable">$http_if_range</span>;</span><br><span class="line">      <span class="comment"># 如果server_name不是公网域名，这个地方可以设置成ip</span></span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">      <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="comment">#这个是设置为0表示不管上传多大的文件都不会报request too large的问题，直接转发过去</span></span><br><span class="line">      <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service模版">service模版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Unit</span>]</span><br><span class="line"><span class="string">Description=Lightweight</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="string">Documentation=https://k3s.io</span></span><br><span class="line"><span class="string">Wants=network-online.target</span></span><br><span class="line"><span class="string">After=network-online.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Install</span>]</span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Service</span>]</span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/default/%N</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/sysconfig/%N</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/systemd/system/k3s.service.env</span></span><br><span class="line"><span class="string">KillMode=process</span></span><br><span class="line"><span class="string">Delegate=yes</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line"><span class="string">LimitNOFILE=1048576</span></span><br><span class="line"><span class="string">LimitNPROC=infinity</span></span><br><span class="line"><span class="string">LimitCORE=infinity</span></span><br><span class="line"><span class="string">TasksMax=infinity</span></span><br><span class="line"><span class="string">TimeoutStartSec=0</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=5s</span></span><br><span class="line"><span class="string">ExecStartPre=/bin/sh</span> <span class="string">-xc</span> <span class="string">&#x27;! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service&#x27;</span></span><br><span class="line"><span class="string">ExecStartPre=-/sbin/modprobe</span> <span class="string">br_netfilter</span></span><br><span class="line"><span class="string">ExecStartPre=-/sbin/modprobe</span> <span class="string">overlay</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/k3s</span> <span class="string">server</span> <span class="string">--node-ip</span> <span class="number">192.168</span><span class="number">.7</span><span class="number">.2</span> <span class="string">--node-external-ip</span> <span class="number">192.168</span><span class="number">.15</span><span class="number">.201</span> <span class="string">--tls-san</span> <span class="number">192.168</span><span class="number">.7</span><span class="number">.2</span> <span class="string">--flannel-backend</span> <span class="string">host-gw</span> <span class="string">--flannel-iface</span> <span class="string">wg0</span> <span class="string">--no-deploy</span> <span class="string">servicelb</span> <span class="string">--write-kubeconfig-mode</span> <span class="number">644</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;proxy-mode=ipvs&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;ipvs-scheduler=rr&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;masquerade-all=true&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;metrics-bind-address=0.0.0.0:10249&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose常用配置">docker-compose常用配置</h3><h4 id="node-exporter">node exporter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">node_exporter:</span></span><br><span class="line">                <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/run:/run</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/proc:/host/proc:ro</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/sys:/host/sys:ro</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--web.listen-address=:9100&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.procfs=/host/proc&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.sysfs=/host/sys&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.rootfs=/rootfs&quot;</span> <span class="comment"># Necessary for collecting host filesystem metrics.</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--collector.filesystem.ignored-mount-points=&#x27;^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)&#x27;&quot;</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h4 id="普罗米修斯">普罗米修斯</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">prometheus:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9091</span><span class="string">:9090</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./conf:/etc/prometheus</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./data:/prometheus</span></span><br></pre></td></tr></table></figure><h4 id="grafana">grafana</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">grafana:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">grafana/grafana:9.3.1-ubuntu</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./sample.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./data:/var/lib/grafana</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br></pre></td></tr></table></figure><h4 id="alertmanager">alertManager</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">alert:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9093</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./conf:/etc/alertmanager</span></span><br></pre></td></tr></table></figure><h4 id="jenkins">jenkins</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jenkins/jenkins&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># hostname: &#x27;gitlab.lo&#x27;                          # ssh hostname</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8882:8080&#x27;</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">1000000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">1000000</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">8G</span></span><br></pre></td></tr></table></figure><h4 id="gitlab">gitlab</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;registry.gitlab.cn/omnibus/gitlab-jh:latest&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-cn</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;gitlab.lo&#x27;</span>                          <span class="comment"># ssh hostname</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         external_url &#x27;https://gitlab.lo&#x27;          # git httpsname</span></span><br><span class="line"><span class="string">         nginx[&#x27;redirect_http_to_https&#x27;] = false</span></span><br><span class="line"><span class="string">         nginx[&#x27;listen_port&#x27;] = 8880</span></span><br><span class="line"><span class="string">         nginx[&#x27;listen_https&#x27;] = false</span></span><br><span class="line"><span class="string">         prometheus_monitoring[&#x27;enable&#x27;] = false</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8881:8880&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;22:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">8G</span></span><br></pre></td></tr></table></figure><h3 id="mysql备份脚本">MySQL备份脚本</h3><p>将MySQL文件逻辑备份文件以Docker镜像的形式推送到Docker私有镜像服务器</p><h4 id="bash脚本">bash脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">day=`<span class="built_in">date</span> <span class="string">&quot;+%Y%m%d&quot;</span>`</span><br><span class="line"><span class="built_in">cd</span> $(<span class="built_in">dirname</span> $(<span class="built_in">readlink</span> -f <span class="string">&quot;<span class="variable">$0</span>&quot;</span>))/data</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$day</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$day</span></span><br><span class="line">mysqldump -h192.168.31.28 -uroot -proot -A | gzip &gt; <span class="variable">$day</span>.tar.gz</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL备份失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;FROM busybox\nADD <span class="variable">$day</span>.tar.gz /mysql/<span class="variable">$day</span>.tar.gz&quot;</span> &gt; Dockerfile</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Dockerfile生成失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ -f Dockerfile ] &amp;&amp; docker build . -t hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;镜像生成构建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker login -uadmin -pdeepsoft hub.deepsoft-tech.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker push hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;带TAG的镜像推送失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker tag hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span> hub.deepsoft-tech.com/wf09/mysqlbackup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;镜像推送失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="service单元文件">service单元文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Backup MySQL Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/bash -c /home/deepsoft/backup/mysql/backup.sh </span><br><span class="line">StandardError=journal</span><br></pre></td></tr></table></figure><h4 id="timer单元文件">timer单元文件</h4><p>每周备份两次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Backup MySQL Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun,Wed 03:30:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;关键词：&lt;strong&gt;运维操作&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://fly97.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
</feed>
