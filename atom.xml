<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人随想</title>
  
  <subtitle>fly97&#39;s Blogs</subtitle>
  <link href="https://blog.fly97.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.fly97.cn/"/>
  <updated>2023-10-28T06:38:00.000Z</updated>
  <id>https://blog.fly97.cn/</id>
  
  <author>
    <name>fly97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes集群实践（十四）tini进程管理器</title>
    <link href="https://blog.fly97.cn/p/have-a-look-at-tini/"/>
    <id>https://blog.fly97.cn/p/have-a-look-at-tini/</id>
    <published>2023-10-28T06:38:00.000Z</published>
    <updated>2023-10-28T06:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍tini进程管理器。</p><p>关键词：<strong>k8s，tini</strong></p><span id="more"></span><h2 id="背景">背景</h2><p>Linux系统中，PID为1的进程承担了两个重要的使命：</p><ol type="1"><li><p>传递信号给子进程</p><p>如果pid为1的进程，无法向其子进程传递信号，可能导致容器发送SIGTERM信号后，父进程等待子进程退出。若此时父进程无法传递信号到子进程，整个容器无法正常退出，除非向父进程传递SIGKILL信号，使其强行退出。<strong>而这样会导致一些退出前的操作无法完成，如关闭数据库连接，关闭输入输出流等。</strong></p></li><li><p>接管孤儿进程，防止出现僵尸进程</p><p>如果一个进程A中运行了一个子进程B，而子进程B创建了一个子进程C，若此时子进程B异常退出（通过SIGKILL信号，并不会发送SIGKILL信号给进程C），此时进程C会被进程A接管。<strong>进程A不会传递信号到进程C，这就导致了进程B结束了，但是没有回收其子进程C，子进程C就变成了僵尸进程。</strong></p></li></ol><p>在docker中，<code>docker stop</code>会发送<code>SIGTERM</code>信号给容器的主进程来处理。如果主进程没有处理这个信号，docker会在等待10s后，发送<code>SIGKILL</code>信号来强制终止。</p><h2 id="tini介绍">tini介绍</h2><p>tini是一个轻量级init进程，被设计作为容器的1号进程。</p><p>tini只会做以下事情：</p><ul><li>生成一个进程，并等待它退出；</li><li>收割僵尸进程；</li><li>执行信号转发。</li></ul><p>tini被设计为一个服务于容器的单进程管理器，通常只能管理一个进程。一般情况下，服务容器化要求一个容器尽量只作为一件事情，即只有一个进程或一组进程。</p><p>tini编译产物只有一个可执行文件，其静态版本不依赖其他软件，可以在任意发行版中使用。</p><h2 id="tini使用">tini使用</h2><blockquote><p><ahref="https://github.com/krallin/tini#using-tini">README#using-tini</a></p></blockquote><p>直接把tini打包到镜像中，配置<code>ENTRYPOINT</code>为<code>["/tini", "--"]</code>。选项要加在<code>--</code>前面，例如：<code>["/tini", "-vvv", "--"]</code></p><h2 id="tini优势">tini优势</h2><p>通过tini可以避免业务进程重复编写本来由1号进程该做的事情，帮助传统的应用可以无感迁移到容器化部署。</p><ol type="1"><li>防止僵尸进程的产生。如果业务进程作为容器的1号进程，且没有等待子进程退出的逻辑，则可能会产生僵尸进程。</li><li>实现优雅退出。如果业务进程作为容器的1号进程，且没有处理信号的逻辑，当1号进程收到信号时，什么都不做。<strong>因为PID1它会忽略具有默认操作的任何信号</strong>，除非实现了监听 SIGTERM信号的逻辑。</li><li>docker ce发行版默认包含tini。只需要dockerrun的是添加<code>--init</code>选项即可，不需要改变镜像，不需要添加entrypoint和command。</li></ol><blockquote><p>shell可以处理僵尸进程，但无法做到优雅推出。shell作为PID1进程时不会将信号转发给子进程。</p></blockquote><h2 id="tini实践">tini实践</h2><p>通过<code>ENTRYPOINT</code>启动<code>tini</code>作为进程管理器，然后再通过<code>tini</code>运行CMD指定的程序命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ENV</span> ADMIN_PASSWD admin</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">  <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; sed -e <span class="string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">  -e <span class="string">&#x27;s|^#baseurl=http://mirror.centos.org/centos|baseurl=https://mirrors.nju.edu.cn/centos|g&#x27;</span> \</span></span><br><span class="line"><span class="language-bash">  -i.bak \</span></span><br><span class="line"><span class="language-bash">  /etc/yum.repos.d/CentOS-Base.repo \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; yum clean all \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; yum -y update \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; yum install -y net-tools iproute openssh-clients openssh-server <span class="built_in">which</span> sudo \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; groupadd -g 500 admin \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; useradd -g 500 -u 500 -d /home/admin -m admin \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">echo</span> <span class="variable">$&#123;ADMIN_PASSWD&#125;</span> | passwd admin --stdin \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;admin ALL=(ALL) NOPASSWD:ALL&#x27;</span> &gt;&gt; /etc/sudoers</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> TINI_VERSION v0.<span class="number">19.0</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> tini /tini</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /tini</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/tini&quot;</span>, <span class="string">&quot;--&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --<span class="built_in">chown</span>=admin:admin spring-petclinic-3.1.0-SNAPSHOT.jar entrypoint.sh /home/admin/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x /home/admin/entrypoint.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> amazon-corretto-17-x64-linux-jdk.rpm /tmp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; yum localinstall -y /tmp/amazon-corretto-17-x64-linux-jdk.rpm  \</span></span><br><span class="line"><span class="language-bash">&amp;&amp; <span class="built_in">rm</span> -rf /tmp/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ssh-keygen -A</span></span><br><span class="line"><span class="comment"># Run your program under Tini</span></span><br><span class="line"><span class="comment"># CMD [&quot;/your/program&quot;, &quot;-and&quot;, &quot;-its&quot;, &quot;arguments&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> admin</span><br><span class="line"><span class="keyword">ENV</span> PATH $&#123;PATH&#125;:/usr/local/bin:/usr/sbin</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/home/admin/entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>下面是<code>entrypoint.sh</code>文件的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/env bash</span></span><br><span class="line">sudo /usr/sbin/sshd &amp;</span><br><span class="line">/usr/bin/java -jar /home/admin/spring-petclinic-3.1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><code>tini</code>作为容器里的1号进程，首先启动了一个<code>sshd</code>进程，进程号为17，使得从容器外部可以连接到内部。然后启动了一个<code>java</code>进程，进程号为7。</p><p><code>tini</code>作为容器中的init进程，可以启动多个进程。同时还可以将信号转发给子进程，实现优雅启停；等待子进程退出，回收子进程占用的资源和进程号，防止出现僵尸进程。</p><p><img data-src="image-20231028204307022.png" /></p><h2 id="拓展">拓展</h2><h3 id="容器中的僵尸进程">容器中的僵尸进程</h3><p>当容器的1号进程无法将信号转发到子进程时，就会出现僵尸进程，下面演示一下。</p><p>启动一个python3容器，然后通过exec方式进入容器</p><p><img data-src="image-20231028210521553.png" /></p><p>后台启动一个sleep任务，此时该sleep进程是通过内核init方式创建的bash进行的子进程</p><p><img data-src="image-20231028210625820.png" /></p><p>此时使用ctrl+d退出容器，bash进程被杀死，而后台运行的sleep进程仍然存活，sleep进程的父进程变为python3。当任务结束后，子进程sleep100需要将状态码等一系列信息返回给父进程python3，然而父进程并没有调用waitpid()等函数获取子进程的返回值等信息，此时子进程就成为了僵尸进程，无法释放pid等资源。只要pid为1的进程不结束，资源就无法得到释放。</p><p><img data-src="image-20231028211650582.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍tini进程管理器。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s，tini&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="tini" scheme="https://blog.fly97.cn/tags/tini/"/>
    
  </entry>
  
  <entry>
    <title>RHCE学习教程之Ansible运维基础</title>
    <link href="https://blog.fly97.cn/p/learn-rhce-and-ansible/"/>
    <id>https://blog.fly97.cn/p/learn-rhce-and-ansible/</id>
    <published>2023-10-13T15:42:00.000Z</published>
    <updated>2023-10-13T15:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ansible是自动化运维利器，可以通过一台Linux服务器批量控制其他服务器。</p><p>本文主要介绍RHCE学习中的一些知识点，主要包含ansible的一些用法。</p><p><strong>关键词：RHCE Ansible</strong></p><span id="more"></span><h2 id="配置文件优先级">配置文件优先级</h2><ol type="1"><li><code>ANSIBLE_CONFIG</code>环境变量；</li><li>当前<code>/home</code>目录下ansible.cfg；</li><li><code>/home</code>目录下.ansible.cfg（隐藏文件）；</li><li><code>/etc/absible/ansible.cfg</code></li></ol><h2 id="配置非root用户提权">配置非root用户提权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[defaults]         </span><br><span class="line">inventory= ./hosts   //自定义被控主机清单文件，这里叫hosts</span><br><span class="line">remote_user= alice   //被控主机使用的账户，如果不用普通用户则无需本行以及后续配置</span><br><span class="line">[privilege_escalation]  //提升权限的配置</span><br><span class="line">become=True    //是否要提权  True是要提权</span><br><span class="line">become_method=sudo   //提权方式用sudo</span><br><span class="line">become_user=root   //提权时成为root</span><br><span class="line">become_ask_pass=False   //提权操作时无需密码</span><br></pre></td></tr></table></figure><p>想不起来使用下面的命令，可以生成默认的配置文件，然后根据提示取消相应的注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-config init &gt; ansible.cfg</span><br></pre></td></tr></table></figure><h2 id="配置hosts">配置Hosts</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[test01] //组名</span><br><span class="line">node1   </span><br><span class="line">[test02]</span><br><span class="line">node2</span><br><span class="line">[web]</span><br><span class="line">node[3:4] //组名精简写法</span><br><span class="line">[test05]</span><br><span class="line">node5</span><br><span class="line">[webserver:children] //children关键字，代表嵌套组，webserver包含下面的组</span><br><span class="line">web</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见方式">常见方式</h2><h3 id="命令方式">命令方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br><span class="line">ansible all -m <span class="built_in">command</span> -a <span class="string">&#x27;ls /opt/abc.txt&#x27;</span>  // 不支持管道，默认模块</span><br><span class="line">ansible all -m shell -a <span class="string">&#x27;echo &quot;nameserver 1.1.1.1&quot; &gt;&gt; /etc/reslove.conf&#x27;</span> // 支持管道</span><br><span class="line">ansible node1 -m shell -a <span class="string">&#x27;echo 123 | passwd --stdin tom&#x27;</span> // 支持管道，设置密码</span><br><span class="line">ansible node1 -m script -a <span class="string">&#x27;test.sh&#x27;</span> // 将脚本上传到节点执行</span><br></pre></td></tr></table></figure><h3 id="playbook方式">playbook方式</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ping</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ping</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &#x27;ok&#x27; /tmp/ok</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">resolv</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo &quot;nameserver 1.1.1.1&quot; &gt;&gt; /etc/resolv.conf</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        echo 123 | passwd --stdin tom</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">test.sh</span></span><br></pre></td></tr></table></figure><h2 id="常见模块">常见模块</h2><p>refer：https://docs.ansible.com/ansible/latest/collections/ansible/builtin/</p><h3 id="file模块">file模块</h3><p>一般用来创建文件、目录、链接文件，以及删除文件</p><table><colgroup><col style="width: 7%" /><col style="width: 92%" /></colgroup><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>path</td><td>路径</td></tr><tr class="even"><td>state</td><td>执行动作。touch：创建普通文件，directory是目录，link是链接文件（src是源，dest是目标），absent是删除</td></tr><tr class="odd"><td>owner</td><td>属主</td></tr><tr class="even"><td>group</td><td>属组</td></tr><tr class="odd"><td>mode</td><td>权限</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=touch path=/opt/123&#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=directory path=/opt/456 &#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=link src=/etc/hosts dest=/var/tmp/hosts&#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=absent path=/opt/123&#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=touch path=/opt/123 owner=alice&#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=touch path=/opt/123 group=alice&#x27;</span></span><br><span class="line">ansible node1 -m file -a <span class="string">&#x27;state=touch path=/opt/123 mode=4777&#x27;</span></span><br></pre></td></tr></table></figure><p>playbook</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/456</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">link</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/etc/hosts</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/tmp/hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">absent</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/456</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">alice</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">touch</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/1234</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">alice</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/opt/1234</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="number">4777</span></span><br></pre></td></tr></table></figure><h3 id="yum_repository模块">yum_repository模块</h3><p>为被控主机搭建yum仓库，记不住yum后面的文字可以先使用<code>ansible-doc -l | grep yum</code>，再使用<code>ansible-doc yum_repository</code></p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>name</td><td>仓库名</td></tr><tr class="even"><td>description</td><td>描述</td></tr><tr class="odd"><td>file</td><td>yum配置文件的名字</td></tr><tr class="even"><td>baseurl</td><td>软件源地址</td></tr><tr class="odd"><td>gpgcheck</td><td>gpgkey检测</td></tr><tr class="even"><td>gpgkey</td><td>如果检测key，指定key路径</td></tr><tr class="odd"><td>enabled</td><td>是否开启，默认值为1是开启</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m yum_repository -a <span class="string">&#x27;name=appstream description=appstrem baseurl=http://172.25.0.254/rhel9/AppStream gpgcheck=0&#x27;</span></span><br><span class="line">ansible all -m yum_repository -a <span class="string">&#x27;name=baseos description=baseos baseurl=http://172.25.0.254/rhel9/BaseOS gpgcheck=0&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">yum_repository:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">appstream</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">appstream</span></span><br><span class="line">        <span class="attr">baseurl:</span> <span class="string">http://172.25.0.254/rhel9/AppStream</span></span><br><span class="line">        <span class="attr">gpgcheck:</span> <span class="number">0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">yum_repository:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">baseos</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">baseos</span></span><br><span class="line">        <span class="attr">baseurl:</span> <span class="string">http://172.25.0.254/rhel9/BaseOS</span></span><br><span class="line">        <span class="attr">gpgcheck:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="yum模块">yum模块</h3><p>使用yum安装软件</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>present/安装，absent/卸载，latest/升级</td></tr><tr class="even"><td>name</td><td>指定软件包名</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">net-tools</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><h3 id="copy模块">Copy模块</h3><p>将控制主机的文件拷贝到被控主机</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>src</td><td>源文件</td></tr><tr class="even"><td>dest</td><td>目标</td></tr><tr class="odd"><td>owner</td><td>属主</td></tr><tr class="even"><td>group</td><td>属组</td></tr><tr class="odd"><td>mode</td><td>权限</td></tr><tr class="even"><td>backup</td><td>backup=yes，拷贝时备份控制主机的同名文件，防止被覆盖</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible node1 -m copy dest=/etc/hostname src=/var/tmp/hostname owner=alice mode=1777 backup=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: node1</span><br><span class="line">  tasks:</span><br><span class="line">    - copy:</span><br><span class="line">        src: /etc/hostname</span><br><span class="line">        dest: /var/tmp/hostname</span><br><span class="line">        owner: alice</span><br><span class="line">        mode: 1777</span><br><span class="line">        backup: <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h3 id="user模块">User模块</h3><p>管理账户的模块</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>present/创建，absent/删除</td></tr><tr class="even"><td>name</td><td>名字</td></tr><tr class="odd"><td>uid</td><td>定义uid号</td></tr><tr class="even"><td>password</td><td>定义密码</td></tr><tr class="odd"><td>group</td><td>基本组</td></tr><tr class="even"><td>groups</td><td>附加组</td></tr><tr class="odd"><td>append</td><td>append=yes，追加附加组</td></tr><tr class="even"><td>remove</td><td>remove=yes，删除用户相关文件</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible node1 -m user -a <span class="string">&#x27;name=zhangsan state=absent remove=yes&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">wf09</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">101</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;&quot;123456&quot;|password_hash(&quot;sha256&quot;)&#125;&#125;</span>&#x27;</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">wf09</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">append:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="group模块">Group模块</h3><p>管理组</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>present/创建，absent/删除</td></tr><tr class="even"><td>name</td><td>组名</td></tr><tr class="odd"><td>gid</td><td>gid组号</td></tr></tbody></table><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">wf09</span></span><br><span class="line">        <span class="attr">gid:</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><h3 id="service模块">Service模块</h3><p>管理服务</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>started/开启服务，stopped/关闭服务，restarted/重启服务</td></tr><tr class="even"><td>name</td><td>服务名</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">service:</span> </span><br><span class="line">        <span class="attr">state:</span> <span class="string">restarted</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br></pre></td></tr></table></figure><h3 id="安装collection">安装collection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim ansible.cfg</span></span><br><span class="line">collections_paths=/home/alice/ansible/collection</span><br><span class="line"><span class="comment"># 官方网站 https://galaxy.ansible.com</span></span><br><span class="line"><span class="comment"># bash执行</span></span><br><span class="line">ansible-galaxy collection install http://server1.lab0.example.com/materials/ansible-posix-1.5.1.tar.gz  -p /home/alice/ansible/collection</span><br><span class="line"><span class="comment"># 查看firewalld</span></span><br><span class="line">ansible-doc ansible.posix.firewalld</span><br></pre></td></tr></table></figure><p><strong>pip 模块</strong></p><p>python的包管理模块</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">pip:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">firewalld</span></span><br></pre></td></tr></table></figure><p>用firewall之前还需要用yum安装firewalld安装包。</p><h3 id="firewalld模块">firewalld模块</h3><p>管理防火墙</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>enabled/添加规则，disabled/删除规则</td></tr><tr class="even"><td>service</td><td>指定服务（协议）</td></tr><tr class="odd"><td>permanent</td><td>permanent=yes，永久生效</td></tr><tr class="even"><td>immediate</td><td>immediate=yes，立刻生效</td></tr><tr class="odd"><td>port</td><td>22</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">firewalld:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">enabled</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">permanent:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">immediate:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="parted模块">parted模块</h3><p>对硬盘分区</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td><strong>device</strong></td><td>操作的设备</td></tr><tr class="even"><td><strong>label</strong></td><td>分区表类型 mbr/msdos， gpt</td></tr><tr class="odd"><td><strong>number</strong></td><td>分区序号</td></tr><tr class="even"><td><strong>part_start</strong></td><td>分区起始位置</td></tr><tr class="odd"><td><strong>part_end</strong></td><td>分区结束位置</td></tr><tr class="even"><td><strong>state</strong></td><td><strong>present/创建，absent/删除，info/查看信息</strong></td></tr></tbody></table><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node5</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">parted:</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">        <span class="attr">device:</span> <span class="string">/dev/vdb</span></span><br><span class="line">        <span class="attr">number:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">part_start:</span> <span class="string">3GiB</span></span><br><span class="line">        <span class="attr">part_end:</span> <span class="string">4GiB</span></span><br></pre></td></tr></table></figure></p><h3 id="filesystem模块">filesystem模块</h3><p>赋予文件系统</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>dev</td><td>定义分区</td></tr><tr class="even"><td>fstype</td><td>分区表类型 mbr/msdos， gpt</td></tr><tr class="odd"><td><strong>number</strong></td><td>分区序号</td></tr><tr class="even"><td><strong>part_start</strong></td><td>分区起始位置</td></tr><tr class="odd"><td><strong>part_end</strong></td><td>分区结束位置</td></tr><tr class="even"><td><strong>state</strong></td><td><strong>present/创建，absent/删除，info/查看信息</strong></td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node5</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">filesystem:</span></span><br><span class="line">        <span class="attr">dev:</span> <span class="string">/dev/vdb2</span></span><br><span class="line">        <span class="attr">fstype:</span> <span class="string">xfs</span></span><br><span class="line">        <span class="attr">force:</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="lvg模块">lvg模块</h3><p>管理卷组</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>state</td><td>present/创建，absent/删除</td></tr><tr class="even"><td>vg</td><td>卷组名</td></tr><tr class="odd"><td>pvs</td><td>指定物理卷</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node5</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lvg:</span></span><br><span class="line">        <span class="attr">vg:</span> <span class="string">myvg</span></span><br><span class="line">        <span class="attr">pvs:</span> <span class="string">/dev/vdb2</span></span><br></pre></td></tr></table></figure><h3 id="lvol模块">lvol模块</h3><p>管理卷组</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td>lv</td><td>逻辑卷名</td></tr><tr class="even"><td>size</td><td>大小</td></tr><tr class="odd"><td>vg</td><td>空间来自哪个卷组</td></tr><tr class="even"><td>state</td><td>present/创建，absent/删除</td></tr><tr class="odd"><td>force</td><td>是否强制</td></tr></tbody></table><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node5</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lvol:</span></span><br><span class="line">        <span class="attr">lv:</span> <span class="string">mylv</span></span><br><span class="line">        <span class="attr">size:</span> <span class="string">50m</span></span><br><span class="line">        <span class="attr">vg:</span> <span class="string">myvg</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node5</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lvol:</span></span><br><span class="line">        <span class="attr">lv:</span> <span class="string">mylv</span></span><br><span class="line">        <span class="attr">size:</span> <span class="string">500m</span> <span class="comment"># 再次执行扩容</span></span><br><span class="line">        <span class="attr">vg:</span> <span class="string">myvg</span></span><br></pre></td></tr></table></figure><h3 id="lineinfile模块">lineinfile模块</h3><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td><strong>dest</strong></td><td>目标文件</td></tr><tr class="even"><td><strong>regexp</strong></td><td>查找替换内容</td></tr><tr class="odd"><td><strong>line</strong></td><td>要替换/添加什么内容</td></tr><tr class="even"><td><strong>insertbefore</strong></td><td>在某行上添加</td></tr><tr class="odd"><td><strong>insertafter</strong></td><td>在某行下添加</td></tr></tbody></table><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./txt</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/txt</span></span><br><span class="line">        <span class="attr">owner:</span> <span class="string">alice</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/txt</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">txt</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">abc</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cat /tmp/txt</span></span><br><span class="line"><span class="string"></span>      <span class="attr">register:</span> <span class="string">info</span> <span class="comment"># 注册变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">info.stdout</span></span><br></pre></td></tr></table></figure><h3 id="replace模块">replace模块</h3><p>可以替换文档中的某些字符串</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td><strong>path</strong></td><td>要替换文件的路径</td></tr><tr class="even"><td><strong>regexp</strong></td><td>要匹配的内容</td></tr><tr class="odd"><td><strong>replace</strong></td><td>要替换/添加什么内容</td></tr><tr class="even"><td><strong>backup</strong></td><td>是否要备份</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">replace:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/home/zabbix/etc/zabbix_agentd.conf</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">Server=.*</span></span><br><span class="line">        <span class="attr">replace:</span> <span class="string">Server=1.1.1.1</span></span><br><span class="line">        <span class="attr">backup:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><h3 id="debug模块">debug模块</h3><p>可以输出常量字符，或者变量中的信息</p><table><thead><tr class="header"><th>参数</th><th>用法</th></tr></thead><tbody><tr class="odd"><td><strong>msg</strong></td><td>输出常量字符串，如果是变量要加<code>&#123;&#123; &#125;&#125;</code></td></tr><tr class="even"><td><strong>var</strong></td><td>输出变量，无需<code>&#123;&#123;&#125;&#125;</code></td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;ansible_memfree_mb&#125;&#125;</span>&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">ansible_memfree_mb</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">ok</span></span><br></pre></td></tr></table></figure><h3 id="setup模块">setup模块</h3><p>可以获取被控主机的各自信息并定义成变量</p><p>查看某个node的变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible node1 -m setup | less</span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 61%" /><col style="width: 38%" /></colgroup><thead><tr class="header"><th>变量</th><th>用法</th></tr></thead><tbody><tr class="odd"><td><strong>ansible_enp1s0.ipv4.address</strong></td><td>enp1s0网卡的ipv4地址</td></tr><tr class="even"><td><strong>ansible_hostname</strong></td><td>主机名</td></tr><tr class="odd"><td><strong>ansible_memfree_mb</strong></td><td>内存剩余大小</td></tr><tr class="even"><td><strong>ansible_fqdn</strong></td><td>完整主机名</td></tr><tr class="odd"><td><strong>ansible_bios_version</strong></td><td>bios版本</td></tr><tr class="even"><td><strong>ansible_devices.vda.size</strong></td><td><strong>第一块硬盘大小</strong></td></tr><tr class="odd"><td><strong>ansible_devices.vda.partitions.vda1.size</strong></td><td><strong>第一块硬盘第一个分区大小</strong></td></tr><tr class="even"><td><strong>ansible_lvm.lvs.root.size_g</strong></td><td><strong>逻辑卷root的大小</strong></td></tr><tr class="odd"><td><strong>ansible_kernel</strong></td><td><strong>内核版本信息</strong></td></tr></tbody></table><p>关闭剧本默认执行的变量收集任务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node1</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span><span class="string">//关闭setup任务，可以加快剧本运行速度</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line"><span class="attr">msg:</span> <span class="string">&quot;ok&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ansible是自动化运维利器，可以通过一台Linux服务器批量控制其他服务器。&lt;/p&gt;
&lt;p&gt;本文主要介绍RHCE学习中的一些知识点，主要包含ansible的一些用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：RHCE Ansible&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
    <category term="ansible" scheme="https://blog.fly97.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>RHCE学习教程之Ansible高级用法</title>
    <link href="https://blog.fly97.cn/p/advanced-usage-about-ansible/"/>
    <id>https://blog.fly97.cn/p/advanced-usage-about-ansible/</id>
    <published>2023-10-13T15:42:00.000Z</published>
    <updated>2023-10-13T15:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ansible是自动化运维利器，可以通过一台Linux服务器批量控制其他服务器。</p><p>本文主要介绍ansible的一些高级用法。</p><p><strong>关键词：RHCE Ansible</strong></p><span id="more"></span><h2 id="自定义变量">自定义变量</h2><h3 id="主机清单变量">主机清单变量</h3><p>针对主机或者组</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;针对主机</span></span><br><span class="line"><span class="section">[paas]</span></span><br><span class="line">1.2.4.8 <span class="attr">hostname</span>=<span class="number">1.2</span>.<span class="number">4.8</span>-master01</span><br><span class="line"></span><br><span class="line"><span class="comment">;针对组</span></span><br><span class="line"><span class="comment">;同一组可以使用相同的环境变量</span></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line">1.1.1.1</span><br><span class="line">2.2.2.2</span><br><span class="line">3.3.3.3</span><br><span class="line"><span class="section">[web:vars]</span></span><br><span class="line"><span class="attr">ansible_ssh_user</span>=root</span><br><span class="line"><span class="attr">ansible_ssh_pass</span>=root1234</span><br></pre></td></tr></table></figure><h3 id="定义剧本变量">定义剧本变量</h3><p>使用关键字vars，针对所有执行剧本的主机生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node1,</span> <span class="string">node2</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">test01:</span> <span class="string">aaa</span></span><br><span class="line">    <span class="attr">test02:</span> <span class="string">bbb</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> </span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; test01 &#125;&#125;</span>--<span class="template-variable">&#123;&#123; test02 &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="定义文档变量">定义文档变量</h3><p>可以在执行剧本时进行调用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># var.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">abc:</span> <span class="string">abcabc</span></span><br><span class="line"><span class="attr">xyz:</span> <span class="string">xyzxyz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test01.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node1</span></span><br><span class="line">  <span class="attr">var_files:</span> <span class="string">var01.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">msg:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;abc&#125;&#125;</span> <span class="template-variable">&#123;&#123;xyz&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="以交互方式定义变量">以交互方式定义变量</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">node1</span></span><br><span class="line">  <span class="comment"># 交互定义变量关键词</span></span><br><span class="line">  <span class="attr">vars_prompt:</span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">var1</span></span><br><span class="line">      <span class="attr">prompt:</span> <span class="string">&quot;输入要创建的用户名&quot;</span></span><br><span class="line">      <span class="comment"># 不隐藏变量的值</span></span><br><span class="line">      <span class="attr">private:</span> <span class="literal">no</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">var:</span> <span class="string">var1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;var1&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ansible是自动化运维利器，可以通过一台Linux服务器批量控制其他服务器。&lt;/p&gt;
&lt;p&gt;本文主要介绍ansible的一些高级用法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：RHCE Ansible&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
    <category term="ansible" scheme="https://blog.fly97.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（十二）使用keepalived+haproxy创建高可用K8s集群</title>
    <link href="https://blog.fly97.cn/p/create-ha-kubernetes/"/>
    <id>https://blog.fly97.cn/p/create-ha-kubernetes/</id>
    <published>2023-10-04T11:46:00.000Z</published>
    <updated>2023-10-04T11:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用keepalived+haproxy创建高可用集群，文中主要来源与作者在工作中的一些实际操作，本文仅供作者自己记录和读者参考。</p><p>关键词：<strong>高可用K8s集群</strong></p><span id="more"></span><p>本文搭建的集群使用3个master节点和4个worker节点，为了节约资源，本文使用嵌入的etcd集群。</p><h2 id="集群环境准备">集群环境准备</h2><h3 id="集群拓扑">集群拓扑</h3><figure><img data-src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p1b3pld2Vp,size_16,color_FFFFFF,t_70.png"alt="堆叠ETCD" /><figcaption aria-hidden="true">堆叠ETCD</figcaption></figure><ul><li>使用keepalived+haproxy的架构，worker节点通过访问vip和haproxy的后端服务器，实现了K8s集群的高可用；</li><li>为了避免堆叠集群出现耦合失败的风险，应该为HA集群运行至少三个堆叠的控制节点；</li><li>以上是kubeadm中的默认拓扑。当使用<code>kubeadm init</code>和<code>kubeadm join --control-plane --upload-certs</code>时，在控制节点平面上自动创建etcd成员。</li></ul><h3 id="主机规划">主机规划</h3><table><colgroup><col style="width: 11%" /><col style="width: 16%" /><col style="width: 5%" /><col style="width: 11%" /><col style="width: 44%" /><col style="width: 11%" /></colgroup><thead><tr class="header"><th>主机IP地址</th><th>主机名</th><th>主机配置</th><th>主机角色</th><th>软件列表</th><th>其他IP</th></tr></thead><tbody><tr class="odd"><td>192.168.100.101</td><td>192.168.100.101-master</td><td>2C4G</td><td>master + worker</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、containerd</td><td></td></tr><tr class="even"><td>192.168.100.102</td><td>192.168.100.102-master</td><td>2C4G</td><td>master + worker</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、containerd</td><td></td></tr><tr class="odd"><td>192.168.100.103</td><td>192.168.100.103-master</td><td>2C4G</td><td>master + worker</td><td>kube-apiserver、kube-controller-manager、kube-scheduler、etcd、kubelet、kube-proxy、containerd</td><td></td></tr><tr class="even"><td>192.168.100.105</td><td>192.168.100.105-worker</td><td>2C4G</td><td>worker+LB1</td><td>kubelet、kube-proxy、containerd、keepalived、haproxy</td><td>192.168.100.104</td></tr><tr class="odd"><td>192.168.100.106</td><td>192.168.100.106-worker</td><td>2C4G</td><td>worker+LB1</td><td>kubelet、kube-proxy、containerd、keepalived、haproxy</td><td>192.168.100.104</td></tr><tr class="even"><td>192.168.100.107</td><td>192.168.100.107-worker</td><td>2C4G</td><td>worker</td><td>kubelet、kube-proxy、containerd</td><td></td></tr><tr class="odd"><td>192.168.100.108</td><td>192.168.100.108-worker</td><td>2C4G</td><td>worker</td><td>kubelet、kube-proxy、containerd</td><td></td></tr></tbody></table><h3 id="软件版本">软件版本</h3><table><thead><tr class="header"><th style="text-align: left;">软件名称</th><th style="text-align: left;">版本</th><th style="text-align: left;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">CentOS8</td><tdstyle="text-align: left;">kernel版本：4.18.0-477.27.1.el8_8.x86_64</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">kubernetes</td><td style="text-align: left;">v1.28.2</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">etcd</td><td style="text-align: left;">v3.5.9</td><td style="text-align: left;">最新版本</td></tr><tr class="even"><td style="text-align: left;">flannel</td><td style="text-align: left;">v0.22.3</td><td style="text-align: left;">网络插件</td></tr><tr class="odd"><td style="text-align: left;">containerd</td><td style="text-align: left;">v1.7.6</td><td style="text-align: left;">容器运行时</td></tr><tr class="even"><td style="text-align: left;">haproxy</td><td style="text-align: left;">v1.8.27</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;">keepalived</td><td style="text-align: left;">v2.1.5</td><td style="text-align: left;"></td></tr></tbody></table><h3 id="网络分配">网络分配</h3><table><thead><tr class="header"><th style="text-align: left;">网络名称</th><th style="text-align: left;">网段</th><th style="text-align: left;">备注</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Node网络</td><td style="text-align: left;">192.168.100.101/108</td><td style="text-align: left;">集群节点网络</td></tr><tr class="even"><td style="text-align: left;">Service网络</td><td style="text-align: left;">10.96.0.0/16</td><td style="text-align: left;">实现服务发现时所使用的网络</td></tr><tr class="odd"><td style="text-align: left;">Pod网络</td><td style="text-align: left;">10.244.0.0/16</td><td style="text-align: left;"></td></tr></tbody></table><h2 id="集群部署">集群部署</h2><p>为了方便集群部署，本文使用自动化运维工具ansible配置整个集群。</p><p>主要编辑两个文件，一是ansible的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ansible/ansible.cfg</span></span><br><span class="line">[defaults]</span><br><span class="line"><span class="comment"># hosts主机文件</span></span><br><span class="line">inventory = ./hosts</span><br><span class="line"><span class="comment"># ssh免指纹</span></span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure><p>二是ansible的主机文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/ansible/hosts</span></span><br><span class="line">[master]</span><br><span class="line">192.168.100.101 ansible_ssh_user=root</span><br><span class="line">192.168.100.102 ansible_ssh_user=root</span><br><span class="line">192.168.100.103 ansible_ssh_user=root</span><br><span class="line">[worker]</span><br><span class="line">192.168.100.105 ansible_ssh_user=root</span><br><span class="line">192.168.100.106 ansible_ssh_user=root</span><br><span class="line">192.168.100.107 ansible_ssh_user=root</span><br><span class="line">192.168.100.108 ansible_ssh_user=root</span><br></pre></td></tr></table></figure><h3 id="运行时下载">运行时下载</h3><p>refer：https://github.com/containerd/nerdctl，需要下载full的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar Cxzvvf /usr/local nerdctl-full-*-linux-amd64.tar.gz</span><br><span class="line">systemctl <span class="built_in">enable</span> buildkit.service --now</span><br><span class="line">systemctl <span class="built_in">enable</span> containerd.service --now</span><br><span class="line">systemctl <span class="built_in">enable</span> stargz-snapshotter.service --now</span><br></pre></td></tr></table></figure><h3 id="主机准备">主机准备</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init-k8s.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">hosts</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ansible.builtin.shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cat &gt; /etc/hosts &lt;&lt; EOF</span></span><br><span class="line"><span class="string">        127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span></span><br><span class="line"><span class="string">        ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.101</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.101</span><span class="string">-master</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.102</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.102</span><span class="string">-master</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.103</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.103</span><span class="string">-master</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.105</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.105</span><span class="string">-worker</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.106</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.106</span><span class="string">-worker</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.107</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.107</span><span class="string">-worker</span></span><br><span class="line">        <span class="number">192.168</span><span class="number">.100</span><span class="number">.108</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.108</span><span class="string">-worker</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">master</span> <span class="string">hostname</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">name=&#123;&#123;</span> <span class="string">ansible_enp6s18[&#x27;ipv4&#x27;][&#x27;address&#x27;]</span> <span class="string">&#125;&#125;-master</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">worker</span> <span class="string">hostname</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">worker</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="string">name=&#123;&#123;</span> <span class="string">ansible_enp6s18[&#x27;ipv4&#x27;][&#x27;address&#x27;]</span> <span class="string">&#125;&#125;-worker</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">k8s</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ansible.builtin.shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        systemctl disable firewalld --now</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">sed</span> <span class="string">-i</span> <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> <span class="string">/etc/selinux/config</span></span><br><span class="line">        <span class="string">setenforce</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="string">sed</span> <span class="string">-ri</span> <span class="string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> <span class="string">/etc/fstab</span></span><br><span class="line">        <span class="string">swapoff</span> <span class="string">-a</span></span><br><span class="line"></span><br><span class="line">        <span class="string">yum</span> <span class="string">install</span> <span class="string">ipvsadm</span> <span class="string">ipset</span> <span class="string">sysstat</span> <span class="string">conntrack</span> <span class="string">libseccomp</span> <span class="string">iproute-tc</span> <span class="string">-y</span></span><br><span class="line"></span><br><span class="line">        <span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/etc/modules-load.d/k8s.conf</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line">        <span class="string">br_netfilter</span> </span><br><span class="line">        <span class="string">ip_vs</span> </span><br><span class="line">        <span class="string">ip_vs_lc</span> </span><br><span class="line">        <span class="string">ip_vs_wlc</span> </span><br><span class="line">        <span class="string">ip_vs_rr</span> </span><br><span class="line">        <span class="string">ip_vs_wrr</span> </span><br><span class="line">        <span class="string">ip_vs_lblc</span> </span><br><span class="line">        <span class="string">ip_vs_lblcr</span> </span><br><span class="line">        <span class="string">ip_vs_dh</span> </span><br><span class="line">        <span class="string">ip_vs_sh</span> </span><br><span class="line">        <span class="string">ip_vs_fo</span> </span><br><span class="line">        <span class="string">ip_vs_nq</span> </span><br><span class="line">        <span class="string">ip_vs_sed</span> </span><br><span class="line">        <span class="string">ip_vs_ftp</span> </span><br><span class="line">        <span class="string">ip_vs_sh</span> </span><br><span class="line">        <span class="string">nf_conntrack</span> </span><br><span class="line">        <span class="string">ip_tables</span> </span><br><span class="line">        <span class="string">ip_set</span> </span><br><span class="line">        <span class="string">xt_set</span> </span><br><span class="line">        <span class="string">ipt_set</span> </span><br><span class="line">        <span class="string">ipt_rpfilter</span> </span><br><span class="line">        <span class="string">ipt_REJECT</span> </span><br><span class="line">        <span class="string">ipip</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">        <span class="string">systemctl</span> <span class="string">enable</span> <span class="string">--now</span> <span class="string">systemd-modules-load.service</span></span><br><span class="line"></span><br><span class="line">        <span class="string">lsmod</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">-e</span> <span class="string">ip_vs</span> <span class="string">-e</span> <span class="string">nf-conntrack</span></span><br><span class="line"></span><br><span class="line">        <span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/etc/sysctl.d/k8s.conf</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line">        <span class="string">vm.swappiness</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">        <span class="string">net.bridge.bridge-nf-call-ip6tables</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">net.bridge.bridge-nf-call-iptables</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">net.ipv4.ip_forward</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">fs.may_detach_mounts</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">vm.overcommit_memory</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">vm.panic_on.oom</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">        <span class="string">fs.inotify.max_user_watches</span> <span class="string">=</span> <span class="number">89100</span></span><br><span class="line">        <span class="string">fs.file-max</span> <span class="string">=</span> <span class="number">52706963</span></span><br><span class="line">        <span class="string">fs.nr_open</span> <span class="string">=</span> <span class="number">52706963</span></span><br><span class="line">        <span class="string">net.netfilter.nf_conntrack_max</span> <span class="string">=</span> <span class="number">2310720</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_keepalive_time</span> <span class="string">=</span> <span class="number">600</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_keepalive_probes</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_keepalive_intvl</span> <span class="string">=</span> <span class="number">15</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_max_tw_buckets</span> <span class="string">=</span> <span class="number">36000</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_tw_reuse</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_max_orphans</span> <span class="string">=</span> <span class="number">327680</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_orphan_retries</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_syncookies</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_max_syn_backlog</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">        <span class="string">net.ipv4.ip_contrack_max</span> <span class="string">=</span> <span class="number">65536</span></span><br><span class="line">        <span class="string">net.ipv4.tcp_timestamps</span> <span class="string">=</span> <span class="number">0</span></span><br><span class="line">        <span class="string">net.core.somaxconn</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">        <span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">/etc/security/limits.d/k8s.conf</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line">        <span class="string">*</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">1048576</span></span><br><span class="line">        <span class="string">*</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">1048576</span></span><br><span class="line">        <span class="string">*</span> <span class="string">soft</span> <span class="string">noproc</span> <span class="number">1048576</span></span><br><span class="line">        <span class="string">*</span> <span class="string">hard</span> <span class="string">noproc</span> <span class="number">1048576</span></span><br><span class="line">        <span class="string">*</span> <span class="string">soft</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br><span class="line">        <span class="string">*</span> <span class="string">hard</span> <span class="string">memlock</span> <span class="string">unlimited</span></span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line">        <span class="string">exit</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Copy</span> <span class="string">file</span> <span class="string">with</span> <span class="string">owner</span> <span class="string">and</span> <span class="string">permissions</span></span><br><span class="line">      <span class="attr">ansible.builtin.copy:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">./nerdctl-full-1.6.0-linux-amd64.tar.gz</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/tmp/nerdctl-full-1.6.0-linux-amd64.tar.gz</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Unzip</span> <span class="string">nerdctl</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">ansible.builtin.unarchive:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/tmp/nerdctl-full-1.6.0-linux-amd64.tar.gz</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/usr/local/</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">ansible.builtin.shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        systemctl enable buildkit.service --now</span></span><br><span class="line"><span class="string">        systemctl enable containerd.service --now</span></span><br><span class="line"><span class="string">        systemctl enable stargz-snapshotter.service --now</span></span><br><span class="line"><span class="string">        mkdir -p /etc/containerd</span></span><br><span class="line"><span class="string">        containerd config default |  tee /etc/containerd/config.toml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">containerd</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">ansible.builtin.shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        systemctl enable buildkit.service --now</span></span><br><span class="line"><span class="string">        systemctl enable containerd.service --now</span></span><br><span class="line"><span class="string">        systemctl enable stargz-snapshotter.service --now</span></span><br><span class="line"><span class="string">        mkdir -p /etc/containerd</span></span><br><span class="line"><span class="string">        containerd config default |  tee /etc/containerd/config.toml</span></span><br><span class="line"><span class="string">        sed -ri &quot;s|registry.k8s.io|pkgs.fly97.cn|g&quot; /etc/containerd/config.toml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">kubeadm</span> <span class="string">repo</span></span><br><span class="line">      <span class="attr">ansible.builtin.shell:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt; EOF</span></span><br><span class="line"><span class="string">        [kubernetes]</span></span><br><span class="line"><span class="string">        name=Kubernetes for EPEL </span></span><br><span class="line"><span class="string">        baseurl=https://pkgs.fly97.cn/repository/kubernetes-yum/</span></span><br><span class="line"><span class="string">        enabled=1</span></span><br><span class="line"><span class="string">        gpgcheck=0</span></span><br><span class="line"><span class="string">        EOF</span></span><br><span class="line"><span class="string">        dnf makecache -y</span></span><br><span class="line"><span class="string">        dnf install kubelet kubeadm kubectl -y</span></span><br><span class="line"><span class="string">        systemctl stop kubelet</span></span><br><span class="line"><span class="string"></span>        </span><br></pre></td></tr></table></figure><h3 id="负载均衡">负载均衡</h3><p>在105和106机器上分别安装keepalived+HAproxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install keepalived haproxy -y</span><br></pre></td></tr></table></figure><h4 id="haproxy">haproxy</h4><p>以下是haproxy的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/haproxy/haproxy.cfg &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">global</span></span><br><span class="line"><span class="string">    log         127.0.0.1 local2</span></span><br><span class="line"><span class="string">    pidfile     /var/run/haproxy.pid</span></span><br><span class="line"><span class="string">    maxconn     65535</span></span><br><span class="line"><span class="string">    daemon</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line"><span class="string">    timeout connect 5000</span></span><br><span class="line"><span class="string">    timeout client 50000</span></span><br><span class="line"><span class="string">    timeout server 50000</span></span><br><span class="line"><span class="string">    timeout http-request 15s</span></span><br><span class="line"><span class="string">    timeout http-keep-alive 15s</span></span><br><span class="line"><span class="string">    retries    3</span></span><br><span class="line"><span class="string">    maxconn    65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">frontend  kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode tcp</span></span><br><span class="line"><span class="string">    bind *:6443</span></span><br><span class="line"><span class="string">    tcp-request inspect-delay 5s</span></span><br><span class="line"><span class="string">    default_backend  kubernetes-apiserver</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">backend kubernetes-apiserver</span></span><br><span class="line"><span class="string">    mode        tcp</span></span><br><span class="line"><span class="string">    balance     roundrobin</span></span><br><span class="line"><span class="string">    server master01 192.168.100.101:6443 check inter 2000 rise 2 fall 2</span></span><br><span class="line"><span class="string">    server master02 192.168.100.102:6443 check inter 2000 rise 2 fall 2</span></span><br><span class="line"><span class="string">    server master03 192.168.100.103:6443 check inter 2000 rise 2 fall 2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="keepalived">keepalived</h4><p>以下是106机器keepalived的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/keepalived/keepalived.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">global_defs &#123;</span></span><br><span class="line"><span class="string">   max_auto_priority</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">vrrp_script check_apiserver &#123;</span></span><br><span class="line"><span class="string">   script &quot;/etc/keepalived/check_apiserver_vip.sh&quot;</span></span><br><span class="line"><span class="string">   interval 2</span></span><br><span class="line"><span class="string">   weight 5</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">vrrp_instance VI_02 &#123;</span></span><br><span class="line"><span class="string">   # BACKUP模式</span></span><br><span class="line"><span class="string">   state BACKUP</span></span><br><span class="line"><span class="string">   nopreempt</span></span><br><span class="line"><span class="string">   interface enp6s18</span></span><br><span class="line"><span class="string">   # 每个集群的router_id要一致</span></span><br><span class="line"><span class="string">   virtual_router_id 100</span></span><br><span class="line"><span class="string">   priority 50</span></span><br><span class="line"><span class="string">   unicast_src_ip 192.168.100.106</span></span><br><span class="line"><span class="string">   unicast_peer&#123;</span></span><br><span class="line"><span class="string">      192.168.100.105</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   # 虚IP地址</span></span><br><span class="line"><span class="string">   virtual_ipaddress &#123;</span></span><br><span class="line"><span class="string">     192.168.100.104/24</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   track_script &#123;</span></span><br><span class="line"><span class="string">     check_apiserver</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>以下是105机器keepalived的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/keepalived/keepalived.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">global_defs &#123;</span></span><br><span class="line"><span class="string">  max_auto_priority</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">vrrp_script check_apiserver &#123;</span></span><br><span class="line"><span class="string">   script &quot;/etc/keepalived/check_apiserver_vip.sh&quot;</span></span><br><span class="line"><span class="string">   interval 2</span></span><br><span class="line"><span class="string">   weight 5</span></span><br><span class="line"><span class="string">   timeout 1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">vrrp_instance VI_01 &#123;</span></span><br><span class="line"><span class="string">   # MASTER模式</span></span><br><span class="line"><span class="string">   state MASTER</span></span><br><span class="line"><span class="string">   nopreempt</span></span><br><span class="line"><span class="string">   interface enp6s18</span></span><br><span class="line"><span class="string">   # 每个集群的router_id要一致</span></span><br><span class="line"><span class="string">   virtual_router_id 100</span></span><br><span class="line"><span class="string">   priority 100</span></span><br><span class="line"><span class="string">   unicast_src_ip 192.168.100.105</span></span><br><span class="line"><span class="string">   unicast_peer &#123;</span></span><br><span class="line"><span class="string">     192.168.100.106</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   # 虚IP地址</span></span><br><span class="line"><span class="string">   virtual_ipaddress &#123;</span></span><br><span class="line"><span class="string">     192.168.100.104/24</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   track_script &#123;</span></span><br><span class="line"><span class="string">     check_apiserver</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>以下是检查api_server的脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/keepalived/check_apiserver_vip.sh</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">killall -0 haproxy</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">   http_code=$(curl -k -s -o /dev/null -w <span class="string">&quot;%&#123;http_code&#125;\n&quot;</span> https://127.0.0.1:6443)</span><br><span class="line">   <span class="keyword">if</span> [ <span class="variable">$http_code</span> == 403 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">exit</span> 0</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="部署master和node">部署master和node</h3><p>在101主机上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config init-k8s.yml --upload-certs</span><br></pre></td></tr></table></figure><p>没有问题的话会安装成功</p><p><img data-src="image-20231005000618131.png" /></p><p>在102、103master主机上执行上面第一行的命令，在剩下的worker节点执行下面的命令</p><table><colgroup><col style="width: 25%" /><col style="width: 75%" /></colgroup><thead><tr class="header"><th>主机</th><th>命令</th></tr></thead><tbody><tr class="odd"><td>102、103等master节点</td><td>kubeadm join 192.168.100.104:6443 --token xxx--discovery-token-ca-cert-hash xxx --control-plane --certificate-keyxxx</td></tr><tr class="even"><td>其他worker节点</td><td>kubeadm join 192.168.100.104:6443 --token xxx--discovery-token-ca-cert-hash xxx</td></tr></tbody></table><p>执行成功后，在任一master节点下执行<code>kubectl get nodes</code>，会显示下面的节点状态</p><p><img data-src="image-20231005003115986.png" /></p><p>此时节点状态仍然是<strong>NotReady</strong>，通过kubelet日志可以看到网络插件尚未安装。</p><p><img data-src="image-20231005003336911.png" /></p><h3 id="部署网络插件">部署网络插件</h3><p>本文使用flannel作为K8s的网络插件：Flannel是一种简单易用的方法来配置专为 Kubernetes 设计的第 3 层网络结构。</p><p>refer：https://github.com/flannel-io/flannel</p><p>资源清单可以参考：https://github.com/flannel-io/flannel/blob/master/Documentation/kube-flannel.yml</p><p>主要需要修改image镜像地址，镜像可以参考：https://sci.nju.edu.cn/9e/05/c30384a564741/page.htm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>等待kube-flannel中pod状态变为running即可</p><p><img data-src="image-20231005004551653.png" /></p><p>此时集群状态正常，安装完毕</p><p><img data-src="image-20231005004647172.png" /></p><h2 id="高可用检查">高可用检查</h2><h3 id="安装etcdctl">安装etcdctl</h3><p>refer：https://github.com/etcd-io/etcd/releases/tag/v3.5.9</p><p>添加环境变量实现自动别名操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim .bash_profile</span></span><br><span class="line"><span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line"><span class="built_in">alias</span> etcdctl=<span class="string">&#x27;etcdctl --endpoints=https://192.168.100.101:2379,https://192.168.100.102:2379,https://192.168.100.103:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key</span></span><br></pre></td></tr></table></figure><p>查看etcd endpoint状态</p><p><img data-src="image-20231005010150190.png" /></p><p>查看etcd endpoint健康</p><p><img data-src="image-20231005010229342.png" /></p><h3 id="未完待续">未完待续。。。</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用keepalived+haproxy创建高可用集群，文中主要来源与作者在工作中的一些实际操作，本文仅供作者自己记录和读者参考。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;高可用K8s集群&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://blog.fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>rockylinux常见操作</title>
    <link href="https://blog.fly97.cn/p/how-to-use-rockylinux/"/>
    <id>https://blog.fly97.cn/p/how-to-use-rockylinux/</id>
    <published>2023-09-16T07:42:00.000Z</published>
    <updated>2023-09-16T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词：RockyLinux 9</strong></p><span id="more"></span><h2 id="下载地址">下载地址</h2><p><a href="https://mirrors.nju.edu.cn/rocky/9/isos/">RockyLinux9</a></p><p><a href="https://mirrors.nju.edu.cn/rocky/8/isos/">RockyLinux8</a></p><p>这里一般下载minimal镜像，免去设置镜像源的烦恼。</p><p><img data-src="image-20230916195636348.png" /></p><h2 id="换源">换源</h2><p>参考：<ahref="https://mirror.nju.edu.cn/mirrorz-help/rocky/?mirror=NJU">RockyLinux 软件仓库镜像使用帮助 - MirrorZ Help (nju.edu.cn)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -e <span class="string">&#x27;s|^mirrorlist=|#mirrorlist=|g&#x27;</span> \</span><br><span class="line">         -e <span class="string">&#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirror.nju.edu.cn/rocky|g&#x27;</span> \</span><br><span class="line">         -i.bak \</span><br><span class="line">         /etc/yum.repos.d/rocky-extras.repo \</span><br><span class="line">         /etc/yum.repos.d/rocky.repo</span><br></pre></td></tr></table></figure><h2 id="网络管理">网络管理</h2><p>默认的管理工具是NetworkManager，附带有nmcli网络管理工具</p><p>配置命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmcli c add <span class="built_in">type</span> ethernet con-name enp6s18 ifname enp6s18 \</span><br><span class="line">ipv4.addr 192.168.8.211/24 ipv4.gateway 192.168.8.1 ipv4.method manual \</span><br><span class="line">ipv4.dns 192.168.8.1</span><br></pre></td></tr></table></figure><p>配置成功后会自动生成配置文件，配置文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/NetworkManager/system-connections</span></span><br><span class="line">[connection]</span><br><span class="line"><span class="built_in">id</span>=enp6s18</span><br><span class="line">uuid=b944afc1-e640-4b36-ad04-c7342189565f</span><br><span class="line"><span class="built_in">type</span>=ethernet</span><br><span class="line">interface-name=enp6s18</span><br><span class="line"></span><br><span class="line">[ethernet]</span><br><span class="line"></span><br><span class="line">[ipv4]</span><br><span class="line">address1=192.168.8.210/24,192.168.8.1</span><br><span class="line">dns=192.168.8.1;</span><br><span class="line">method=manual</span><br><span class="line"></span><br><span class="line">[ipv6]</span><br><span class="line">addr-gen-mode=default</span><br><span class="line">method=auto</span><br><span class="line"></span><br><span class="line">[proxy]</span><br></pre></td></tr></table></figure><p>修改完成后，直接使用nmcli c up即可启动网卡。</p><p>rocklinux8一般使用ifup/ifdown进行管理，配置文件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/sysconfig/network-scripts</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=ens3</span><br><span class="line">UUID=badebd4f-dbf2-4d42-8e49-0e3839499e59</span><br><span class="line">DEVICE=ens3</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>修改完成后，直接使用ifup ifcfg-网卡名即可启动网卡。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;关键词：RockyLinux 9&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
    <category term="rockylinux" scheme="https://blog.fly97.cn/tags/rockylinux/"/>
    
  </entry>
  
  <entry>
    <title>运维自动化实战（一）Linux Shell 自动交互</title>
    <link href="https://blog.fly97.cn/p/linux-shell-automatic-interaction/"/>
    <id>https://blog.fly97.cn/p/linux-shell-automatic-interaction/</id>
    <published>2023-08-27T06:00:00.000Z</published>
    <updated>2023-08-27T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍自动化输入脚本的方式。</p><p>关键词：<strong>shell</strong></p><span id="more"></span><h2 id="bash脚本输入方式">bash脚本输入方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;ServiceName\nOperator\nPassword&quot;</span> | upx login</span><br></pre></td></tr></table></figure><p>输入每行文字后输入一个回车，某些情况不适用。</p><h2 id="expect脚本">Expect脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash    </span></span><br><span class="line">/usr/bin/expect &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">set timeout 50</span></span><br><span class="line"><span class="string">spawn upx login </span></span><br><span class="line"><span class="string">expect &quot;*ServiceName*&quot; &#123;send &quot;ServiceName\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;*Operator*&quot; &#123;send &quot;Operator\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect &quot;*Password*&quot; &#123;send &quot;Password\r&quot;&#125;</span></span><br><span class="line"><span class="string">expect eof</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>expect 提示的字段是捕获输出，然后在后面跟着输入。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍自动化输入脚本的方式。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;shell&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="devops" scheme="https://blog.fly97.cn/tags/devops/"/>
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>K8s核心能力</title>
    <link href="https://blog.fly97.cn/p/learn-K8s/"/>
    <id>https://blog.fly97.cn/p/learn-K8s/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是K8s的学习。</p><p><strong>关键词：K8s</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是K8s的学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：K8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>红帽认证RHCSA</title>
    <link href="https://blog.fly97.cn/p/learn-Red-Hat-certification-rhcsa/"/>
    <id>https://blog.fly97.cn/p/learn-Red-Hat-certification-rhcsa/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是红帽认证RHCSA。</p><p><strong>关键词：RHCSA</strong></p><span id="more"></span><h1 id="红帽认证rhcsa">红帽认证RHCSA</h1><h2 id="命令行概述格式快捷键">命令行概述、格式、快捷键</h2><figure><img data-src="image-20230802155436739.png" alt="image-20230802155436739" /><figcaption aria-hidden="true">image-20230802155436739</figcaption></figure><figure><img data-src="image-20230802155744136.png" alt="image-20230802155744136" /><figcaption aria-hidden="true">image-20230802155744136</figcaption></figure><figure><img data-src="image-20230802160003170.png" alt="image-20230802160003170" /><figcaption aria-hidden="true">image-20230802160003170</figcaption></figure><figure><img data-src="image-20230802160320052.png" alt="image-20230802160320052" /><figcaption aria-hidden="true">image-20230802160320052</figcaption></figure><h2 id="常用的命令">常用的命令</h2><figure><img data-src="image-20230802160459480.png" alt="image-20230802160459480" /><figcaption aria-hidden="true">image-20230802160459480</figcaption></figure><p>注意：su 切换到别的用户时建议使用 - 来模拟登录过程。</p><figure><img data-src="image-20230802165404943.png" alt="image-20230802165404943" /><figcaption aria-hidden="true">image-20230802165404943</figcaption></figure><p>mv 移动文件、重命名文件</p><h2 id="获取命令的帮助man">获取命令的帮助man</h2><figure><img data-src="image-20230802171358699.png" alt="image-20230802171358699" /><figcaption aria-hidden="true">image-20230802171358699</figcaption></figure><h2 id="vivim编辑器">vi/vim编辑器</h2><p><img data-src="image-20230802172136098.png" /></p><p>++ yum -y install vim-enhanced 安装增强版的vim</p><h2 id="systemctl服务控制">systemctl服务控制</h2><figure><img data-src="image-20230803092228191.png" alt="image-20230803092228191" /><figcaption aria-hidden="true">image-20230803092228191</figcaption></figure><p>++ 重启后生效</p><p>++ setenforce 0|1立即变成宽松模式|强制模式：只能在宽松模式和强制模式之间切换，不能在关闭和打开之前切换。</p><p>++ getenforce：获取selinux状态。</p><h2 id="网络控制">网络控制</h2><p>使用nmtul设置网络。</p><figure><img data-src="image-20230803100131748.png" alt="image-20230803100131748" /><figcaption aria-hidden="true">image-20230803100131748</figcaption></figure><figure><img data-src="image-20230803101248194.png" alt="image-20230803101248194" /><figcaption aria-hidden="true">image-20230803101248194</figcaption></figure><p>hostname查看主机名，hostnamectl设置主机名</p><p>nmcli：networkManager Commander Interface</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  查看网卡设备状态</span></span><br><span class="line">nmcli device status</span><br><span class="line"><span class="comment">#  查看网络连接状态</span></span><br><span class="line">nmcli connection show</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置网络连接</span></span><br><span class="line">nmcli connection modify enp1s0 ipv4.method manal ipv4.addresses 192.168.8.121/24   ipv4.gateway 192.168.8.1 ipv4.dns 192.168.8.1 connection.autoconnect <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 激活网卡连接</span></span><br><span class="line">nmcli connection up enp1s0</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230803102043041.png" alt="image-20230803102043041" /><figcaption aria-hidden="true">image-20230803102043041</figcaption></figure><figure><img data-src="image-20230803103614245.png" alt="image-20230803103614245" /><figcaption aria-hidden="true">image-20230803103614245</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[BaseOSUSTC]</span><br><span class="line">name = BaseOSUSTC</span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/centos-vault/8.5.2111/BaseOS/x86_64/os/media.repo</span><br><span class="line">gpgcheck = 0</span><br><span class="line"></span><br><span class="line">[AppStreamUSTC]</span><br><span class="line">name = AppStremUSTC</span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/centos-vault/8.5.2111/AppStream/x86_64/os/media.repo</span><br><span class="line">gpgcheck = 0</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230803140654846.png" alt="image-20230803140654846" /><figcaption aria-hidden="true">image-20230803140654846</figcaption></figure><figure><img data-src="image-20230803141927636.png" alt="image-20230803141927636" /><figcaption aria-hidden="true">image-20230803141927636</figcaption></figure><h2 id="调试服务">调试服务</h2><figure><img data-src="image-20230803145531367.png" alt="image-20230803145531367" /><figcaption aria-hidden="true">image-20230803145531367</figcaption></figure><h2 id="selinux调试">SELinux调试</h2><figure><img data-src="image-20230803150645826.png" alt="image-20230803150645826" /><figcaption aria-hidden="true">image-20230803150645826</figcaption></figure><figure><img data-src="image-20230803152634490.png" alt="image-20230803152634490" /><figcaption aria-hidden="true">image-20230803152634490</figcaption></figure><figure><img data-src="image-20230803153321589.png" alt="image-20230803153321589" /><figcaption aria-hidden="true">image-20230803153321589</figcaption></figure><figure><img data-src="image-20230803154524540.png" alt="image-20230803154524540" /><figcaption aria-hidden="true">image-20230803154524540</figcaption></figure><figure><img data-src="image-20230803155912452.png" alt="image-20230803155912452" /><figcaption aria-hidden="true">image-20230803155912452</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 查看selinx状态</span></span><br><span class="line">getenforce </span><br></pre></td></tr></table></figure><h2 id="用户账户管理">用户账户管理</h2><figure><img data-src="image-20230803160112653.png" alt="image-20230803160112653" /><figcaption aria-hidden="true">image-20230803160112653</figcaption></figure><p><img data-src="image-20230804091730441.png" /></p><h2 id="归属权限以及acl">归属、权限以及ACL</h2><figure><img data-src="image-20230804094922756.png" alt="image-20230804094922756" /><figcaption aria-hidden="true">image-20230804094922756</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置某文件/文件夹的属主权限</span></span><br><span class="line"><span class="built_in">chmod</span> u=rx /xxx </span><br><span class="line"><span class="comment"># 设置某文件/文件夹的属组权限</span></span><br><span class="line"><span class="built_in">chmod</span> g+rx /xxx </span><br><span class="line"><span class="comment"># 设置某文件/文件夹的其他人权限</span></span><br><span class="line"><span class="built_in">chmod</span> o-rx /xxx </span><br></pre></td></tr></table></figure><figure><img data-src="image-20230804110002258.png" alt="image-20230804110002258" /><figcaption aria-hidden="true">image-20230804110002258</figcaption></figure><figure><img data-src="image-20230804143107386.png" alt="image-20230804143107386" /><figcaption aria-hidden="true">image-20230804143107386</figcaption></figure><p>使用访问控制列表设置zhangsan能读能写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m user:zhangsan:rw /var/tmp/hosts</span><br></pre></td></tr></table></figure><p>使用访问控制列表设置lisi不能读不能写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m user:lisi:--- /var/tmp/hosts</span><br></pre></td></tr></table></figure><h3 id="附加权限">附加权限</h3><p><img data-src="image-20230804110835797.png" /></p><h2 id="ntp同步">NTP同步</h2><figure><img data-src="image-20230804151425466.png" alt="image-20230804151425466" /><figcaption aria-hidden="true">image-20230804151425466</figcaption></figure><figure><img data-src="image-20230804154830315.png" alt="image-20230804154830315" /><figcaption aria-hidden="true">image-20230804154830315</figcaption></figure><h2 id="查找文件">查找文件</h2><figure><img data-src="image-20230804160644701.png" alt="image-20230804160644701" /><figcaption aria-hidden="true">image-20230804160644701</figcaption></figure><p>查找文件大于5KB，文件名是以file为开头，同时需要使用ls-lh查看大小的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /etc -size +5k -name <span class="string">&quot;file*&quot;</span> -<span class="built_in">exec</span> <span class="built_in">ls</span> -lh &#123;&#125; \;</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230804161536008.png" alt="image-20230804161536008" /><figcaption aria-hidden="true">image-20230804161536008</figcaption></figure><h2 id="查找字符串">查找字符串</h2><figure><img data-src="image-20230804164614308.png" alt="image-20230804164614308" /><figcaption aria-hidden="true">image-20230804164614308</figcaption></figure><figure><img data-src="image-20230804164653597.png" alt="image-20230804164653597" /><figcaption aria-hidden="true">image-20230804164653597</figcaption></figure><p>题目：</p><figure><img data-src="image-20230804164830102.png" alt="image-20230804164830102" /><figcaption aria-hidden="true">image-20230804164830102</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep sbin /etc/man_db.conf &gt; /root/out.txt</span><br></pre></td></tr></table></figure><h2 id="归档和压缩">归档和压缩</h2><p><img data-src="image-20230804165655396.png" /></p><h2 id="配置autofs">配置autoFS</h2><figure><img data-src="image-20230807094123859.png" alt="image-20230807094123859" /><figcaption aria-hidden="true">image-20230807094123859</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载远程资源</span></span><br><span class="line">mount 10.10.10.1:/home/wf09 /mnt</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230807100925339.png" alt="image-20230807100925339" /><figcaption aria-hidden="true">image-20230807100925339</figcaption></figure><figure><img data-src="image-20230807112248031.png" alt="image-20230807112248031" /><figcaption aria-hidden="true">image-20230807112248031</figcaption></figure><figure><img data-src="image-20230807112546761.png" alt="image-20230807112546761" /><figcaption aria-hidden="true">image-20230807112546761</figcaption></figure><h2 id="设置root密码">设置ROOT密码</h2><figure><img data-src="image-20230807144542841.png" alt="image-20230807144542841" /><figcaption aria-hidden="true">image-20230807144542841</figcaption></figure><figure><img data-src="image-20230807145422169.png" alt="image-20230807145422169" /><figcaption aria-hidden="true">image-20230807145422169</figcaption></figure><h2 id="配置网络">配置网络</h2><p><img data-src="image-20230807150656550.png" /></p><h2 id="磁盘分区">磁盘分区</h2><figure><img data-src="image-20230807151801644.png" alt="image-20230807151801644" /><figcaption aria-hidden="true">image-20230807151801644</figcaption></figure><figure><img data-src="image-20230807153835938.png" alt="image-20230807153835938" /><figcaption aria-hidden="true">image-20230807153835938</figcaption></figure><h2 id="逻辑卷">逻辑卷</h2><figure><img data-src="image-20230807164615687.png" alt="image-20230807164615687" /><figcaption aria-hidden="true">image-20230807164615687</figcaption></figure><figure><img data-src="image-20230808094037624.png" alt="image-20230808094037624" /><figcaption aria-hidden="true">image-20230808094037624</figcaption></figure><figure><img data-src="image-20230808094900139.png" alt="image-20230808094900139" /><figcaption aria-hidden="true">image-20230808094900139</figcaption></figure><figure><img data-src="image-20230808101315117.png" alt="image-20230808101315117" /><figcaption aria-hidden="true">image-20230808101315117</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建卷组并指定扩展块</span></span><br><span class="line">vgcreate -s 16M myvg /dev/nvme0n1p3</span><br><span class="line"><span class="comment"># 创建逻辑卷并设置大小为50个扩展单元</span></span><br><span class="line">lvcreate -n mylv -L 800M myvg</span><br><span class="line"><span class="comment"># 格式化成vfat格式</span></span><br><span class="line">mkfs.vfat /dev/myvg/mylv</span><br><span class="line"><span class="comment"># 设置自动挂载</span></span><br><span class="line"><span class="comment"># vim /etc/fstab</span></span><br><span class="line">/dev/myvg/mylv    /mnt/mylv  vfat defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="vdo虚拟卷">VDO虚拟卷</h2><figure><img data-src="image-20230808102351816.png" alt="image-20230808102351816" /><figcaption aria-hidden="true">image-20230808102351816</figcaption></figure><figure><img data-src="image-20230808103639259.png" alt="image-20230808103639259" /><figcaption aria-hidden="true">image-20230808103639259</figcaption></figure><blockquote><p>总结成一句话：用实际容量小的物理磁盘创建容量大的逻辑磁盘</p></blockquote><p><img data-src="image-20230808104325531.png"alt="image-20230808104325531" /> <img data-src="image-20230808105540492.png"alt="image-20230808105540492" /></p><figure><img data-src="image-20230808111305131.png" alt="image-20230808111305131" /><figcaption aria-hidden="true">image-20230808111305131</figcaption></figure><figure><img data-src="image-20230808111331418.png" alt="image-20230808111331418" /><figcaption aria-hidden="true">image-20230808111331418</figcaption></figure><figure><img data-src="image-20230808111345237.png" alt="image-20230808111345237" /><figcaption aria-hidden="true">image-20230808111345237</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是红帽认证RHCSA。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：RHCSA&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT x86各个版本的区别</title>
    <link href="https://blog.fly97.cn/p/the-difference-between-each-version-of-openwrt(x86)/"/>
    <id>https://blog.fly97.cn/p/the-difference-between-each-version-of-openwrt(x86)/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是OpenWRTX86各个架构的区别。</p><p><strong>关键词： OpenWRT x86各个版本的区别</strong></p><span id="more"></span><p>简单介绍 <ahref="https://itlangzi.com/jump.html?https:%2F%2Fopenwrt.org%2F">openwrt</a><code>x86</code> 平台各个版本的区别</p><p>x86 OpenWrt有多个目标，其中一些针对旧的或特定的硬件，它们的构建默认值可能不适合现代x86 硬件：</p><ul><li><strong>64</strong>适用于现代 PC 硬件（从 2007年左右开始的任何硬件），它是为 64 位功能的计算机构建的，并且支持现代 CPU功能。除非您有充分的理由不这样做，否则请选择此选项。</li><li><strong>Generic</strong>适用于仅 32 位的硬件（旧硬件或某些 Atom处理器），应该是<strong>i686</strong> Linux 架构，可在 Pentium 4及更高版本上工作。仅当您的硬件无法运行 64 位版本时才使用此选项。</li><li><strong>Legacy</strong>是针对非常老的PC硬件，PentiumMMX，在Linux架构中被称为<strong>i586的支持。</strong>它将错过您在现代硬件上想要/需要的许多功能，例如多核支持和对4GB 以上 RAM的支持，但实际上可以在古老的硬件上运行，而其他版本则不能。</li><li><strong>Geode</strong>是为 Geode SoC定制的传统目标，它仍在许多（老化的）网络设备中使用，例如 PCEngines 的旧Alix 板。</li></ul><h1 id="ext4-combined-efi.img.gz">1. ext4-combined-efi.img.gz</h1><ul><li>使用可读写的<code>ext4</code>分区，没有<code>squashfs</code>的只读文件系统</li><li>根分区可以使用更大的驱动器(e.g. SSD/SATA/mSATA/SATADOM/NVMe/etc)进行扩展</li><li>没有故障安全模式和出厂重置等功能，这些功能需要<code>squashfs</code>的支持</li><li>自带引导分区和根分区以及主引导记录 (MBR) 区域以及更新的 GRUB2</li><li>支持efi引导</li></ul><h1 id="ext4-combined.img.gz">2. ext4-combined.img.gz</h1><ul><li><ahref="https://itlangzi.com/s/FCZV11.html#1-ext4-combined-efiimggz">同1</a>，但不支持efi引导</li></ul><h1 id="ext4-rootfs.img.gz">3. ext4-rootfs.img.gz</h1><ul><li>只有根分区的镜像，重新安装不会覆盖引导分区和主引导记录 (MBR)，</li><li>由于不带引导分区，首次安装需要自行使用<code>grub</code>或者<code>syslinux</code>来引导</li><li>使用<code>ext4</code>分区</li></ul><h1 id="kernel.bin">4. kernel.bin</h1><ul><li>独立的内核</li></ul><h1 id="squashfs-combined-efi.img.gz">5.squashfs-combined-efi.img.gz</h1><ul><li><code>squashfs</code>是个只读的文件系统,相当于<code>windows</code>的<code>ghost</code>,支持故障安全模式和出厂重置等功能</li><li>包含一个只读的根文件系统和一个存储设置以及安装软件可读写的分区</li><li>组合模式，只有不到<code>100MB</code>的空间来存储额外的包和配置，并且无法扩展根分区</li><li>支持efi引导</li></ul><h1 id="squashfs-combined.img.gz">6. squashfs-combined.img.gz</h1><ul><li><ahref="https://itlangzi.com/s/FCZV11.html#5-squashfs-combined-efiimggz">同5</a>，但不支持efi引导</li></ul><h1 id="squashfs-rootfs.img.gz">7. squashfs-rootfs.img.gz</h1><ul><li><不知道是干啥的></li></ul><h1 id="rootfs.tar.gz">8. rootfs.tar.gz</h1><ul><li>所有的文件都在根目录下</li><li>不带引导，需要自行使用<code>grub</code>或者<code>syslinux</code>来引导</li></ul><p><strong>建议:</strong></p><ul><li>需要扩展分区使用:<code>combined-ext4.img.gz</code>和<code>ext4-combined-efi.img.gz</code></li><li>不需要扩展分区使用:<code>squashfs-combined.img.gz</code>和<code>squashfs-combined-efi.img.gz</code></li></ul><p><strong>参考:</strong></p><ol type="1"><li><ahref="">https://openwrt.org/docs/guide-user/installation/openwrt_x86</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是OpenWRT
X86各个架构的区别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词： OpenWRT x86各个版本的区别&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
    <category term="OpenWRT" scheme="https://blog.fly97.cn/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>搭建zabbix监控系统</title>
    <link href="https://blog.fly97.cn/p/install-zabbix/"/>
    <id>https://blog.fly97.cn/p/install-zabbix/</id>
    <published>2023-08-02T07:42:00.000Z</published>
    <updated>2023-08-02T07:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是zabbix监控系统的学习。</p><p><strong>关键词：zabbix</strong></p><span id="more"></span><h2 id="zabbix架构">zabbix架构</h2><p><img data-src="使用docker搭建zabbix监控系统/image-20230811085633556.png" /></p><h2 id="镜像种类">镜像种类</h2><table><colgroup><col style="width: 9%" /><col style="width: 45%" /><col style="width: 45%" /></colgroup><thead><tr class="header"><th>说明</th><th>镜像</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>Zabbix agent</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-agent/">zabbix/zabbix-agent</a></td><td></td></tr><tr class="even"><td>Zabbix server</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-server-mysql/">zabbix/zabbix-server-mysql</a></td><td>支持 MySQL 数据库的 Zabbix server</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-server-pgsql/">zabbix/zabbix-server-pgsql</a></td><td>支持 PostgreSQL 数据库的 Zabbix server</td></tr><tr class="even"><td>Zabbix web UI</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-apache-mysql/">zabbix/zabbix-web-apache-mysql</a></td><td>基于Apache2 Web服务器 的 Zabbix web 界面，支持 MySQL 数据库</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-apache-pgsql/">zabbix/zabbix-web-apache-pgsql</a></td><td>基于Apache2 Web服务器 的 Zabbix web 界面，支持 PostgreSQL数据库</td></tr><tr class="even"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-nginx-mysql/">zabbix/zabbix-web-nginx-mysql</a></td><td>基于Nginx Web服务器 的 Zabbix web 界面，支持 MySQL 数据库</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-web-nginx-pgsql/">zabbix/zabbix-web-nginx-pgsql</a></td><td>基于Nginx Web服务器 的 Zabbix web 界面，支持 PostgreSQL 数据库</td></tr><tr class="even"><td>Zabbix proxy</td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/">zabbix/zabbix-proxy-sqlite3</a></td><td>Zabbix proxy ，支持 SQLite3 数据库（Zabbixproxy是使得Zabbix支持分布式监控的扩展的组件）</td></tr><tr class="odd"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-proxy-mysql/">zabbix/zabbix-proxy-mysql</a></td><td>Zabbix proxy， 支持 MySQL 数据库</td></tr><tr class="even"><td></td><td><ahref="https://hub.docker.com/r/zabbix/zabbix-java-gateway/">zabbix/zabbix-java-gateway</a></td><td>Zabbix Java 网关（ZabbixJava网关是用于与Java应用程序中集成并监控其性能和状态，可以充当Zabbix服务器与Java应用程序之间的中间代理）</td></tr></tbody></table><h2 id="docker-compose.yml文件">docker-compose.yml文件</h2><p>根据架构图，zabbix主要有以下组件：</p><ul><li>zabbixserver服务端，负责处理由agent或者proxy发送来的数据，并将这部分数据写入数据库。与这部分相关的docker配置文件如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-server-mysql</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="comment">#- ./zabbix:/etc/zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./alertscripts:/usr/lib/zabbix/alertscripts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY_ENABLE=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAYPORT=10052</span></span><br></pre></td></tr></table></figure><p>主要设置以下几个地方：</p><ol type="1"><li>DB_SERVER_HOST：这部分是设置后端数据库的地址，如果两者在同一台机器上直接使用localhost即可。</li><li>MYSQL_DATABASE：数据库名称，默认是zabbix。</li><li>MYSQL_USER：zabbix数据库的用户名，默认也是zabbix。</li><li>MYSQL_PASSWORD：zabbix数据库的密码，默认也是zabbix。</li><li>MYSQL_ROOT_PASSWORD：数据库的root密码</li><li>ZBX_JAVAGATEWAY：java gateway的地址，这里以容器的名称代替。</li><li>ZBX_JAVAGATEWAY_ENABLE：设置是否启用java gateway。</li><li>ZBX_JAVAGATEWAYPORT：java gateway的端口。</li></ol><blockquote><p>配置文件目录对应/etc/zabbix/zabbix_server.conf</p></blockquote><ul><li>zabbix 需要连接的mysql数据库</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql:debian</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysqld</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--collation-server=utf8_bin</span></span><br></pre></td></tr></table></figure><p>这部分是zabbix连接的mysql数据库，需要注意的是mysql的版本对于某个特定版本可能会有要求，这个可以在日志中查看到对应的报错。</p><ul><li><p>zabbix的javagateway：可以通过JAVA程序的JMX特性连接到JAVA应用程序，进而查看JAVA应用程序的性能。这部分没有默认设置。</p><blockquote><p>该应用程序的默认端口是10052，这个端口和设置的JMX端口不同，一个是客户端（应用程序）的端口（JMX端口），另外一个相当于是代理的gateway端口（默认工作在10052）</p></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-java-gateway:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-java-gateway</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><ul><li>zabbix的前端展示界面，一般是php+nginx的环境。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-web-nginx-mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-web-nginx-mysql</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./Song.ttf:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf</span></span><br></pre></td></tr></table></figure><blockquote><p>这里注意区分DB_SERVER_HOST和ZBX_SERVER_HOST的区别，一个是连接后端数据库的端口，另一个是连接zabbix服务端的端口。</p><p>此外容器的默认字体无法正常显示中文，这里使用宋体进行替换。</p></blockquote><ul><li>zabbix的代理客户端：负责监控当前主机的组件,配合自定义的脚本可以实现自定义监控.</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zabbix-agent:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">zabbix/zabbix-agent</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_HOSTNAME=Zabbix</span> <span class="string">server</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ZBX_SERVER_PORT=10051</span></span><br><span class="line">  <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><blockquote><p>主要设置Zabbix Server的IP地址和Zabbix的端口地址</p></blockquote><p>总体zabbix配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zabbix-web-nginx-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-web-nginx-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./Song.ttf:/usr/share/zabbix/assets/fonts/DejaVuSans.ttf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-server-mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-mysql</span></span><br><span class="line">  <span class="attr">zabbix-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:debian</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysqld</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--character-set-server=utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collation-server=utf8_bin</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-java-gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-java-gateway</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-server-mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-server-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment">#- ./zabbix:/etc/zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./alertscripts:/usr/lib/zabbix/alertscripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=zabbix</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAY_ENABLE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_JAVAGATEWAYPORT=10052</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zabbix-mysql</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">  <span class="attr">zabbix-agent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zabbix/zabbix-agent</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_HOSTNAME=Zabbix</span> <span class="string">server</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_HOST=192.168.15.131</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ZBX_SERVER_PORT=10051</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是zabbix监控系统的学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：zabbix&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="zabbix" scheme="https://blog.fly97.cn/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>鸟哥的私房菜：基础学习篇</title>
    <link href="https://blog.fly97.cn/p/the-basics-of-learning-private-kitchen-in-linux/"/>
    <id>https://blog.fly97.cn/p/the-basics-of-learning-private-kitchen-in-linux/</id>
    <published>2023-07-31T01:29:30.000Z</published>
    <updated>2023-07-31T01:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是鸟哥的私房菜</p><p><strong>关键词：鸟哥的私房菜</strong></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录在上班学（mo）习（yu）时的一些学习记录，本文主要记录的是鸟哥的私房菜&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：鸟哥的私房菜&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="https://blog.fly97.cn/tags/linux/"/>
    
    <category term="learning" scheme="https://blog.fly97.cn/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>使用Nginx进行反向代理</title>
    <link href="https://blog.fly97.cn/p/reverse-proxy-with-nginx/"/>
    <id>https://blog.fly97.cn/p/reverse-proxy-with-nginx/</id>
    <published>2023-05-30T02:03:00.000Z</published>
    <updated>2023-05-30T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用Nginx的流（stream）模块对指定网站进行反向代理。</p><p><strong>关键词：Nginx，反向代理</strong></p><span id="more"></span><p>Nginx的stream模块可以通过SNI（服务器名称指示）进行识别，可以设置根据不同的SNI名访问不同的upstream（上游）。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> proxy <span class="string">&#x27;<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$protocol</span> <span class="variable">$status</span> <span class="variable">$bytes_sent</span> <span class="variable">$bytes_received</span> &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;<span class="variable">$session_time</span> &quot;<span class="variable">$upstream_addr</span>&quot; &#x27;</span></span><br><span class="line">                 <span class="string">&#x27;&quot;<span class="variable">$upstream_bytes_sent</span>&quot; &quot;<span class="variable">$upstream_bytes_received</span>&quot; &quot;<span class="variable">$upstream_connect_time</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/tcp-access.log proxy;</span><br><span class="line">    <span class="attribute">open_log_file_cache</span> <span class="literal">off</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SNI识别，将一个个域名映射成一个配置名</span></span><br><span class="line">    <span class="attribute">map</span> <span class="variable">$ssl_preread_server_name</span> <span class="variable">$stream_map</span> &#123;</span><br><span class="line">        <span class="attribute">default</span> others;</span><br><span class="line">        cloudflare.<span class="attribute">com</span> cloudflare;</span><br><span class="line">        ocsp.pki.<span class="attribute">goog</span> google; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> cloudflare &#123;</span><br><span class="line">        <span class="attribute">server</span> cloudflare.com:<span class="number">443</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># upstream, 也就是流量上游的配置</span></span><br><span class="line">    <span class="section">upstream</span> google &#123;</span><br><span class="line">        <span class="attribute">server</span> ocsp.pki.goog:<span class="number">443</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">upstream</span> others &#123;</span><br><span class="line">        <span class="attribute">server</span> unix:/dev/shm/nginx.sock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># stream模块监听443端口，并进行端口复用</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> reuseport;</span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$stream_map</span>;</span><br><span class="line">        <span class="attribute">ssl_preread</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上图代码中，cloudflare作为配置名，对应cloudflare.com:443的流量上游；</p><p>google作为配置名，对应google.com:443的流量上游。</p><p>定义一个others配置，对应其余的SNI，也就是默认配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍如何使用Nginx的流（stream）模块对指定网站进行反向代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：Nginx，反向代理&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="nginx" scheme="https://blog.fly97.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Scaleway星辰Stardust纯IPv6服务器体验</title>
    <link href="https://blog.fly97.cn/p/stardust-VPS-in-scalway/"/>
    <id>https://blog.fly97.cn/p/stardust-VPS-in-scalway/</id>
    <published>2023-02-04T02:03:00.000Z</published>
    <updated>2023-02-04T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Stardust是法国云服务器厂商Scaleway下的一款的经济实例。官方介绍是这样的——“Atiny Instance so powerful and cost effective that we only release itonce a month.”</p><p>Stardust可以使用大小为5G的免费硬盘，并带有免费的IPv6地址，因此为了减免费用可以将收费提供的IPv4地址关掉，这样就可以免费使用流量了。</p><p>本文主要介绍如何开通Scaleway星辰Stardust服务器，并对其进行一些配置，以便其可以正常使用。</p><p>关键词：<strong>Stardust</strong></p><span id="more"></span><h2 id="开通">开通</h2><p>注册地址：<ahref="https://console.scaleway.com/">https://console.scaleway.com/</a></p><p>Stardust服务器仅仅在以下地区提供：</p><p><img data-src="image-20230204184827546.png" /></p><p>由于是限量供应，因此网站常常显示已售罄。</p><p><img data-src="image-20230204184955458.png" /></p><p>可以通过API进行开通，进而绕过此限制。</p><h3 id="安装api">安装API</h3><p>下载地址：<ahref="https://github.com/scaleway/scaleway-cli">https://github.com/scaleway/scaleway-cli</a></p><p>安装完毕以后需要创建一个token：<ahref="https://console.scaleway.com/project/credentials">https://console.scaleway.com/project/credentials</a>，创建完了以后如下图所示，需要记录<strong>SecretKey</strong>，该值显示一次。</p><p><img data-src="image-20230204185843449.png" /></p><p>在cmd或者shell控制台输入<code>scw init</code>，根据提示输入上文记录的SecretKey.</p><p><img data-src="image-20230204190323811.png" /></p><h3 id="使用api创建机器">使用API创建机器</h3><p>Github的readme提供了很详细的使用说明：<ahref="https://github.com/scaleway/scaleway-cli#reference-documentation">https://github.com/scaleway/scaleway-cli#reference-documentation</a></p><figure><img data-src="image-20230204190729175.png" alt="image-20230204190729175" /><figcaption aria-hidden="true">image-20230204190729175</figcaption></figure><p>我们这里需要使用的是<code>instance CLI</code>，点击CLI并选择<code>Ceate server</code>.</p><figure><img data-src="image-20230204190904436.png" alt="image-20230204190904436" /><figcaption aria-hidden="true">image-20230204190904436</figcaption></figure><p>根据下面表格中列的信息，设置输入的参数</p><figure><img data-src="image-20230204202125963.png" alt="image-20230204202125963" /><figcaption aria-hidden="true">image-20230204202125963</figcaption></figure><p>主要有以下几个参数需要设置</p><p>image：服务器镜像，这里使用debian_bullseye, 也可以使用其他</p><p>type：服务器类型， 这里使用STARDUST1-S</p><p>ip：这里使用none，即不创建IPv4地址</p><p>ipv6：这里使用true，创建ipv6地址</p><p>zone：地区，默认地区是法国</p><p>组合以上参数，在控制台执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure><img data-src="image-20230204203837121.png" alt="image-20230204203837121" /><figcaption aria-hidden="true">image-20230204203837121</figcaption></figure><p>说明以及创建成功。</p><p>登录后台，查看运行的机器。登录到后台以后发现无法开机器，后来才发现是创建机器的时候没有声明根存储，最小是10G.</p><figure><img data-src="image-20230204204234274.png" alt="image-20230204204234274" /><figcaption aria-hidden="true">image-20230204204234274</figcaption></figure><p>重新执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span> root-volume=b:10G</span><br></pre></td></tr></table></figure><p>还是无法开机。说明当前地域资源已用尽。于是切换到另外一个荷兰地区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scw instance server create image=debian_bullseye <span class="built_in">type</span>=STARDUST1-S ip=none ipv6=<span class="literal">true</span> root-volume=b:10G zone=nl-ams-1</span><br></pre></td></tr></table></figure><p>创建成功啦！</p><figure><img data-src="image-20230204205112843.png" alt="image-20230204205112843" /><figcaption aria-hidden="true">image-20230204205112843</figcaption></figure><h2 id="设置机器">设置机器</h2><p>注意：需要使用IPv6地址连接。</p><figure><img data-src="image-20230204205425980.png" alt="image-20230204205425980" /><figcaption aria-hidden="true">image-20230204205425980</figcaption></figure><h3 id="访问ipv4网络">访问IPv4网络</h3><p>由于常见的网络地址都是IPv4地址，因此需要赋予机器访问IPv4地址的能力。这里有两种方案。</p><h4 id="dns64和nat64">DNS64和NAT64</h4><p>使用DNS64和NAT64技术，具体可以参考这一篇文章：<ahref="https://developers.google.com/speed/public-dns/docs/dns64?hl=zh-cn">Google公共 DNS64 | Public DNS | Google Developers</a></p><p>简单说就是请求DNS时，将IPv4地址嵌入在IPv6地址里，此时需要有一个支持DNS64服务的DNS。因此只需要将DNS地址更改为支持DNS64服务的地址，就可以实现访问IPv4的网站。</p><p>经过我的测试，谷歌的DNS64dns在这一款服务器上无法使用，可能是和网络有关。给出几个可以使用的DNS64服务的地址。</p><table><colgroup><col style="width: 17%" /><col style="width: 20%" /><col style="width: 27%" /><col style="width: 34%" /></colgroup><thead><tr class="header"><th>提供商</th><th>国家/城市</th><th>DNS64服务</th><th>NAT64前缀</th></tr></thead><tbody><tr class="odd"><td>Kasper Dupont</td><td>德国/纽伦堡</td><td>2a01:4f8:c2c:123f::1</td><td>2a01:4f8:c2c:123f:64::/96</td></tr><tr class="even"><td>Kasper Dupont</td><td>英国/伦敦</td><td>2a00:1098:2c::1</td><td>2a00:1098:2c::/96</td></tr><tr class="odd"><td>Kasper Dupont</td><td>荷兰/阿姆斯特丹</td><td>2a00:1098:2b::1</td><td>2a00:1098:2b::/96</td></tr></tbody></table><p>将DNS更改为以上的DNS服务即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/resolv.conf </span><br><span class="line"><span class="comment">## nameserver 2a00:1098:2b::1</span></span><br></pre></td></tr></table></figure><p>设置完毕以后发现可以访问github.com了。</p><p><img data-src="image-20230205141017958.png" /></p><p>但是这种方式也有一定的问题，就是无法访问纯ipv4地址，下面来看第二种方案。</p><h4 id="cloudflare-warp">Cloudflare warp</h4><p>warp是Cloudflare基于wireguard提供的一款免费软件，可以通过其经过ipv6地址访问ipv4的网站，也可以访问纯ipv4的地址。</p><p>可以使用一键脚本，已经开源在GitHub上：<ahref="https://github.com/fscarmen/warp">fscarmen/warp: WARP one-clickscript. Add an IPv4, IPv6 or dual-stack CloudFlare WARP networkinterface and Socks5 proxy for VPS. 一键脚本 (github.com)</a></p><p>根据脚本的提示操作即可。</p><p><img data-src="image-20230205152823725.png" /></p><p>实测这种方式最方便。</p><h2 id="性能测试">性能测试</h2><p>安装经典的<code>bench.ch</code>脚本测试以下服务器的性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><figure><img data-src="image-20230205153728307.png" alt="image-20230205153728307" /><figcaption aria-hidden="true">image-20230205153728307</figcaption></figure><p>相比于<strong>国内某些厂商</strong>提供的服务器，性能还是非常不错的。</p><h2 id="账单">账单</h2><p>这款机器如果只开IPv6，系统盘设置为最小10G，则每个月只需要不到0.5欧元。还不到人民币五块钱。如果你那里IPv6连接比较好，可以试试这一款服务器。</p><p><img data-src="image-20230205154205719.png" /></p><p>全文完。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Stardust是法国云服务器厂商Scaleway下的一款的经济实例。官方介绍是这样的——“A
tiny Instance so powerful and cost effective that we only release it
once a month.”&lt;/p&gt;
&lt;p&gt;Stardust可以使用大小为5G的免费硬盘，并带有免费的IPv6地址，因此为了减免费用可以将收费提供的IPv4地址关掉，这样就可以免费使用流量了。&lt;/p&gt;
&lt;p&gt;本文主要介绍如何开通Scaleway星辰Stardust服务器，并对其进行一些配置，以便其可以正常使用。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;Stardust&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://blog.fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go操作数据库(二)</title>
    <link href="https://blog.fly97.cn/p/go-with-database-2/"/>
    <id>https://blog.fly97.cn/p/go-with-database-2/</id>
    <published>2023-01-31T09:26:00.000Z</published>
    <updated>2023-01-31T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。</p><p>关键词：<strong>golang</strong></p><p>在项目中我们通常会使用<code>database/sql</code>连接MySQL数据库。本文结束<code>sqlx</code>实现批量插入数据的例子，介绍了<code>sqlx</code>中可能被忽略的<code>sqlx.In</code>和<code>DB.NameExec</code>方法。</p><span id="more"></span><h2 id="sqlx介绍">sqlx介绍</h2><p><code>sqlx</code>被分为是<code>database/sql</code>的超集，在<code>database/sql</code>的基础上提供了一组扩展，而这组扩展处理大家常用来查询的<code>Get(dest interface&#123;&#125;, ...) error</code>和<code>Select(dest interface&#123;&#125;, ...) error</code>之外，还有很多强大的功能。</p><p>仓库地址：<ahref="github.com/jmoiron/sqlx">github.com/jmoiron/sqlx</a></p><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure><h2 id="基本使用">基本使用</h2><h3 id="连接数据库">连接数据库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>)&#123;</span><br><span class="line">    dsn := <span class="string">&quot;user:password@tcp(xxx.aws.us-west-1.rds.amazonaws.com:3306)/mt_subtitle_table?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">    <span class="comment">//也可以使用MustConnect，连接不成功就panic</span></span><br><span class="line">    db, err = sqlx.Connect(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;connect DB failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    db.SetMaxOpenConns(<span class="number">20</span>)              <span class="comment">// 设置最大连接数</span></span><br><span class="line">    db.SetMaxIdleConns(<span class="number">10</span>)   <span class="comment">// 设置最大闲置连接数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询">查询</h3><h4 id="查询单行数据">查询单行数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    <span class="keyword">var</span> m Moive</span><br><span class="line">    err := db.Get(&amp;m, sqlStr, <span class="string">&quot;AAA-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;m: %v&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询多行数据">查询多行数据</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where actress= ?&quot;</span></span><br><span class="line">   <span class="keyword">var</span> movies []Movie</span><br><span class="line">    err := db.Select(&amp;moives, sqlStr, <span class="string">&quot;川岛芳子&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;query failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;movies: %#v&quot;</span>, movies)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入更新和删除">插入、更新和删除</h3><p>sqlx中的exec方法和原生sql中的exec使用基本一致：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values (?,?)&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;AAA-002&quot;</span>, <span class="string">&quot;仲川そら&quot;</span>,<span class="string">&quot;赤面羞恥&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    theID, err := ret.LastInsertId() <span class="comment">// 新插入数据的id</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get lastinsert ID failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;insert success, the id is %d&quot;</span>, theID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;update mt_subtitle_table set actress=? where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;仲川そら&quot;</span>, <span class="string">&quot;マジックミラ&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;update failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowAffected() <span class="comment">// 影响操作的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowAffected failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;update success, affected rows:%d&quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;delete from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;AAA-002&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;delete failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowsAffected() <span class="comment">// 影响操作的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowAffected failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;delete success, affected rows:%d&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="namedexec">NamedExec</h3><p><code>DB.NamedExec</code>方法用来绑定SQL语句与<strong>结构体或者map中的同名字段</strong>。</p><p>map同名字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertUserDemo</span><span class="params">()</span></span> (err <span class="type">error</span>)  &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) values(:name, :age)&quot;</span></span><br><span class="line">    _, err = db.NamedExec(sqlStr,</span><br><span class="line">                          <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">                              <span class="string">&quot;id&quot;</span>: <span class="string">&quot;ABC-001&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;actress&quot;</span>: <span class="string">&quot;川岛芳子&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;title&quot;</span>: <span class="string">&quot;上海回忆录&quot;</span></span><br><span class="line">                          &#125;)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>:字段名</code>的用法要记住。</li></ul><p>结构体同名字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    FirstName <span class="type">string</span> <span class="string">`db:&quot;first_name&quot;`</span></span><br><span class="line">    LastName  <span class="type">string</span> <span class="string">`db:&quot;last_name&quot;`</span></span><br><span class="line">    Email     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tx.NamedExec(<span class="string">&quot;INSERT INTO person (first_name, last_name, email) VALUES (:first_name, :last_name, :email)&quot;</span>, &amp;Person&#123;<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Citizen&quot;</span>, <span class="string">&quot;jane.citzen@example.com&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="namedquery">NamedQuery</h3><p>与<code>DB.NamedExec</code>同理，这里是支持查询</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nameQuery</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;SELECT * FROM mt_subtitle_table WHERE actress=:actress&quot;</span></span><br><span class="line">    <span class="comment">// 使用map做命名查询</span></span><br><span class="line">    rows, err := db.NamedQuery(sqlStr, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;actress&quot;</span>: <span class="string">&quot;川岛芳子&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;dn.NamedQuery failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Movie</span><br><span class="line">        err := rows.StructScan(&amp;m)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;movie: %v&quot;</span>, m)</span><br><span class="line">    &#125;</span><br><span class="line">    m1 := Movie&#123;</span><br><span class="line">        Id: <span class="string">&quot;SNAA-001&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用结构体命名查询，根据结构体的 db tag 进行映射</span></span><br><span class="line">    rows, err := db.NameQuery(sqlStr, m1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;db.NamedQuery failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close() </span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Moive</span><br><span class="line">        err != rows.StructScan(&amp;m)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err:%v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;movie: %#v&quot;</span>, m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务操作">事务操作</h3><p>对于事务操作，我们可以使用<code>sqlx</code>中提供的<code>db.Beginx()</code>和<code>tx.Exec()</code>方法。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transationDemo</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">    tx. err := db.Begin() <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Prinf(<span class="string">&quot;事务开始失败，错误:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// return之前执行</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line">            tx.Rollback()</span><br><span class="line">            <span class="built_in">panic</span>(p)      <span class="comment">// 回滚之后重新panic</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;rollback&quot;</span>)</span><br><span class="line">            tx.Rollback() <span class="comment">// 有错误，因此需要回滚</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            err = tx.Commit() <span class="comment">// 没有错误，提交事务</span></span><br><span class="line">            fmt.Println(<span class="string">&quot;commit&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    sqlStr1 := <span class="string">&quot;UPDATE mt_subtitle_table SET title=&#x27;艺妓回忆录&#x27; where id = ?&quot;</span></span><br><span class="line">    rs, err := tx.Exec(sqlStr1, <span class="string">&quot;ABC-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;sqlStr1执行失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr2 := <span class="string">&quot;UPDATE mt_subtitle_table SET title=&#x27;上海回忆录&#x27; where id = ?&quot;</span></span><br><span class="line">    rs, err := tx.Exec(sqlStr2, <span class="string">&quot;AAA-001&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    n, err = rs.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">&quot;sqlStr2执行失败&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="sqlx.in">sqlx.In</h2><p><code>sqlx.In</code>是<code>sqlx</code>提供的一个非常方便的函数。</p><h3 id="批量插入">批量插入</h3><p>这里创建一个表，表结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mt_subtitle_table`  (</span><br><span class="line">  `id` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `actress` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` text <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>定义一个结构体，字段通过tag和上述表中的字段一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Moive <span class="keyword">struct</span>&#123;</span><br><span class="line">    ID <span class="type">string</span> <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">    Actress <span class="type">string</span> <span class="string">`db:&quot;actress&quot;`</span></span><br><span class="line">    Title <span class="type">string</span> <span class="string">`db:&quot;title&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绑定变量：bindvars</strong></p><p>查询占位符<code>?</code>又被称为<strong>bindvars</strong>，非常重要，应该<strong>始终使用它们向数据库发送值</strong>，因为他们可以防止SQL注入攻击。<code>database/sql</code>不尝试对查询文本进行任何验证；它与编码的参数一起按照原样发送到服务器，除非驱动程序实现一个特殊的接口，否则在执行之前，查询实在服务器上准备的。</p><p><code>bindvars</code>是特定于数据库的：</p><ul><li>MySQL中使用<code>?</code></li><li>PostgreSQL使用枚举的<code>$1</code>、<code>$2</code>等语法</li><li>SQLite中使用<code>?</code>和<code>$1</code>的语法都支持</li><li>Oracle中使用<code>:name</code>的语法</li></ul><p><code>bindvars</code>的一个常见错误是，他们用来在sql语句中插入值。其实他们<strong>仅仅用于参数化</strong>，不允许更改SQL语句的结构。例如使用<code>bindvars</code>尝试参数化列或表名将不起作用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 不能用来插入表名（叫SQL语句中表名的占位符）</span></span><br><span class="line">db.Query(<span class="string">&quot;SELECT * FROM ?&quot;</span>, <span class="string">&quot;mytable&quot;</span>)</span><br><span class="line"><span class="comment">// ? 不能用来插入列名（叫做SQL语句中列名的占位符）</span></span><br><span class="line">db.Query(<span class="string">&quot;SELECT ?, ? FROM people&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;location&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="自己实现语句实现批量插入">自己实现语句实现批量插入</h4><p>比较笨，但是好理解。就是有多少个movie就拼接多少个<code>(?, ?)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BatchInsertMoive 自行构造批量插入的语句</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsertMovie</span><span class="params">(movies []*Movie)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 存放(?, ?)的slice</span></span><br><span class="line">    valueStrings := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(movies))</span><br><span class="line">    <span class="comment">// 存放values的slice</span></span><br><span class="line">    valueArgs := <span class="built_in">make</span>([]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>, <span class="built_in">len</span>(movies) * <span class="number">3</span>)</span><br><span class="line">    <span class="comment">// 遍历users准备相关数据</span></span><br><span class="line">    <span class="keyword">for</span> _, m := <span class="keyword">range</span> moives &#123;</span><br><span class="line">        <span class="comment">// 此处占位符要与插入值的个数对应</span></span><br><span class="line">        valuesStrings = <span class="built_in">append</span>(valuesStrings, <span class="string">&quot;(?, ?, ?)&quot;</span>)</span><br><span class="line">        valueArgs = <span class="built_in">append</span>(valuesArgs, m.ID, m.Actress, m.Title)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自行拼接要执行的具体语句</span></span><br><span class="line">    stmt := fmt.Sprintf(<span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES %s&quot;</span>,</span><br><span class="line">strings.Join(valueStrings, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">    _, err := db.Exec(stmt, valueArgs...)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用sqlx.in实现批量插入">使用sqlx.In实现批量插入</h4><p>前提是需要我们的结构体实现<code>driver.Valuer</code>接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Movie)</span></span> Value() (driver.Value, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []<span class="keyword">interface</span>&#123;&#125;&#123;m.ID, m.Actress, m.title&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>sqlx.In</code>实现批量插入代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BatchInsertMoive 使用的是sqlx.In帮我们拼接语句和参数，注意传入的参数是[]interface&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsertMoive</span><span class="params">(moive []<span class="keyword">interface</span>&#123;&#125;)</span></span> (<span class="type">error</span>) &#123;</span><br><span class="line">    query, args, _ := sqlx.In(</span><br><span class="line">        <span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES (?), (?), (?),&quot;</span> <span class="comment">// 这里是根据movie长度来，还是根据字段的个数来，有待观察</span></span><br><span class="line">        movies..., <span class="comment">// 如果参数实现了driver.Valuer, sqlx.In会通过调用Value()来展开它</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(query) <span class="comment">// 查看生成的querysting</span></span><br><span class="line">    fmt.Println(args) <span class="comment">// 查看生成的args</span></span><br><span class="line">    _, err := db.Exec(query, args...)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用namedexec实现批量插入">使用NamedExec实现批量插入</h4><p>使用NamedExec实现批量插入的方法如下</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchInsert</span><span class="params">(users []*User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    _, err := db.NameExec(<span class="string">&quot;INSERT INTO mt_subtitle_table(id, actress, title) VALUES(:name, :age)&quot;</span>, users)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="sqlx.in的查询例子">sqlx.In的查询例子</h3><p>关于<code>sqlx.In</code>这里在补充一个用法，在<code>sqlx</code>查询语句中实现了In查询和FIND_IN_SET函数。即实现<code>SELECT * FROM mt_subtitle_table WHERE actress in ("川岛芳子"，"广田雅美")</code>和<code>SELECT * FROM mt_subtitle_table in (3, 2, 1) ORDER BY FIND_IN_SET(id, "川岛芳子"，"广田雅美")</code>.</p><h4 id="in查询">in查询</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QueryByIDs 根据指定ID查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryByIDs</span><span class="params">(ids []<span class="type">string</span>)</span></span> (movies []Movie, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 动态填充id</span></span><br><span class="line">    query, args, err := sqlx.In(<span class="string">&quot;SELECT id, actress, title FROM mt_subtitle_table WHERE actress IN (?)&quot;</span>, ids)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sqlx.In返回带`?`bindvar`的查询语句，我们使用Rebind()重新绑定他</span></span><br><span class="line">    query = db.Rebind(query)</span><br><span class="line">    err = db.Select(&amp;movies, query, args...)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="in查询和find_in_set函数">in查询和FIND_IN_SET函数</h4><p>查询id在给定id集合的数据并维持给定id集合的顺序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QuertAndOrderByIDs 按照指定id查询并维护顺序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuertAndOrderByIDs</span><span class="params">(ids []<span class="type">string</span>)</span></span>(moives []Movie, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 动态填充id</span></span><br><span class="line">    strIDs := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(ids))</span><br><span class="line">    <span class="keyword">for</span> _, id := <span class="keyword">range</span> ids &#123;</span><br><span class="line">        strIDs = <span class="built_in">append</span>(strIDs, fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, id))</span><br><span class="line">    &#125;</span><br><span class="line">    query, args, err := sqlx.In(<span class="string">&quot;SELECT id, actress FROM user WHERE id IN (?) ORDER BY FIND_IN_SET(id, ?) ORDER BY FIND_IN_SET(id, ?)&quot;</span>, ids, strings.Join(strIDs, <span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sqlx.In 返回带 `?` bindvar的查询语句，我们使用Rebind()重新绑定它</span></span><br><span class="line">    query = db.Rebind(query)</span><br><span class="line">    err = db.Select(&amp;movie, query, args...)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目中我们通常会使用&lt;code&gt;database/sql&lt;/code&gt;连接MySQL数据库。本文结束&lt;code&gt;sqlx&lt;/code&gt;实现批量插入数据的例子，介绍了&lt;code&gt;sqlx&lt;/code&gt;中可能被忽略的&lt;code&gt;sqlx.In&lt;/code&gt;和&lt;code&gt;DB.NameExec&lt;/code&gt;方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://blog.fly97.cn/tags/golang/"/>
    
    <category term="mysql在、" scheme="https://blog.fly97.cn/tags/mysql%E5%9C%A8%E3%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Go操作数据库(一)</title>
    <link href="https://blog.fly97.cn/p/go-with-database-1/"/>
    <id>https://blog.fly97.cn/p/go-with-database-1/</id>
    <published>2023-01-30T09:26:00.000Z</published>
    <updated>2023-01-30T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。</p><p>关键词：<strong>golang</strong></p><span id="more"></span><h2 id="连接">连接</h2><p>sql包提供了保证SQL或类SQL数据库的泛用接口。</p><p>使用sql包时必须注入（至少）一个数据库驱动。参见http://golang.org/s/sqldrivers获取驱动列表。</p><p>更多用法示例，参见wiki页面：http://golang.org/s/sqlwiki。</p><p>这里使用<code>github.com/go-sql-driver/mysql/</code>作为MySQL的驱动。</p><h3 id="下载依赖">下载依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure><h3 id="初始化链接">初始化链接</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(driverName, dataSourceName <span class="type">string</span>)</span></span> (*DB, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>返回的DB类型可用被多个goroutine同时使用</strong>，只需要创建一次，很少需要关闭这个对象；</p></li><li><p>Open函数<strong>只验证</strong>参数格式是否正确，不创建数据库的连接，无法验证密码是否正确；</p></li><li><p>一般设置成全局变量，<strong>一次初始化然后整个模块使用</strong>。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;https://github.com/go-sql-driver/mysql&quot;</span> <span class="comment">// init mysql驱动</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"><span class="comment">// Data Source Name</span></span><br><span class="line"><span class="keyword">const</span> dsn = <span class="string">&quot;root:xxx@tcp(127.0.0.1)/dbname&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="comment">// Open不会校验账号密码是否正确</span></span><br><span class="line">    <span class="comment">// 这里不要使用:=, 我们是给全局变量赋值，然后在main函数中示意使用全局变量</span></span><br><span class="line">    db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证用户名和密码是否正确">验证用户名和密码是否正确</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Ping() <span class="type">error</span></span><br></pre></td></tr></table></figure><ul><li>验证数据库是否可用</li><li>如果必要的话建立一个连接</li></ul><h3 id="设置最大连接数">设置最大连接数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxOpenConns(n <span class="type">int</span>)</span><br></pre></td></tr></table></figure><ul><li>设置数据库最大连接数</li><li>如果n &gt;0且小于<strong>最大闲置连接数</strong>，则会将最大闲置连接数减少到匹配开启最大连接数的限制</li><li>如果n &lt;= 0（默认值），不会限制最大开启连接数限制</li></ul><h3 id="设置最大闲置连接数">设置最大闲置连接数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> SetMaxIdleConns(n <span class="type">int</span>)</span><br></pre></td></tr></table></figure><ul><li>设置数据库最大闲置连接数</li><li>如果n大于<strong>最大连接数</strong>，则新的最大闲置连接数会减少到最大连接数</li><li>如果n &lt;= 0，则不会保持闲置连接，<strong>默认值为2</strong></li></ul><h2 id="增删改查">增删改查</h2><h3 id="建库建表">建库建表</h3><p>先在MySQL中创建一个名为movies的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE movies;</span><br></pre></td></tr></table></figure><p>进入该数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE movies;</span><br></pre></td></tr></table></figure><p>创建一张用于测试的数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `mt_subtitle_table`  (</span><br><span class="line">  `id` text NOT NULL,</span><br><span class="line">  `actress` text NOT NULL,</span><br><span class="line">  `title` text NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><p>为了方便查询，我们实现定义一个结构体来存储mt_subtitle_table表的数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Movie <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="type">string</span></span><br><span class="line">    actress <span class="type">string</span></span><br><span class="line">    title <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行查询">单行查询</h3><p>单行查询执行一次查询，并<strong>期望返回最多一行结果（即Row）</strong>。QueryRow总是返回非nil的值，直到返回值的Scan方法被调用时，才会返回被延迟的错误，如未找到结果等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> QueryRow(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) *Row</span><br></pre></td></tr></table></figure><p>代码实例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from user where id=?&quot;</span></span><br><span class="line">    <span class="keyword">var</span> m Movie</span><br><span class="line">    <span class="comment">// 要确保QueryRow之后调用Scan方法，否则持有的数据库连接不会被释放。</span></span><br><span class="line">    err := db.QueryRow(sqlStr, <span class="string">&quot;APAA-401&quot;</span>).Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;id: %s, actress: %s, title: %s&quot;</span>, m.id, m.actress, m.title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多行查询">多行查询</h3><p>多行查询<code>db.Query()</code>执行一次查询，返回多行结果（Rows），一般用于执行select命令，<strong>参数args表示query中的占位符参数</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Query(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)(*Rows, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryMultRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title for user where actress = ?&quot;</span></span><br><span class="line">    rows, err := db.Query(sqlStr, <span class="string">&quot;樱空桃&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printlf(<span class="string">&quot;query failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非常重要：释放持有的数据库连接</span></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Moive</span><br><span class="line">        err := rows.Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;id: %s, actress: %s, title: %s&quot;</span>, m.id, m.name, m.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><p>插入、更新和删除都使用<code>Exec</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Exec(query <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;) (Result, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>Exec执行一次命令（包括查询、删除、更新、插入等），返回的Result是对已执行的SQL命令的总结，参数args表示query中的占位参数。</p><p>插入数据代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values(?, ?, ?)&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;APAA-401&quot;</span>, <span class="string">&quot;樱空桃&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err :%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    theID, err := ret.LastInsertId() <span class="comment">// 返回插入新数据的ID</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get lastinsert ID failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;insert success, affected id: %v&quot;</span>, theID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数据">更新数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;update mt_subtitle_table set title=? where id=?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>, <span class="string">&quot;APAA-401&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;update failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowsAffected() <span class="comment">// 返回操作影响的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowsAffected failed, err:%v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;update success, affected rows: %d\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据">删除数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRowDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;delete from mt_subtitle_table where id = ?&quot;</span></span><br><span class="line">    ret, err := db.Exec(sqlStr, <span class="string">&quot;APAA-401&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;delete failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    n, err := ret.RowAffected() <span class="comment">// 操作影响的行数</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;get RowsAffected failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;delete success, affected rows: %d&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mysql预处理">MySQL预处理</h2><h3 id="什么是预处理">什么是预处理</h3><p>普通SQL语句执行过程：</p><ol type="1"><li>客户端对SQL语句进行占位符替换得到完整的SQL语句；</li><li>客户端发送完整的SQL语句到MySQL服务端；</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li></ol><p>预处理执行过程：</p><ol type="1"><li>把SQL语句分成两部分，命令部分与数据部分。</li><li>先把命令部分发送到MySQL服务端，MySQL服务端进行SQL预处理。</li><li>然后把数据部分发送到MySQL服务端，MySQL服务端使用占位符进行替换。</li><li>MySQL服务端执行完整的SQL语句并将结果返回给客户端。</li></ol><h3 id="为何要预处理">为何要预处理</h3><ol type="1"><li>优化MySQL服务器重复执行SQL的方法，可以提升服务器性能，提前让服务器编译，一次编译多次执行，节省后续编译的成本。</li><li>避免SQL注入问题。</li></ol><h2 id="go实现mysql预处理">Go实现MySQL预处理</h2><p><code>database/sql</code>使用下面的<code>Prepare</code>方法来实现预处理操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Prepare(query <span class="type">string</span>)(*Stmt, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><code>Prepare</code>方法会先将sql语句发送给MySQL服务端，返回一个准备好的状态用于之后的查询和命令。返回值可以同时执行多个查询和命令。</p><p>查询操作的预处理实例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理查询实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareQueryDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;select id, actress, title from mt_subtitle_table where actress = ?&quot;</span></span><br><span class="line">    stmt, err := db.Prepare(sqlStr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;prepare failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> stmt.Close()</span><br><span class="line">    rows, err := stmt.Query(<span class="string">&quot;白桃花&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;query failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line">    <span class="comment">// 循环读取结果中的数据</span></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> m Movie</span><br><span class="line">        err := rows.Scan(&amp;m.id, &amp;m.actress, &amp;m.title)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;scan failed, err: %v&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;id: %v, actress: %v, title: %v&quot;</span>, m.id, m.actress, m.title)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入、更新和删除的预处理操作十分类似，这里以插入数据的预处理为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预处理插入实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareInsertDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sqlStr := <span class="string">&quot;insert into mt_subtitle_table(id, actress, title) values(?,?)&quot;</span></span><br><span class="line">    stmt, err := db.Prepare(sqlStr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;prepare failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> stmt.Close()</span><br><span class="line">    _, err = stmt.Exec(<span class="string">&quot;APAA-401&quot;</span>, <span class="string">&quot;白桃花&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    _, err = stmt.Exec(<span class="string">&quot;APAA-402&quot;</span>, <span class="string">&quot;樱空桃&quot;</span>, <span class="string">&quot;先輩方の気遣いが嬉しい&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;insert failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;insert success.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sql注入问题">SQL注入问题</h2><p>任何时候都不应该自己拼接SQL语句！</p><p>这里我们编写一个根据name字段查询user表的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sql注入实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqlInjectDemo</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    sqlStr := fmt.Sprinf(<span class="string">&quot;select id, actress, title from mt_subtitle_table where actress = &#x27;%s&#x27;&quot;</span>, name)</span><br><span class="line">    <span class="keyword">var</span> m Movie</span><br><span class="line">    err := db.QueryRow(sqlStr).Scan(&amp;m.id, &amp;m.name, &amp;m.title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec failed, err: %v\n&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;movie: #%v\n&quot;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时输入以下字符串都可以引发SQL注入问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; or 1=1#&quot;</span>)</span><br><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; union select * from user #&quot;</span>)</span><br><span class="line">sqlInjectDemo(<span class="string">&quot;xxx&#x27; and (select count(*) from user) &gt; 10&quot;</span>)</span><br></pre></td></tr></table></figure><p>补充：不同的数据库中，SQL语句中使用的占位符语法不尽相同。</p><table><thead><tr class="header"><th>数据库</th><th>占位符</th></tr></thead><tbody><tr class="odd"><td>MySQL</td><td><code>?</code></td></tr><tr class="even"><td>PostgreSQL</td><td><code>$1</code>,<code>$2</code>等</td></tr><tr class="odd"><td>SQlite</td><td><code>?</code>和<code>$1</code></td></tr><tr class="even"><td>Oracle</td><td><code>:name</code></td></tr></tbody></table><h2 id="go实现mysql事务">Go实现MySQL事务</h2><h3 id="什么是事务">什么是事务</h3><p>事务：一个最小的不可再分的工作单元；</p><p>通常一个事务对应一个完整的业务（如银行转账业务，该业务就是一个最小的工作单元）同时这个完整的操作需要执行多次的DML（插入、更新、删除）语句共同联合完成，A转账给B，这里就需要两次update操作。</p><p>在MySQL中只有使用了Innodb数据库引擎的数据库才支持表或事物。事务处理可以用来维护数据的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。</p><h3 id="事务的acid">事务的ACID</h3><p>通常事务必须满足四个条件（ACID）：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation又称独立性）、持久性（Durability）。</p><table><colgroup><col style="width: 9%" /><col style="width: 90%" /></colgroup><thead><tr class="header"><th>条件</th><th>解释</th></tr></thead><tbody><tr class="odd"><td>原子性</td><td>一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发送错误，会被回滚（Rollback）到事务前开始的状态，就像这个事务从来没有执行过一样。</td></tr><tr class="even"><td>一致性</td><td>在事务开始之前和事务结束以后，数据库的完整性没有被破坏，这表示写入的资料必须完全符合所有的预设规则，这包含资料的准确度、串联性以及后续数据库可以自发性的完成预定的工作。</td></tr><tr class="odd"><td>隔离性</td><td>数据库允许多个并发事务同时对其数据进行读写和修改的能力。隔离性可以防止多个事务并发执行时由于交叉执行而导致的数据行不一致的情况。事务隔离分为不同级别，包括读未提交（Readuncommitted）、读提交（Read committed)、可重复读（Repeatableread）和串行化（Serializable）。</td></tr><tr class="even"><td>持久性</td><td>事务处理结束以后，对数据的修改就是永久的，即便系统故障也不会丢失。</td></tr></tbody></table><h3 id="事务相关方法">事务相关方法</h3><p>Go语言使用以下三个方法实现MySQL中的事务操作。</p><p>开始事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span></span> Begin() (*Tx, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Commit() <span class="type">error</span></span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Tx)</span></span> Rollback() <span class="type">error</span></span><br></pre></td></tr></table></figure><h3 id="事务实例">事务实例</h3><p>下面的代码演示了一个简单的事务操作，该事务操作能够保证两次更新操作要么同时成功要么同时失败，不会出现中间状态。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务操作实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transationDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tx, err := db.Begin() <span class="comment">// 开启事务</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> tx != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;begin trans fail, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr1 := <span class="string">&quot;UPDATE mt_subtitle_table set id = AAA501 where actress=?&quot;</span></span><br><span class="line">    ret1, err := tx.Exec(sqlStr1, <span class="string">&quot;若狭留美&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Prinf(<span class="string">&quot;exec sql1 failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    affRow1, err := ret1.RowAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec ret1.RowAffected() failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    sqlStr2 := <span class="string">&quot;UPDATE mt_subtitle_table set id = AAA4501 where actress = ?&quot;</span></span><br><span class="line">    ret2, err := tx.Exec(sqlStr2, <span class="string">&quot;泷泽萝拉&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;exec sql2 failed, err: %v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    affRow2, err := ret2.RowsAffected()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        tx.Rollback() <span class="comment">// 回滚</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;exec ret2.RosAffected() failed, err:%v&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(affRow1, affRow2)</span><br><span class="line">    <span class="keyword">if</span> affRow1 == <span class="number">1</span> &amp;&amp; affRow2 == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;很好，事务提交了&quot;</span>)</span><br><span class="line">        tx.Commit() <span class="comment">// 提交事务</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        tx.Rollback()</span><br><span class="line">        fmt.Println(<span class="string">&quot;不好意思，有点问题，事务回滚了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;事务执行成功！&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL是常用的关系数据库，本文主要介绍Go语言怎么操作MySQL数据库。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="https://blog.fly97.cn/tags/mysql/"/>
    
    <category term="golang" scheme="https://blog.fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础（五）httprouter详解</title>
    <link href="https://blog.fly97.cn/p/httprouter-tutorial-01/"/>
    <id>https://blog.fly97.cn/p/httprouter-tutorial-01/</id>
    <published>2023-01-16T02:03:00.000Z</published>
    <updated>2023-01-16T02:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>httprouter是一个高性能、可扩展的HTTP路由，可以作为golang默认路由<code>net/http</code>的替代。</p><p>关键词：<strong>httprouter </strong></p><span id="more"></span><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u  <span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br></pre></td></tr></table></figure><p>一个例子作为开始</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/julienschmidt/httprouter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;HelloWorld&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := httprouter.New()</span><br><span class="line">router.GET(<span class="string">&quot;/hi&quot;</span>, HelloWorld)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, router))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，HelloWorld是一个<code>handle httprouter.Handle</code>类型，需要传入三个参数，三个参数的作用以后说。该<code>handle</code>在main函数忠被注册到<code>/hi</code>路径上。运行代码会得到一下效果。</p><p><img data-src="image-20220416101901309.png" /></p><h2 id="http-method">HTTP Method</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> GET(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;GET&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> HEAD(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;HEAD&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> OPTIONS(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;OPTIONS&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> POST(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;POST&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PUT(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PUT&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> PATCH(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;PATCH&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> DELETE(path <span class="type">string</span>, handle Handle) &#123;</span><br><span class="line">    r.Handle(<span class="string">&quot;DELETE&quot;</span>, path, handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由匹配">路由匹配</h2><h3 id="nethttp的路由匹配">net/http的路由匹配</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///api,可以访问到</span></span><br><span class="line"><span class="comment">///api/,不可以</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">///api,可以</span></span><br><span class="line"><span class="comment">///api/,也可以</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api/&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="httprouter的路由匹配">httprouter的路由匹配</h3><p>两者路由命名捕获方式：（是路由命名不是路由参数）</p><ul><li><p><code>:name</code>的捕获方式是匹配内容直到下一个斜线或者路径的结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path: /blog/:category/:post  </span><br><span class="line">router.GET(<span class="string">&quot;/blog/:category/:post&quot;</span>, Hello) //category/post可以看成是一个变量</span><br><span class="line"></span><br><span class="line">当请求路径为：</span><br><span class="line">/blog/go/request-routers            match: category=<span class="string">&quot;go&quot;</span>, post=<span class="string">&quot;request-routers&quot;</span></span><br><span class="line">/blog/go/request-routers/           no match, but the router would redirect</span><br><span class="line">/blog/go/                           no match</span><br><span class="line">/blog/go/request-routers/comments   no match</span><br></pre></td></tr></table></figure></li><li><p><code>*name</code>的方式是从指定位置开始（包含前缀"/"）匹配到结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path: /files/*filepath</span><br><span class="line">router.GET(<span class="string">&quot;/files/*filepath&quot;</span>, Hello) //filepath可以看成是一个变量</span><br><span class="line"></span><br><span class="line">当请求路径为：</span><br><span class="line">/files/                             match: filepath=<span class="string">&quot;/&quot;</span></span><br><span class="line">/files/LICENSE                      match: filepath=<span class="string">&quot;/LICENSE&quot;</span></span><br><span class="line">/files/templates/article.html       match: filepath=<span class="string">&quot;/templates/article.html&quot;</span></span><br><span class="line">/files                              no match, but the router would redirect</span><br></pre></td></tr></table></figure></li></ul><p>获取路由命名的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    name := ps.ByName(<span class="string">&quot;who&quot;</span>) <span class="comment">//获取who对应的参数</span></span><br><span class="line">    name := ps[<span class="number">0</span>].Value      <span class="comment">//直接通过Value检索</span></span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;HelloWorld&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">router.GET(<span class="string">&quot;/hi/:who&quot;</span>, HelloWorld)</span><br></pre></td></tr></table></figure><h3 id="httprouter重定向">httprouter重定向</h3><p>如果请求的URL路径包含或者不包含尾随斜线时，但在注册的路径上包含了或没有包含"/"的目标上定义了handler，但是会进行301重定向。简单地说，<strong>不管URL是否带尾随斜线，只要注册路径不存在，但在去掉尾随斜线或加上尾随斜线的路径上定义了handler，就会自动重定向。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Router&#123;</span><br><span class="line"><span class="comment">//是否启用自动重定向</span></span><br><span class="line">        RedirectTrailingSlash:  <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 设置为true时回尝试修复路径, 第一个多余的路径会被删除. 之后, 路由器对已清理的路径进行不区分大小写的查找. 如果可以找到此路由的句柄，则路由器将重定向到正确的路径</span></span><br><span class="line">        RedirectFixedPath:      <span class="literal">true</span>,</span><br><span class="line">        HandleMethodNotAllowed: <span class="literal">true</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果启用，则路由器会自动回复OPTIONS请求</span></span><br><span class="line">        HandleOPTIONS:          <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面有几种会重定向的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注册路径：/blog/:category/:post</span><br><span class="line">请求URL路径：/blog/go/request-routers/</span><br><span class="line"></span><br><span class="line">注册路径：/blog/:category</span><br><span class="line">请求URL路径：/blog/go</span><br><span class="line"></span><br><span class="line">注册路径：/files/*filepath</span><br><span class="line">请求URL路径：/files</span><br></pre></td></tr></table></figure><h3 id="httprouter-lookup">httprouter lookup</h3><p>Lookup根据<code>method+path</code>检索对应的Handle，以及<code>Params</code>，并可以通过第三个返回值判断是否会进行重定向。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span></span> Lookup(method, path <span class="type">string</span>) (Handle, Params, <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><h3 id="httprouter获取请求相关的信息">httprouter获取请求相关的信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">err := r.ParseForm() <span class="comment">// 解析表单必须</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadGateway)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Who: %v\n&quot;</span>, ps.ByName(<span class="string">&quot;who&quot;</span>))</span><br><span class="line">fmt.Printf(<span class="string">&quot;Method: %v\n&quot;</span>, r.Method)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Host: %v\n&quot;</span>, r.Host)</span><br><span class="line">fmt.Printf(<span class="string">&quot;UserAgent: %v\n&quot;</span>, r.UserAgent())</span><br><span class="line">fmt.Printf(<span class="string">&quot;r.PostForm: %v\n&quot;</span>, r.PostForm)</span><br><span class="line">fmt.Printf(<span class="string">&quot;r.Form: %v\n&quot;</span>, r.Form)</span><br><span class="line">fmt.Println(<span class="string">&quot;========OK=======&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中PostForm获取<code>x-www-form-urlencoded</code>发送的表单，Form获取明文发送如http://127.0.0.1/hi/xxx?user=xxx如user=xxx的信息。</p><h3 id="http返回信息">http返回信息</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;</span><br><span class="line">    w.WriteHeader(http.statusOK)</span><br><span class="line">    status, err := w.Write([]<span class="type">byte</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    w.Header() </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一行返回http请求状态码</p><p>第二行返回Body，通常是返回一个json</p><p>第三行是返回Header，格式是map</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;httprouter
是一个高性能、可扩展的HTTP路由，可以作为golang默认路由&lt;code&gt;net/http&lt;/code&gt;的替代。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;httprouter &lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://blog.fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>http请求参数之Query String Parameters、Form Data、Request Payload区别</title>
    <link href="https://blog.fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/"/>
    <id>https://blog.fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/</id>
    <published>2023-01-05T02:20:00.000Z</published>
    <updated>2023-01-05T02:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。</strong></p><p>关键词：<strong>http</strong></p><span id="more"></span><h2 id="query-string-parameters">Query String Parameters</h2><p>Query String Parameters 当发起一次HTTP请求时，参数会以urlstring的形式进行传递。</p><p>即<code>?</code>后面的字符串则为请求的参数，并以<code>&amp;</code>为分隔符。</p><h4 id="header">header</h4><p><img data-src="1620.png" /></p><h4 id="传入参数">传入参数</h4><p><img data-src="1620-1672985410153-3.png" /></p><h2 id="request-payload">Request Payload</h2><p>当发起一次POST请求后，若<code>content-type</code>为<code>application/json</code>，则参数会以RequestPayload的形式进行传递，数据形式为JSON。</p><p>上述请求不会显式的出现在URL中。</p><h4 id="header-1">header</h4><p><img data-src="1620-1672985432471-6.png" /></p><h4 id="传入参数-1">传入参数</h4><figure><img data-src="1620-1672985616176-9.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="form-data">Form Data</h2><p>当发起一次HTTP请求时，若未指定content-type，则默认<code>content-type</code>为<code>application/x-www-form-urlencoded</code>。</p><p>参数会以<code>From Data</code>的形式进行传递，不会显式出现在请求url中。</p><h4 id="传入参数-2">传入参数</h4><p><img data-src="1620-1672985628992-12.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;http&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="http" scheme="https://blog.fly97.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之节点</title>
    <link href="https://blog.fly97.cn/p/agent-in-ros2/"/>
    <id>https://blog.fly97.cn/p/agent-in-ros2/</id>
    <published>2022-12-20T10:36:00.000Z</published>
    <updated>2022-12-20T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的节点。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="节点">节点</h2><p>机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞。众多细胞通过一些机制联系到一起，就成为了一个机器人整体。</p><p>在ROS中，这些细胞被称为节点。</p><h3 id="通信模型">通信模型</h3><p>完成的机器人系统可能并不是一个物理上的整体，比如这样的一个机器人：</p><p><img data-src="image-20220526231417594.png" /></p><p>在机器人身体里搭载了一台计算机A，通过机器人的眼睛——摄像头，获取外界的信息，也可以通过控制机器人的腿——轮子，让机器人一栋栋到想要去的地方。除此之外，还有另外一台计算机B，放在你的桌子上，可以远程监控机器人看到的消息，也可以远程配置机器人的速度和某些参数，还可以连接成为一个摇杆，人为控制机器人左右运动。</p><p>这些功能虽然位于不同的计算机中，但是都是机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。</p><ul><li>节点在机器人系统中的职责就是<strong>执行某些具体的任务</strong>，从操作系统来看，也叫做进程；</li><li>每个节点都是一个<strong>独立运行的可执行文件，</strong>比如执行某一个python程序，或者执行C++编译生成的结果，都是算运行了一个节点；</li><li>既然每一个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的编程语言可以是不同的，比如C++、Python等；</li><li>这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://blog.fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之功能包</title>
    <link href="https://blog.fly97.cn/p/package-in-ros2/"/>
    <id>https://blog.fly97.cn/p/package-in-ros2/</id>
    <published>2022-12-19T10:36:00.000Z</published>
    <updated>2022-12-19T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的功能包。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><p>功能包的机制，是提高ROS中软件复用率的重要方法。</p><h2 id="创建功能包">创建功能包</h2><p>如何在ROS2中创建一个功能包，可以使用以下这个指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create --build-type &lt;build-type&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><ul><li>pkg：表示功能包相关的功能；</li><li>create：表示创建功能包；</li><li>build-type：表示新创建的功能包是C++还是Python的，如果是C++或者C，那这里就用ament_cmake，如果使用Python，就用ament_python；</li><li>package_name：新建功能包的名字。</li></ul><p>比如在终端中分别创建C++和Python版本的功能包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">ros2 pkg create --build-type ament_cmake learning_pkg_c            <span class="comment"># C++</span></span><br><span class="line">ros2 pkg create --build-type ament_python learning_pkg_python      <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><h2 id="编译功能包">编译功能包</h2><p>在创建好的功能包中，可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">colcon build      <span class="comment"># 编译工作空间所有功能包</span></span><br><span class="line"><span class="built_in">source</span> install/local_setup.bash</span><br></pre></td></tr></table></figure><h2 id="功能包的结构">功能包的结构</h2><p>分析以下刚刚创建的两个功能包的结构。</p><h3 id="c功能包">C++功能包</h3><p>首先看下C++的功能包，其中必然存在两个文件：<strong>package.xml和CMakerLists.txt</strong></p><p><img data-src="image-20220524112122164.png" /></p><p>package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。</p><p><img data-src="image-20220524112141298.png" /></p><p>CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，必须要在该文件中设置如何编译，使用CMake语法。</p><p><img data-src="image-20220524112132626.png" /></p><p>Python功能包</p><p>C++功能包需要将源码解释成可执行文件，但是Python语言是解析型的，不需要编译。</p><p>也是有两个文件：package.xml和setup.py。</p><p><img data-src="image-20220524112228806.png" /></p><p>package.xml文件的主要内容和C++版本的功能包一样，包含功能包的版权描述，和各自依赖的声明。</p><p><img data-src="image-20220524112246102.png" /></p><p>setup.py文件里面也包含一些版权信息，初次之外，还有"entry_points"配置的程序入口。</p><p><img data-src="image-20220524112235574.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的功能包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://blog.fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十）ROS2之工作空间</title>
    <link href="https://blog.fly97.cn/p/workspace-in-ros2/"/>
    <id>https://blog.fly97.cn/p/workspace-in-ros2/</id>
    <published>2022-12-17T10:36:00.000Z</published>
    <updated>2022-12-17T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍ROS2上的工作空间。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="工作空间开发过程中的大本营">工作空间：开发过程中的大本营</h2><h3 id="什么是工作空间">什么是工作空间</h3><p>在ROS机器人开发中，我们针对机器人的某些功能需要进行代码便携式，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。</p><p>工作空间是一个存放项目于开发相关文件的文件夹，是开发过程中存放所有资料的大本营。</p><p>ROS系统中一个典型的工作空间如下，一般会有四个子目录：</p><figure><img data-src="https://book.guyuehome.com/ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/image/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/image-20220524111415729.png"alt="image-20220524111415729" /><figcaption aria-hidden="true">image-20220524111415729</figcaption></figure><ul><li><p><strong>src，代码空间</strong>：编写的代码、脚本都需要放在这里；</p></li><li><p><strong>build，编译空间</strong>：保存编译过程中产生的中间文件；</p></li><li><p><strong>install，安装空间</strong>：放置编译过程得到的可执行文件和脚本；</p></li><li><p><strong>log，日志空间</strong>：编译和运行过程中，保存各种警告、错误、信息等日志。</p></li></ul><p>总体来说，这四个空间的文件夹，我们绝大部分的操作都是在src进行的，编译成功后，会执行install里面的结果，build和log两个文件很少用。</p><p>工作空间里的名称我们也可以自己定义，数量也不是唯一的.</p><h3 id="创建工作空间">创建工作空间</h3><p>执行以下命令创建工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/dev_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/guyuehome/ros2_21_tutorials.git</span><br></pre></td></tr></table></figure><h3 id="自动安装依赖">自动安装依赖</h3><p>一般使用<code>rosdep</code>工具进行自动安装，而<code>rosdep</code>默认会使用国外的源进行安装，而一般国内的网络无法正常连接，因此有开发者开发了<code>rosdepc</code>模块，<code>c</code>的含义就是china，这个软件使用了清华源进行了替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install rosdepc</span><br><span class="line">sudo rosdepc init </span><br><span class="line">rosdepc update</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rosdepc install -i --from-path src --rosdistro foxy -y</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-30-20-image.png" /></p><h3 id="编译工作空间">编译工作空间</h3><p>依赖安装完毕，可以使用以下命令编译工作空间，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程中不会出现任何错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-colcon-ros</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-37-46-image.png" /></p><p>编译成功后，就可以在工作空间后就可以看到构建后的文件夹了</p><p><img data-src="2022-12-17-16-40-47-image.png" /></p><h3 id="设置环境变量">设置环境变量</h3><p>编译成功后，为了让系统找到我们的功能包和可执行文件，还需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> install/local_setup.sh <span class="comment"># 仅在当前终端生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/dev_ws/install/local_setup.sh&quot;</span> &gt;&gt; ~/.bashrc <span class="comment"># 全局生效</span></span><br></pre></td></tr></table></figure><p>至此，我们就完成了工作空间的创建、编译、和配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍ROS2上的工作空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://blog.fly97.cn/tags/ROS/"/>
    
  </entry>
  
</feed>
