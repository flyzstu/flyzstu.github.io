<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人随想</title>
  
  <subtitle>fly97&#39;s Blogs</subtitle>
  <link href="https://fly97.cn/atom.xml" rel="self"/>
  
  <link href="https://fly97.cn/"/>
  <updated>2023-01-05T02:20:00.000Z</updated>
  <id>https://fly97.cn/</id>
  
  <author>
    <name>fly97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http请求参数之Query String Parameters、Form Data、Request Payload区别</title>
    <link href="https://fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/"/>
    <id>https://fly97.cn/p/the-difference-between-query-string-parameters-and-form-data-and-request-payload/</id>
    <published>2023-01-05T02:20:00.000Z</published>
    <updated>2023-01-05T02:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。</strong></p><p>关键词：<strong>http</strong></p><span id="more"></span><h2 id="query-string-parameters">Query String Parameters</h2><p>Query String Parameters 当发起一次HTTP请求时，参数会以urlstring的形式进行传递。</p><p>即<code>?</code>后面的字符串则为请求的参数，并以<code>&amp;</code>为分隔符。</p><h4 id="header">header</h4><p><img data-src="1620.png" /></p><h4 id="传入参数">传入参数</h4><p><img data-src="1620-1672985410153-3.png" /></p><h2 id="request-payload">Request Payload</h2><p>当发起一次POST请求后，若<code>content-type</code>为<code>application/json</code>，则参数会以RequestPayload的形式进行传递，数据形式为JSON。</p><p>上述请求不会显式的出现在URL中。</p><h4 id="header-1">header</h4><p><img data-src="1620-1672985432471-6.png" /></p><h4 id="传入参数-1">传入参数</h4><figure><img data-src="1620-1672985616176-9.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="form-data">Form Data</h2><p>当发起一次HTTP请求时，若未指定content-type，则默认<code>content-type</code>为<code>application/x-www-form-urlencoded</code>。</p><p>参数会以<code>From Data</code>的形式进行传递，不会显式出现在请求url中。</p><h4 id="传入参数-2">传入参数</h4><p><img data-src="1620-1672985628992-12.png" /></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;在与server端进行数据传递时，通常会用到GET、POST方法进行参数提交，而参数提交的方式，通常取决于server端对数据的接收方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;http&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="http" scheme="https://fly97.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之节点</title>
    <link href="https://fly97.cn/p/agent-in-ros2/"/>
    <id>https://fly97.cn/p/agent-in-ros2/</id>
    <published>2022-12-20T10:36:00.000Z</published>
    <updated>2022-12-20T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的节点。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="节点">节点</h2><p>机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞。众多细胞通过一些机制联系到一起，就成为了一个机器人整体。</p><p>在ROS中，这些细胞被称为节点。</p><h3 id="通信模型">通信模型</h3><p>完成的机器人系统可能并不是一个物理上的整体，比如这样的一个机器人：</p><figure><img data-src="ROS实战（十一）ROS2之功能包%20-%20Copy/image-20220526231417594.png"alt="image-20220526231417594" /><figcaption aria-hidden="true">image-20220526231417594</figcaption></figure><p>在机器人身体里搭载了一台计算机A，通过机器人的眼睛——摄像头，获取外界的信息，也可以通过控制机器人的腿——轮子，让机器人一栋栋到想要去的地方。除此之外，还有另外一台计算机B，放在你的桌子上，可以远程监控机器人看到的消息，也可以远程配置机器人的速度和某些参数，还可以连接成为一个摇杆，人为控制机器人左右运动。</p><p>这些功能虽然位于不同的计算机中，但是都是机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。</p><ul><li>节点在机器人系统中的职责就是<strong>执行某些具体的任务</strong>，从操作系统来看，也叫做进程；</li><li>每个节点都是一个<strong>独立运行的可执行文件，</strong>比如执行某一个python程序，或者执行C++编译生成的结果，都是算运行了一个节点；</li><li>既然每一个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的编程语言可以是不同的，比如C++、Python等；</li><li>这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十一）ROS2之功能包</title>
    <link href="https://fly97.cn/p/package-in-ros2/"/>
    <id>https://fly97.cn/p/package-in-ros2/</id>
    <published>2022-12-19T10:36:00.000Z</published>
    <updated>2022-12-19T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍ROS2上的功能包。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><p>功能包的机制，是提高ROS中软件复用率的重要方法。</p><h2 id="创建功能包">创建功能包</h2><p>如何在ROS2中创建一个功能包，可以使用以下这个指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create --build-type &lt;build-type&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><ul><li>pkg：表示功能包相关的功能；</li><li>create：表示创建功能包；</li><li>build-type：表示新创建的功能包是C++还是Python的，如果是C++或者C，那这里就用ament_cmake，如果使用Python，就用ament_python；</li><li>package_name：新建功能包的名字。</li></ul><p>比如在终端中分别创建C++和Python版本的功能包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">ros2 pkg create --build-type ament_cmake learning_pkg_c            <span class="comment"># C++</span></span><br><span class="line">ros2 pkg create --build-type ament_python learning_pkg_python      <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><h2 id="编译功能包">编译功能包</h2><p>在创建好的功能包中，可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">colcon build      <span class="comment"># 编译工作空间所有功能包</span></span><br><span class="line"><span class="built_in">source</span> install/local_setup.bash</span><br></pre></td></tr></table></figure><h2 id="功能包的结构">功能包的结构</h2><p>分析以下刚刚创建的两个功能包的结构。</p><h3 id="c功能包">C++功能包</h3><p>首先看下C++的功能包，其中必然存在两个文件：<strong>package.xml和CMakerLists.txt</strong></p><p><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112122164.png" /></p><p>package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。</p><p><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112141298.png" /></p><p>CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，必须要在该文件中设置如何编译，使用CMake语法。</p><p><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112132626.png" /></p><p>Python功能包</p><p>C++功能包需要将源码解释成可执行文件，但是Python语言是解析型的，不需要编译。</p><p>也是有两个文件：package.xml和setup.py。</p><p><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112228806.png" /></p><p>package.xml文件的主要内容和C++版本的功能包一样，包含功能包的版权描述，和各自依赖的声明。</p><p><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112246102.png" /></p><p>setup.py文件里面也包含一些版权信息，初次之外，还有"entry_points"配置的程序入口。</p><figure><img data-src="ROS实战（十一）ROS2之功能包/image-20220524112235574.png"alt="image-20220524112235574" /><figcaption aria-hidden="true">image-20220524112235574</figcaption></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍ROS2上的功能包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（十）ROS2之工作空间</title>
    <link href="https://fly97.cn/p/workspace-in-ros2/"/>
    <id>https://fly97.cn/p/workspace-in-ros2/</id>
    <published>2022-12-17T10:36:00.000Z</published>
    <updated>2022-12-17T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍ROS2上的工作空间。</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="工作空间开发过程中的大本营">工作空间：开发过程中的大本营</h2><h3 id="什么是工作空间">什么是工作空间</h3><p>在ROS机器人开发中，我们针对机器人的某些功能需要进行代码便携式，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。</p><p>工作空间是一个存放项目于开发相关文件的文件夹，是开发过程中存放所有资料的大本营。</p><p>ROS系统中一个典型的工作空间如下，一般会有四个子目录：</p><figure><img data-src="https://book.guyuehome.com/ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/image/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/image-20220524111415729.png"alt="image-20220524111415729" /><figcaption aria-hidden="true">image-20220524111415729</figcaption></figure><ul><li><p><strong>src，代码空间</strong>：编写的代码、脚本都需要放在这里；</p></li><li><p><strong>build，编译空间</strong>：保存编译过程中产生的中间文件；</p></li><li><p><strong>install，安装空间</strong>：放置编译过程得到的可执行文件和脚本；</p></li><li><p><strong>log，日志空间</strong>：编译和运行过程中，保存各种警告、错误、信息等日志。</p></li></ul><p>总体来说，这四个空间的文件夹，我们绝大部分的操作都是在src进行的，编译成功后，会执行install里面的结果，build和log两个文件很少用。</p><p>工作空间里的名称我们也可以自己定义，数量也不是唯一的.</p><h3 id="创建工作空间">创建工作空间</h3><p>执行以下命令创建工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/dev_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/guyuehome/ros2_21_tutorials.git</span><br></pre></td></tr></table></figure><h3 id="自动安装依赖">自动安装依赖</h3><p>一般使用<code>rosdep</code>工具进行自动安装，而<code>rosdep</code>默认会使用国外的源进行安装，而一般国内的网络无法正常连接，因此有开发者开发了<code>rosdepc</code>模块，<code>c</code>的含义就是china，这个软件使用了清华源进行了替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install rosdepc</span><br><span class="line">sudo rosdepc init </span><br><span class="line">rosdepc update</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rosdepc install -i --from-path src --rosdistro foxy -y</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-30-20-image.png" /></p><h3 id="编译工作空间">编译工作空间</h3><p>依赖安装完毕，可以使用以下命令编译工作空间，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程中不会出现任何错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-colcon-ros</span><br><span class="line"><span class="built_in">cd</span> ~/dev_ws/</span><br><span class="line">colcon build</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-16-37-46-image.png" /></p><p>编译成功后，就可以在工作空间后就可以看到构建后的文件夹了</p><p><img data-src="2022-12-17-16-40-47-image.png" /></p><h3 id="设置环境变量">设置环境变量</h3><p>编译成功后，为了让系统找到我们的功能包和可执行文件，还需要设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> install/local_setup.sh <span class="comment"># 仅在当前终端生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/dev_ws/install/local_setup.sh&quot;</span> &gt;&gt; ~/.bashrc <span class="comment"># 全局生效</span></span><br></pre></td></tr></table></figure><p>至此，我们就完成了工作空间的创建、编译、和配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍ROS2上的工作空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（九）安装ROS2</title>
    <link href="https://fly97.cn/p/install-ros2-with-linux/"/>
    <id>https://fly97.cn/p/install-ros2-with-linux/</id>
    <published>2022-12-16T10:36:00.000Z</published>
    <updated>2022-12-16T10:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍如何在Linux平台上安装ROS2。</p><p><strong>关键词：ROS2</strong> <span id="more"></span></p><h2 id="ros2安装">ROS2安装</h2><p>ROS2的安装受ubuntu发行版的限制，比如ubuntu 20.04LTS只能安装foxy这个发行版；</p><p>ubuntu 22.04 LTS只能按照ROS2长期支持版humble这个发行版。</p><p>本文以ubuntu 20.04 LTS安装foxy发行版为例。</p><h3 id="设置编码">设置编码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install locales</span><br><span class="line">sudo locale-gen en_US en_US.UTF-8</span><br><span class="line">sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 </span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h3 id="安装必要软件">安装必要软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg lsb-release software-properties-common</span><br><span class="line">sudo add-apt-repository universe</span><br></pre></td></tr></table></figure><h3 id="设置源">设置源</h3><p>此处注意，需要确认你的网络可以连接<code>raw.githubusercontent.com</code>，这里先下载完key然后上传到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key</span><br><span class="line">sudo <span class="built_in">mv</span> ros.key /usr/share/keyrings/ros-archive-keyring.gpg </span><br></pre></td></tr></table></figure><p>这里使用清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/ros2/ubuntu jammy main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/ros2.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装ros2">安装ROS2</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt install ros-foxy-desktop python3-argcomplete -y</span><br></pre></td></tr></table></figure><p>注意，如果是嵌入式设备，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-foxy-ros-base python3-argcomplete -y </span><br></pre></td></tr></table></figure><p>如果需要安装编译的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-dev-tools -y</span><br></pre></td></tr></table></figure><h3 id="设置环境变量">设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/foxy/setup.bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; source /opt/ros/foxy/setup.bash&quot;</span> &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure><h2 id="ros2测试">ROS2测试</h2><h3 id="命令行">命令行</h3><p>启动一个终端，允许一个数据的发布者节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_cpp talker</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-16-20-48-59-image.png" /></p><p>启动第二个终端，通过以下命令启动一个数据的订阅者节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run demo_nodes_py listener</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-16-20-49-55-image.png" /></p><h3 id="gui">GUI</h3><p>运行一个ROS的经典实例——小海龟仿真器</p><p>启动两个终端，分别执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtlesim_node</span><br><span class="line">ros2 run turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p>第一句指令将启动一个蓝色背景的海龟仿真器，第二局指令将启动一个键盘控制节点，在该终端中点击键盘上的上下左右按键，就可以控制小海龟移动了。</p><h2 id="常见的命令行操作">常见的命令行操作</h2><p>ROS2的命令行的操作机制与Linux相同，不过所有的操作都集中在ros2的总命令中，后面第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，后面还可以继续跟参数表示具体操作。</p><p><img data-src="2022-12-17-12-27-08-image.png" /></p><p>接下来以小乌龟仿真为例，感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大体了解。</p><h3 id="运行节点程序">运行节点程序</h3><p>想要运行ROS2中的某个节点，可以使用ros2 run命令进行操作。</p><p>例如我们要运行海龟仿真节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtlesim_node</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-36-55-image.png" /></p><p>我们要运行键盘控制节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-41-35-image.png" /></p><h3 id="查看节点信息">查看节点信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node list</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-46-11-image.png" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 node info /turtlesim</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-47-32-image.png" /></p><h3 id="查看话题信息">查看话题信息</h3><p>使用以下命令即可查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-12-48-52-image.png" /></p><p>查看指定话题的消息数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic <span class="built_in">echo</span> /turtle1/pose</span><br></pre></td></tr></table></figure><h3 id="发布话题消息">发布话题消息</h3><p>想让海龟直接动起来，可以直接通过命令行发布话题指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub --rate 1 /turtule1/cmd_vel geometry_msgs/msg/Twist <span class="string">&quot;&#123;linear: &#123;x: 2.0, y: 0.0, z: 0.0&#125;, angular: &#123;x: 0.0, y: 0.0, z: 1.8&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-13-59-05-image.png" /></p><h3 id="发送服务请求">发送服务请求</h3><p>一只小海龟太孤单，仿真器还提供了另外一个服务，产生海龟，我们试一试服务调用，再来一只小海龟，图片也如上图所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call /spawn turtlesim/srv/Spwan <span class="string">&quot;&#123;x: 2, y: 2, theta: 0.2, name:&#x27;&#x27;&#125;&quot;</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h3 id="发送动作目标">发送动作目标</h3><p>想让海龟完成一个具体动作，比如转到指定角度，仿真器提供的action可以实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute <span class="string">&quot;theta: 3&quot;</span></span><br></pre></td></tr></table></figure><p>再继续发布上述话题的基础上，会发现小乌龟在转变了角度以后继续转圈：</p><p><img data-src="2022-12-17-14-01-39-image.png" /></p><h3 id="录制控制命令">录制控制命令</h3><p>系统中运行的数据有很多，如果想要把某段数据录制下来，然后再复现这段数据。</p><p>ros2中的rosbag命令可以实现上面的需求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 bag record /turtle1/cmd_vel</span><br><span class="line">ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3</span><br></pre></td></tr></table></figure><p><img data-src="2022-12-17-14-04-20-image.png" /></p><p>以上就是ROS2中的常见命令。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍如何在Linux平台上安装ROS2。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（八）ROS2初探</title>
    <link href="https://fly97.cn/p/hello-to-ros2/"/>
    <id>https://fly97.cn/p/hello-to-ros2/</id>
    <published>2022-12-15T09:36:00.000Z</published>
    <updated>2022-12-15T09:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。</strong></p><p>本文主要介绍ROS2.</p><p><strong>关键词：ROS2</strong></p><span id="more"></span><h2 id="为什么是ros2">为什么是ROS2</h2><p>ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点：</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114359304.png"alt="image-20220523114359304" /><figcaption aria-hidden="true">image-20220523114359304</figcaption></figure><ul><li><p><strong>系统出现了颠覆性的变化</strong>，ROS1的所有节点都需要在节点管理器ROSMaster下进行工作，一旦Master出现问题，系统就会宕机。ROS2实现了真正的分布式，不再有Master这个角色，借助全新的通信框架DDS，为所有节点提供了可靠通信保障。</p></li><li><p><strong>软件API进行了重新设计</strong>，ROS1原有的接口无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用的API，虽然导致原有ROS1的代码无法直接在ROS2上运行，但是尽量保留了类似的使用方法，同时提供了大量的移植说明。</p></li><li><p><strong>编译系统进行了升级</strong>，ROS1仲使用的rosbuild和catkin问题诸多，尤其是针对代码比较多的项目以及Python编写的项目。编译、连接经常会出错，ROS2对这些进行了优化，重新优化后的编译系统叫做<strong>ament和colcon</strong>。</p><p>以上几点是框架层面的优化，而ROS1和ROS2的明显变化，请看下文：</p><h2 id="ros2-vs-ros1">ROS2 vs ROS1</h2><h3 id="系统架构">系统架构</h3><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image26-16532775781034.png"alt="image26" /><figcaption aria-hidden="true">image26</figcaption></figure><p>如图所示，可以看出最大的变化就是<strong>Master。</strong></p></li><li><p>ROS1中，应用层里面的<strong>Master</strong>节点管理器至关重要，所有节点都得听他指挥。ROS2把这个不稳定的角色请走了，节点可以通过自发现机制找到彼此，从而建立稳定的通信连接；</p></li><li><p>中间层是ROS封装好的标准通信接口，写程序会频繁和这些接口打交道，比如发布一个图像的数据，接受一个雷达的信息，客户端库再调用底层复杂的驱动和通信协议，使得我们的开发变得更加明了。</p></li><li><p>ROS1中，ROS通信依赖底层的TCP和UDP通信，ROS2中，通信协议换成了更见复杂但更见完善的DDS系统；</p></li><li><p>如果是进程内需要大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样；</p></li><li><p>最下面是系统层，也就是ROS可以安装在那些操作系统上，ROS1主要安装在Linux上，ROS2的可选项很多，Linux、Windows、MacOS、RTOS都可以；</p></li></ul><h3 id="dds通信">DDS通信</h3><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image27.png"alt="image27" /><figcaption aria-hidden="true">image27</figcaption></figure><p>ROS1中基于TCP/UDP的通信系统，频繁诟病与延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了；</p><p>DDS是物联网中广泛得到应用的一种通信协议。DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，可以选择多个厂家提供的DDS系统，比如<strong>OpenSplice、FastRTPS</strong>，还有更多厂家提供的，<strong>每一家的性能不同，适用的场景也不一样</strong>；</p><p>ROS2设计了个ROSMiddleware，RMW，也就是指定一个标准的接口，<strong>比如如何发数据、如何收数据，数据的各自属性如何配置，等</strong>。如果厂家想要接入DDS社区，需要按照这个标准写一个适配的接口，将自家的DDS移植过来，这样问题交给了熟悉自家的DDS厂家。</p><p><strong>当我们在产品开发时，可以先用开源版本的DDS满足业务需求，部署交付的产品时，再更改为商业版本更加稳定的DDS，减少开发成本。</strong></p><p>总之，DDS的加入，让ROS2更加稳定，也更加灵活，与之相同的时复杂度也会变高。这样我们不用在纠结ROS的通信系统是否稳定、应该如何优化等问题，更多精力可以放在其他三个部分，专注优化机器人应用功能。</p><h3 id="核心概念">核心概念</h3><p>ROS1应用以及非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式和其中很多的概念。ROS2尽量保留了这些概念，以便开发者从ROS1迁移到ROS2。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114814371.png"alt="image-20220523114814371" /><figcaption aria-hidden="true">image-20220523114814371</figcaption></figure><h3 id="编码方式">编码方式</h3><p>如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114851763.png"alt="image-20220523114851763" /><figcaption aria-hidden="true">image-20220523114851763</figcaption></figure><p>总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。</p><h3 id="命令行"><strong>命令行</strong></h3><p>最后我们再对比下ROS开发中最为常用的一种工具——命令行。</p><figure><img data-src="https://book.guyuehome.com/ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/image/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/image-20220523114915528.png"alt="image-20220523114915528" /><figcaption aria-hidden="true">image-20220523114915528</figcaption></figure><p>ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。</p><p>ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2run，表示启动某一个节点，ros2 topic表示话题相关的功能。</p><h2 id="总结">总结</h2><p>ROS2和ROS1相比，总结如下：</p><ul><li><strong>节点干掉了Master</strong></li><li><strong>通信换成了DDS</strong></li><li><strong>核心概念没变化</strong></li><li><strong>编程难度有上升</strong></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：转眼间三年已经过去，而我也开始面临毕业的问题。由于导师放养式的教学，导致我的论文一直没什么长进。抱怨没有用，一切靠自己。还是得把之前丢下的捡起来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍ROS2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：ROS2&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ROS" scheme="https://fly97.cn/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础（四）模拟发送HTTP请求</title>
    <link href="https://fly97.cn/p/how-to-send-http-request-in-go/"/>
    <id>https://fly97.cn/p/how-to-send-http-request-in-go/</id>
    <published>2022-12-10T10:33:00.000Z</published>
    <updated>2022-12-10T10:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Golang中web开发中net/http是经常用到的包，在这个包中包含了各种请求与响应的方式，下面我会一一进行介绍。</p><p>关键词：<strong>golang</strong></p><span id="more"></span><h2 id="get请求">GET请求</h2><h3 id="不带参数的get请求">不带参数的GET请求</h3><p>直接使用http.Get()函数，返回一个<code>*http.Response</code>类型的变量，使用<code>os.ReadAll(resp.Body)</code>会读取相应后内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendSimpleGetRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">response, err := http.Get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> response.Body.Close()</span><br><span class="line">s, err := io.ReadAll(response.Body)</span><br><span class="line">fmt.Println(<span class="type">string</span>(s))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="携带参数的get请求">携带参数的GET请求</h3><p>使用<code>url.Values&#123;&#125;</code>返回一个<code>map[string][]string</code>类型，不推荐直接在url地址中携带。</p><p>可以使用<code>params.Encode()</code>对中文进行编码，防止数据在传输过程中出错。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendComplexGetRequest</span><span class="params">()</span></span> &#123;</span><br><span class="line">params := url.Values&#123;&#125;</span><br><span class="line">urlObj, err := url.Parse(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">params.Set(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;afds&quot;</span>)</span><br><span class="line">params.Set(<span class="string">&quot;id&quot;</span>, <span class="type">string</span>(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有中文参数，这个操作会对中文参数进行解析</span></span><br><span class="line">urlObj.RawQuery = params.Encode()</span><br><span class="line">urlPath := urlObj.String()</span><br><span class="line">resp, err := http.Get(urlPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">response, err := io.ReadAll(resp.Body)</span><br><span class="line">fmt.Printf(<span class="string">&quot;response: %s\n&quot;</span>, response)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="post请求applicationx-www-form-urlencoded">Post请求：application/x-www-form-urlencoded</h3>这应该是最常见的 POST 提交数据的方式了。浏览器的原生<form><p>表单，如果不设置 <code>enctype</code> 属性，那么最终就会以<code>application/x-www-form-urlencoded</code> 方式提交数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpPostForm</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// params := url.Values&#123;&#125;</span></span><br><span class="line"><span class="comment">// params.Set(&quot;id&quot;, &quot;123&quot;)</span></span><br><span class="line">params := url.Values&#123;</span><br><span class="line"><span class="string">&quot;key&quot;</span>: &#123;<span class="string">&quot;value&quot;</span>&#125;,</span><br><span class="line"><span class="string">&quot;id&quot;</span>:  &#123;<span class="string">&quot;123&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">resp, _ := http.PostForm(<span class="string">&quot;http://baidu.com&quot;</span>, params)</span><br><span class="line">fmt.Println(<span class="string">&quot;request header[Content-Type]:&quot;</span>, resp.Request.Header[<span class="string">&quot;Content-Type&quot;</span>])</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">s, _ := io.ReadAll(resp.Body)</span><br><span class="line">fmt.Println(<span class="type">string</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="post请求multipartform-data">Post请求：multipart/form-data</h3><p>multipart/form-data的基础方法是post，其请求头必须包含一个特殊的头信息：<code>Content-Type</code>，值为<code>multipart/form-data</code>，同时还需要规定一个内容分割符用于分割请求体中的多个post的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpPostMultipartField</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">url := <span class="string">&quot;https://ap-ol-liteserver.fly97.dev/qb/api/v2/auth/login&quot;</span></span><br><span class="line">method := <span class="string">&quot;POST&quot;</span></span><br><span class="line"></span><br><span class="line">body := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">writer := multipart.NewWriter(body)</span><br><span class="line">err := writer.WriteField(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;fly97&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = writer.WriteField(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">err = writer.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(method, url, body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, writer.FormDataContentType())</span><br><span class="line">resp, err := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;request header[Content-Type]:&quot;</span>, resp.Request.Header[<span class="string">&quot;Content-Type&quot;</span>])</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">response, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;response: %s&quot;</span>, response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端通用模式">客户端通用模式</h3><ol type="1"><li>使用<code>http.Client&#123;&#125;</code>实例化一个客户端；</li><li>使用<code>http.NewRequest()</code>新创建一个请求；</li><li>设置请求头<code>req.Header.Set()</code>；</li><li>使用<code>client.Do(req)</code>发送请求；</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpDo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">    urlmap := url.Values&#123;&#125;</span><br><span class="line"></span><br><span class="line">    urlmap.Add(<span class="string">&quot;client_id&quot;</span>, <span class="string">&quot;esss&quot;</span>)</span><br><span class="line">    urlmap.Add(<span class="string">&quot;client_secret&quot;</span>, <span class="string">&quot;sk&quot;</span>)</span><br><span class="line">    parms := ioutil.NopCloser(strings.NewReader(urlmap.Encode())) <span class="comment">//把form数据编下码</span></span><br><span class="line">    req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;www.baidu.com&quot;</span>, parms)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">    req.Header.Set(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;name=anny&quot;</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := client.Do(req)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Golang中web开发中net/http是经常用到的包，在这个包中包含了各种请求与响应的方式，下面我会一一进行介绍。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>一些常见的运维操作</title>
    <link href="https://fly97.cn/p/common-operation-and-maintenance-operations/"/>
    <id>https://fly97.cn/p/common-operation-and-maintenance-operations/</id>
    <published>2022-12-10T05:28:00.000Z</published>
    <updated>2022-12-10T05:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：<strong>运维操作</strong></p><span id="more"></span><h3 id="sudo无需输入密码">sudo无需输入密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;%sudo ALL=(ALL) NOPASSWD:ALL&quot;</span> &gt;&gt; /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="一键安装docker">一键安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="comment"># sudo sh get-docker.sh --mirror </span></span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="docker需要使用sudo">docker需要使用sudo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo service docker restart</span><br><span class="line">newgrp - docker</span><br></pre></td></tr></table></figure><h3 id="查看文件夹占用">查看文件夹占用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo du -s /* | sort -nr</span><br><span class="line">sudo du -h  --max-depth=1</span><br></pre></td></tr></table></figure><h3 id="清理docker冗余容器">清理docker冗余容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h3 id="清理k3s冗余容器">清理k3s冗余容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo k3s crictl rmi --prune</span><br></pre></td></tr></table></figure><h3 id="systemctl定时执行任务">Systemctl定时执行任务</h3><p>参考</p><ol type="1"><li><p><ahref="https://www.cnblogs.com/operationhome/p/10720067.html">Linux定时任务 crontab 和 Systemd Timer - 自由早晚乱余生 - 博客园</a></p></li><li><p>https://www.junmajinlong.com/linux/systemd/systemd_timer/</p></li></ol><p>执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=GLaDOS Checkin Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/docker compose -f /home/wf09/glados/docker-compose.yml up</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>timer触发器：以每天3点执行一次为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=GLaDOS Checkin Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 03:00:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="bash-date日期时间">bash date日期时间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">2021-08-17 22:49:57</span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d&#x27;</span></span><br><span class="line">2021-08-17</span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y%m%d&#x27;</span></span><br><span class="line">20210817</span><br><span class="line"><span class="built_in">date</span> +%Y%m%d</span><br><span class="line">20210817</span><br><span class="line"><span class="built_in">date</span> +%s</span><br><span class="line">1629211600</span><br></pre></td></tr></table></figure><h3 id="linux软连接">Linux软连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s 源文件 目的文件</span><br></pre></td></tr></table></figure><h3 id="debian类修改源">debian类修改源</h3><h4 id="amd64">amd64</h4><h5 id="ubuntu">ubuntu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/cn.archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h5 id="debian">debian</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h4 id="arm64">arm64</h4><h5 id="ubuntu-1">ubuntu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/ports.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/ports.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h4 id="树莓派">树莓派</h4><p>arm64架构的树莓派可以直接用debian的源 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> &gt; /etc/apt/sources.list</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main non-free contrib</span></span><br></pre></td></tr></table></figure>树莓派基金会源 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s|//archive.raspberrypi.org|//mirrors.ustc.edu.cn/archive.raspberrypi.org|g&#x27;</span> /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure> #### Docker</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">20.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex \ </span></span><br><span class="line">    &amp;&amp; sed -i <span class="string">&#x27;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install tzdata curl procps -y \</span><br><span class="line">    &amp;&amp; groupadd -g <span class="number">1000</span> admin -o -f \</span><br><span class="line">    &amp;&amp; useradd -m -G admin --uid <span class="number">1000</span> --gid <span class="number">1000</span> admin \</span><br><span class="line">    &amp;&amp; apt-get clean</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/admin</span></span><br><span class="line"><span class="keyword">USER</span> admin</span><br></pre></td></tr></table></figure><h3 id="安装最新版nginx">安装最新版nginx</h3><h4 id="ubuntu-2">ubuntu</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring -y</span><br><span class="line">curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null</span><br><span class="line">gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># stable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \</span></span><br><span class="line"><span class="string">http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nginx.list</span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/preferences.d/99nginx</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h4 id="debian-1">debian</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring -y</span><br><span class="line">curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null</span><br><span class="line">gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg</span><br><span class="line"><span class="comment"># stable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \</span></span><br><span class="line"><span class="string">http://nginx.org/packages/debian `lsb_release -cs` nginx&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/nginx.list</span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Package: *\nPin: origin nginx.org\nPin: release o=nginx\nPin-Priority: 900\n&quot;</span> \</span><br><span class="line">    | sudo <span class="built_in">tee</span> /etc/apt/preferences.d/99nginx</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h3 id="nginx基本配置">nginx基本配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">  <span class="comment">#listen unix:/dev/shm/default.sock proxy_protocol;</span></span><br><span class="line">  <span class="comment">#listen unix:/dev/shm/h2c.sock http2 proxy_protocol;</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> default_server ssl;</span><br><span class="line">  <span class="attribute">server_name</span> harbor.lo;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_certificate</span>     /home/ubuntu/.ssl/cert.cer;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>  /home/ubuntu/.ssl/cert.key;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#ssl_stapling on;</span></span><br><span class="line">  <span class="comment">#ssl_stapling_verify on;</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment">#proxy_redirect off;</span></span><br><span class="line">    <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">    <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="gitlab配置">gitlab配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> server &#123;</span><br><span class="line">   charset utf-8;</span><br><span class="line">   <span class="comment">#listen unix:/dev/shm/default.sock proxy_protocol;</span></span><br><span class="line">   <span class="comment">#listen unix:/dev/shm/h2c.sock http2 proxy_protocol;</span></span><br><span class="line">   listen 443  ssl;</span><br><span class="line">   server_name gitlab.lo;</span><br><span class="line">   ssl_session_cache shared:SSL:10m;</span><br><span class="line">   ssl_certificate     /usr/local/ssl/gitlab.lo.crt;</span><br><span class="line">   ssl_certificate_key  /usr/local/ssl/gitlab.lo.key;</span><br><span class="line"></span><br><span class="line">   <span class="comment">#ssl_stapling on;</span></span><br><span class="line">   <span class="comment">#ssl_stapling_verify on;</span></span><br><span class="line"></span><br><span class="line">   ssl_session_timeout 10m;</span><br><span class="line">   ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">   ssl_prefer_server_ciphers on;</span><br><span class="line">   ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     <span class="comment">#proxy_redirect off;</span></span><br><span class="line">     <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">     <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">     <span class="comment">#return 403;</span></span><br><span class="line">     client_max_body_size 0;</span><br><span class="line">     proxy_pass http://192.168.15.200:8880;</span><br><span class="line">     proxy_set_header Host <span class="variable">$host</span>; <span class="comment"># required for docker client&#x27;s sake</span></span><br><span class="line">     proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># pass on real client&#x27;s IP</span></span><br><span class="line">     proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他配置">其他配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">proxy_headers_hash_max_size</span> <span class="number">51200</span>;</span><br><span class="line">  <span class="attribute">proxy_headers_hash_bucket_size</span> <span class="number">6400</span>;</span><br><span class="line">  <span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot; &#x27;</span></span><br><span class="line">  <span class="string">&#x27;<span class="variable">$proxy_protocol_addr</span>:<span class="variable">$proxy_protocol_port</span>&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span> ap-sg-do.fly97.dev;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>     /usr/local/bin/cert.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /usr/local/bin/key.pem;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="comment">#proxy_redirect off;</span></span><br><span class="line">      <span class="comment">#proxy_pass https://wf09.github.io/;</span></span><br><span class="line">      <span class="comment">#alias /home/ubuntu/tmp/;</span></span><br><span class="line">      <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span><span class="regexp"> ^~</span> /my/ &#123;</span><br><span class="line">      <span class="comment">#auth_basic &quot;Permission Denied&quot;;</span></span><br><span class="line">      <span class="comment">#auth_basic_user_file /usr/local/passwd;</span></span><br><span class="line">      <span class="attribute">alias</span> /mnt/volume_sgp1_01/;</span><br><span class="line">      <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">proxy_force_ranges</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="attribute">max_ranges</span> <span class="number">32</span>;</span><br><span class="line">      <span class="attribute">autoindex_exact_size</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /qb/ &#123;</span><br><span class="line">      <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">      <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=31536000; includeSubDomains&quot;</span> always;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Range <span class="variable">$http_range</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> If-Range <span class="variable">$http_if_range</span>;</span><br><span class="line">      <span class="attribute">proxy_no_cache</span> <span class="variable">$http_range</span> <span class="variable">$http_if_range</span>;</span><br><span class="line">      <span class="comment"># 如果server_name不是公网域名，这个地方可以设置成ip</span></span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">      <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</span><br><span class="line">      <span class="comment">#这个是设置为0表示不管上传多大的文件都不会报request too large的问题，直接转发过去</span></span><br><span class="line">      <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service模版">service模版</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Unit</span>]</span><br><span class="line"><span class="string">Description=Lightweight</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="string">Documentation=https://k3s.io</span></span><br><span class="line"><span class="string">Wants=network-online.target</span></span><br><span class="line"><span class="string">After=network-online.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Install</span>]</span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"></span><br><span class="line">[<span class="string">Service</span>]</span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/default/%N</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/sysconfig/%N</span></span><br><span class="line"><span class="string">EnvironmentFile=-/etc/systemd/system/k3s.service.env</span></span><br><span class="line"><span class="string">KillMode=process</span></span><br><span class="line"><span class="string">Delegate=yes</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line"><span class="string">LimitNOFILE=1048576</span></span><br><span class="line"><span class="string">LimitNPROC=infinity</span></span><br><span class="line"><span class="string">LimitCORE=infinity</span></span><br><span class="line"><span class="string">TasksMax=infinity</span></span><br><span class="line"><span class="string">TimeoutStartSec=0</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=5s</span></span><br><span class="line"><span class="string">ExecStartPre=/bin/sh</span> <span class="string">-xc</span> <span class="string">&#x27;! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service&#x27;</span></span><br><span class="line"><span class="string">ExecStartPre=-/sbin/modprobe</span> <span class="string">br_netfilter</span></span><br><span class="line"><span class="string">ExecStartPre=-/sbin/modprobe</span> <span class="string">overlay</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/bin/k3s</span> <span class="string">server</span> <span class="string">--node-ip</span> <span class="number">192.168</span><span class="number">.7</span><span class="number">.2</span> <span class="string">--node-external-ip</span> <span class="number">192.168</span><span class="number">.15</span><span class="number">.201</span> <span class="string">--tls-san</span> <span class="number">192.168</span><span class="number">.7</span><span class="number">.2</span> <span class="string">--flannel-backend</span> <span class="string">host-gw</span> <span class="string">--flannel-iface</span> <span class="string">wg0</span> <span class="string">--no-deploy</span> <span class="string">servicelb</span> <span class="string">--write-kubeconfig-mode</span> <span class="number">644</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;proxy-mode=ipvs&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;ipvs-scheduler=rr&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;masquerade-all=true&#x27;</span> <span class="string">--kube-proxy-arg</span> <span class="string">&#x27;metrics-bind-address=0.0.0.0:10249&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose常用配置">docker-compose常用配置</h3><h4 id="node-exporter">node exporter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">node_exporter:</span></span><br><span class="line">                <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/node-exporter</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/run:/run</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/proc:/host/proc:ro</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/sys:/host/sys:ro</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--web.listen-address=:9100&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.procfs=/host/proc&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.sysfs=/host/sys&quot;</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--path.rootfs=/rootfs&quot;</span> <span class="comment"># Necessary for collecting host filesystem metrics.</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;--collector.filesystem.ignored-mount-points=&#x27;^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)&#x27;&quot;</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9100</span><span class="string">:9100</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h4 id="普罗米修斯">普罗米修斯</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">prometheus:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9091</span><span class="string">:9090</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./conf:/etc/prometheus</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./data:/prometheus</span></span><br></pre></td></tr></table></figure><h4 id="grafana">grafana</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">grafana:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">grafana/grafana:9.3.1-ubuntu</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./sample.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./data:/var/lib/grafana</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br></pre></td></tr></table></figure><h4 id="alertmanager">alertManager</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">        <span class="attr">alert:</span></span><br><span class="line">                <span class="attr">image:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">                <span class="attr">ports:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="number">9093</span><span class="string">:9093</span></span><br><span class="line">                <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">                <span class="attr">volumes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">./conf:/etc/alertmanager</span></span><br></pre></td></tr></table></figure><h4 id="jenkins">jenkins</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jenkins:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jenkins/jenkins&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment"># hostname: &#x27;gitlab.lo&#x27;                          # ssh hostname</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8882:8080&#x27;</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">1000000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">1000000</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">8G</span></span><br></pre></td></tr></table></figure><h4 id="gitlab">gitlab</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;registry.gitlab.cn/omnibus/gitlab-jh:latest&#x27;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">gitlab-cn</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&#x27;gitlab.lo&#x27;</span>                          <span class="comment"># ssh hostname</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line"><span class="string">         external_url &#x27;https://gitlab.lo&#x27;          # git httpsname</span></span><br><span class="line"><span class="string">         nginx[&#x27;redirect_http_to_https&#x27;] = false</span></span><br><span class="line"><span class="string">         nginx[&#x27;listen_port&#x27;] = 8880</span></span><br><span class="line"><span class="string">         nginx[&#x27;listen_https&#x27;] = false</span></span><br><span class="line"><span class="string">         prometheus_monitoring[&#x27;enable&#x27;] = false</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;127.0.0.1:8881:8880&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;22:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./config:/etc/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./logs:/var/log/gitlab&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;./data:/var/opt/gitlab&#x27;</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">&#x27;256m&#x27;</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">8G</span></span><br></pre></td></tr></table></figure><h3 id="mysql备份脚本">MySQL备份脚本</h3><p>将MySQL文件逻辑备份文件以Docker镜像的形式推送到Docker私有镜像服务器</p><h4 id="bash脚本">bash脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">day=`<span class="built_in">date</span> <span class="string">&quot;+%Y%m%d&quot;</span>`</span><br><span class="line"><span class="built_in">cd</span> $(<span class="built_in">dirname</span> $(<span class="built_in">readlink</span> -f <span class="string">&quot;<span class="variable">$0</span>&quot;</span>))/data</span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$day</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$day</span></span><br><span class="line">mysqldump -h192.168.31.28 -uroot -proot -A | gzip &gt; <span class="variable">$day</span>.tar.gz</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MySQL备份失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;FROM busybox\nADD <span class="variable">$day</span>.tar.gz /mysql/<span class="variable">$day</span>.tar.gz&quot;</span> &gt; Dockerfile</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Dockerfile生成失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ -f Dockerfile ] &amp;&amp; docker build . -t hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;镜像生成构建失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker login -uadmin -pdeepsoft hub.deepsoft-tech.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;登录成功&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker push hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;带TAG的镜像推送失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">docker tag hub.deepsoft-tech.com/wf09/jixiaobackup:<span class="variable">$day</span> hub.deepsoft-tech.com/wf09/mysqlbackup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;镜像推送失败&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="service单元文件">service单元文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Backup MySQL Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/bash -c /home/deepsoft/backup/mysql/backup.sh </span><br><span class="line">StandardError=journal</span><br></pre></td></tr></table></figure><h4 id="timer单元文件">timer单元文件</h4><p>每周备份两次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Backup MySQL Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=Sun,Wed 03:30:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;关键词：&lt;strong&gt;运维操作&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="运维" scheme="https://fly97.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>树莓派常见操作</title>
    <link href="https://fly97.cn/p/use-usb-wifi-with-raspberry-pi/"/>
    <id>https://fly97.cn/p/use-usb-wifi-with-raspberry-pi/</id>
    <published>2022-12-01T12:00:00.000Z</published>
    <updated>2022-12-01T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：本文主要介绍树莓派的一些常见设置。</strong></p><p><strong>关键词：树莓派</strong></p><span id="more"></span><h2 id="安装外置usb网卡">安装外置USB网卡</h2><p>由于树莓派自带的网卡性能不太好，因此就想着用第三方网卡。使用的网卡如图所示。 <img data-src="微信图片_20221211193757.jpg" /></p><p>网卡芯片型号是Realtek 8211CU。</p><blockquote><p>来源 https://github.com/brektrou/rtl8821CU/issues/184</p></blockquote><p>依次执行以下操作即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install dkms bc -y</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install --reinstall raspberrypi-bootloader raspberrypi-kernel</span><br><span class="line">sudo apt-get install raspberrypi-kernel-headers</span><br><span class="line">reboot</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/brektrou/rtl8821CU.git</span><br><span class="line"><span class="built_in">cd</span> rtl8821CU</span><br><span class="line">sudo ./dkms-install.sh</span><br></pre></td></tr></table></figure><p>执行完毕以后可以修改一下系统配置，这样系统就可以自动启动WIFI网卡了。</p><p>修改一下文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /lib/udev/rules.d/40-usb_modeswitch.rules</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Realtek 8211CU Wifi AC USB</span></span><br><span class="line">ATTR&#123;idVendor&#125;==<span class="string">&quot;0bda&quot;</span>, ATTR&#123;idProduct&#125;==<span class="string">&quot;1a2b&quot;</span>, RUN+=<span class="string">&quot;/usr/sbin/usb_modeswitch -K -v 0bda -p 1a2b&quot;</span></span><br></pre></td></tr></table></figure><p>然后重启即可</p><p>重启完毕以后查看usb：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure><p><img data-src="Snipaste_2022-12-11_19-52-59.png" />此时就可以发现网卡已经正常工作了。</p><h2 id="禁用板载wifi">禁用板载WIFI</h2><p>修改boot分区下的config.txt文件</p><p>在<code>[all]</code>片段下添加以下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[all]</span><br><span class="line">dtoverlay=disable-wifi</span><br></pre></td></tr></table></figure><p>这样就可以禁用板载WIFI网卡</p><h2 id="开启wifi自动登录">开启WIFI自动登录</h2><p>在boot分区下添加<code>wpa_supplicant.conf</code>文件</p><p>按照以下格式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">country</span>=CN</span><br><span class="line"><span class="attr">ctrl_interface</span>=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line"><span class="attr">update_config</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">network</span>=&#123;</span><br><span class="line"><span class="attr">ssid</span>=<span class="string">&quot;WiFi-A&quot;</span></span><br><span class="line"><span class="attr">psk</span>=<span class="string">&quot;12345678&quot;</span></span><br><span class="line"><span class="attr">key_mgmt</span>=WPA-PSK</span><br><span class="line"><span class="attr">priority</span>=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开启ssh登录">开启SSH登录</h2><p>在boot分区下新建<code>ssh</code>文件即可</p><h2 id="更换为国内源">更换为国内源</h2><p>arm64架构的树莓派可以直接用debian的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> &gt; /etc/apt/sources.list</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian bullseye-updates main contrib non-free</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line"><span class="comment"># deb-src http://mirrors.ustc.edu.cn/debian-security/ bullseye-security main non-free contrib</span></span><br></pre></td></tr></table></figure><p>树莓派基金会源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s|//archive.raspberrypi.org|//mirrors.ustc.edu.cn/archive.raspberrypi.org|g&#x27;</span> /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;摘要：本文主要介绍树莓派的一些常见设置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：树莓派&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="pi" scheme="https://fly97.cn/tags/pi/"/>
    
  </entry>
  
  <entry>
    <title>DevOps实战（二）使用Docker搭建nexus3私有镜像仓库</title>
    <link href="https://fly97.cn/p/install-nexus3-with-docker/"/>
    <id>https://fly97.cn/p/install-nexus3-with-docker/</id>
    <published>2022-11-09T06:00:00.000Z</published>
    <updated>2022-11-09T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是DevOps？</p><p>DevOps的哲学暂且不表，使用Docker搭建nexus3私有镜像仓库。</p><p>关键词：<strong>nexus3</strong></p><span id="more"></span><h2 id="前言">前言</h2><p>在搭建K8s容器平台时，有些镜像需要经常性的被拉取，有时候外网带宽会被大量占用，这在业务上线后是不可取的，为了方便镜像的拉取，私有仓库的概念应运而生。</p><p>本文主要介绍使用nexus3搭建私有仓库。</p><h2 id="安装">安装</h2><p>为了方便起见我们这里直接使用Docker进行快速搭建。</p><p>为节省时间，我们这里先拉取好了镜像：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.6&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="comment">#user: root</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">https_proxy=http://192.168.31.75:7890</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http_proxy=http://192.168.31.75:7890</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nexus-data:/nexus-data</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">1000000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">1000000</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">38081</span><span class="string">:8081</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7890</span><span class="string">:7890</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7891</span><span class="string">:7891</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8891</span><span class="string">:8891</span></span><br></pre></td></tr></table></figure><p>这里的端口分别是nexus3界面的端口，和。。。。。。。 ##设置代理类型</p><p>Nexus3可以被称为是一个全能型的选手，可以代理几乎所有类型的仓库。</p><p><img data-src="image-20221109103319038.png" /></p><p>这里介绍几种类型，首先介绍Docker</p><h3 id="docker">docker</h3><p>docker类型分为docker(group)、docker(hosted)、docker(proxy)三种类型。</p><p>docker(proxy)：顾名思义就是代理外部仓库，创建设置可以参考以下</p><p><img data-src="image-20221109111325590.png" /></p><ul><li>这里的HTTP连接器不用选，因为我们后面会通过docker(group)类型聚合这docker(hosted)、docker(proxy)这两种类型的仓库。</li><li>远程仓库地址可以使用公开的镜像源，如：<ul><li>https://hub-mirror.c.163.com</li><li>https://mirror.baidubce.com</li><li>http://f1361db2.m.daocloud.io</li><li>https://ustc-edu-cn.mirror.aliyuncs.com</li></ul></li><li>如果网络条件允许，最好还是使用官方的源：<code>https://registry-1.docker.io</code>，这样会避免由于镜像不更新而导致的错误。</li></ul><p>docker(hosted)：允许将本地镜像推送到私有仓库的仓库类型，创建设置可以参考以下</p><p><img data-src="image-20221109111712080.png" /></p><ul><li>这里需要选择HTTP连接器，我们通过此HTTP连接器向仓库推送本地镜像</li></ul><p>docker(group)：将两者类型或者更多种类型的仓库聚合在一起，一起向外部提供服务</p><p><img data-src="image-20221109133813885.png" /></p><p><img data-src="image-20221109133917141.png" /></p><ul><li>这里需要选择HTTP连接器，我们通过此HTTP连接器拉取proxy代理的镜像和经过hosted上传的镜像；</li><li>这里选择的聚合仓库包含proxy和hosted类型的仓库，我们就可以通过此聚合仓库上传和下载镜像了；</li></ul><h4 id="nginx代理">Nginx代理</h4><p>因为某些原因，我们需要使用nginx反向代理，这里给出使用SSL证书的例子：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> hub.deepsoft-tech.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">server_name</span> hub.deepsoft-tech.com;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /ssl/idocker.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /ssl/idocker.key;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/docker.io.log main;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">chunked_transfer_encoding</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(v1|v2)/[^/]+/?[^/]+/blobs/</span> &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* (POST|PUT|DELETE|PATCH|HEAD)</span> ) &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /repository/docker-local/<span class="variable">$1</span> <span class="literal">last</span>;   <span class="comment"># docker-local是hosted类型的仓库名称</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /repository/docker/<span class="variable">$1</span> <span class="literal">last</span>;             <span class="comment"># docker是group类型的仓库名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ ^/(v1|v2)/</span> &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> <span class="regexp">~* (POST|PUT|DELETE|PATCH)</span> ) &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /repository/docker-local/<span class="variable">$1</span> <span class="literal">last</span>;  <span class="comment"># docker-local是hosted类型的仓库名称</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /repository/docker/<span class="variable">$1</span> <span class="literal">last</span>;            <span class="comment"># docker是group类型的仓库名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:38081/;                   <span class="comment"># 38081是nexus对外暴露的端口</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">3600</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这么看，hosted类型和group类型的仓库就不需要设置HTTP连接器了；</li><li>经过以上设置，推送请求就全部被hosted类型的仓库接管了，而拉取请求则被group类型的仓库接管了；</li></ul><p>经过上面的一顿操作，就可以通过一个URL拉取所有的镜像了</p><h3 id="apt仓库">APT仓库</h3><p>有时候需要缓存apt的包，所有就有了下面的文章，幸运的是nexus支持apt类型，稍加设置即可</p><p><img data-src="image-20221109152407070.png" /></p><ul><li>Distribution：发行版的代号，这里以Ubuntu LTS 20.04 为例：focal</li><li>Remote storage：代理仓库地址，可以使用镜像源</li></ul><h4 id="nginx代理-1">Nginx代理</h4><p>使用上文的配置文件即可</p><h4 id="一键替换">一键替换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s|http://mirrors.aliyun.com|https://repo.deepsoft-tech.com/repository|g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s|https://mirrors.aliyun.com/docker-ce/linux/ubuntu|https://repo.deepsoft-tech.com/repository/docker-apt&#x27;</span> /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是DevOps？&lt;/p&gt;
&lt;p&gt;DevOps的哲学暂且不表，使用Docker搭建nexus3私有镜像仓库。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;nexus3&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="devops" scheme="https://fly97.cn/tags/devops/"/>
    
    <category term="nexus3" scheme="https://fly97.cn/tags/nexus3/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础（三）输入输出接口</title>
    <link href="https://fly97.cn/p/input-output-interface/"/>
    <id>https://fly97.cn/p/input-output-interface/</id>
    <published>2022-10-28T09:26:00.000Z</published>
    <updated>2022-10-28T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Go语言输入输出接口。</p><p>关键词：<strong>golang</strong></p><span id="more"></span><h1 id="基本的io接口">基本的IO接口</h1><h2 id="reader接口">Reader接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将len(p)个字节读入到p中，返回读取的字节数n以及任何的错误。即使Read返回的n&lt;len(p)，他也会在调用过程中占用len(p)个字节作为暂存空间。若可读取的数据不到len(p)个字节，会返回可用数据，而不是等待更多数据。</p><p>当Read在成功读取n个字节后，遇到一个错误或者EOF，会返回读取的字节数，可能会在本次的调用中返回一个non-nil错误，或者在下一次调用中返回这个错误（n为0）。一般情况下，Reader会返回非0字节数n，若n=len(p)个字节从输入源内的结尾处由Read返回，Read可能返回err==EOF或者err==nil，并且之后的Read()都应该返回(n:0,err:EOF).</p><p>调用者在考虑错误之前应当首先处理返回的数据。这样做可以正确的处理在读取一些字节后产生的I/O，允许EOF出现。</p></blockquote><p>Reader的接口方法集只包含一个Read方法，实现了Read方法的类型都满足io.Reader接口，也就是说在需要io.Reader的地方，可以传递实现了Read()方法的实例。</p><p>举例说明Reader接口的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFrom</span><span class="params">(reader io.Reader, num <span class="type">int</span>)</span></span>([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    p := <span class="built_in">make</span>([]<span class="type">byte</span>, num)</span><br><span class="line">    n, err := reader.Read(p)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p[:n], <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReadFrom函数将io.Reader作为参数，ReadForm可以从任意的地方读取数据，只要来源实现了io.Reader接口。可以从标准输入、文件、字符串读取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 标准输入</span><br><span class="line">data, err = ReadFrom(os.Stdin, 11)</span><br><span class="line">// 普通文件读取，其中file是os.File的实例</span><br><span class="line">data, err = ReadFrom(file, 9)</span><br><span class="line">// 从字符串读取</span><br><span class="line">data, err = ReadFrom(strings.NewReader(&quot;form string&quot;), 12)</span><br></pre></td></tr></table></figure><h2 id="writer-接口">Writer 接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Wirte(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将len(p)个字节写入基本数据流中，返回从p中被写入的字节数n，以及任何遇到的引起的提前停止的错误。若Write返回的n&lt;len(p)，就必须返回一个非nil的错误。</p></blockquote><p>所有实现了Write方法的类型都实现了io.Writer接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span></span>(n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Fprintln(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2id="实现了reader接口或者writer接口的类型">实现了Reader接口或者Writer接口的类型</h2><ul><li>os.File同时实现了io.Reader和io.Writer</li><li>strings.Reader实现了io.Reader</li><li>bufio.Reader/Writer 分别实现了 io.Reader 和 io.Writer</li><li>bytes.Buffer同时实现了io.Reader和io.Writer</li><li>bytes.Reader实现了io.Reader</li><li>compress/gzip.Reader/Writer 分别实现了io.Reader和io.Writer</li><li>crypto/cipher.StreamReader/StreamWriter 分别实现了 io.Reader 和io.Writer</li><li>crypto/tls.Conn同时实现了io.Reader和io.Writer</li><li>encoding/csv.Reader/Writer 分别实现了 io.Reader 和 io.Writer</li><li>mine/multpart.Part实现了io.Reader</li><li>net/conn分别实现了io.Reader和io.Writer（Conn接口定义了Read/Write）</li></ul><h2 id="closer接口">Closer接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Close() <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口比较简单，只有一个close()方法，用于关闭数据流；</p><p>文件、归档、数据库链接、Socket等需要手动关闭的资源都实现了Closer接口；</p><p>实际编程中通常将Close方法的调用放在defer语句中。</p><h1 id="ioutil-方便的io操作函数集">ioutil 方便的IO操作函数集</h1><h2 id="nopcloser函数">NopCloser函数</h2><p>有时候我们需要传递一个io.ReadCloser实例，而我们现在有一个io.Reader实例。</p><p>使用NopCloser包装一个Reader，返回一个io.ReaderCloser，相应的Close方法什么也不做，只是返回nil；</p><p>比如在标准库net/http包中的NewRequest，接收一个io.Reader的body，实际上Request的Body的类型是io.ReadCloser，因此代码内部做了判断：</p><p>如果传入的io.Reader也实现了io.ReaderCloser接口，则转换，否则通过ioutil.NopCloser包装一下。</p><h2 id="readall函数">ReadAll函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span></span>([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>一次性读取io.Reader中的所有数据</p><h2 id="readdir函数">ReadDir函数</h2><p>输出某目录下面的所有文件（包括子目录）</p><h2 id="readfile和writefile函数">ReadFile和WriteFile函数</h2><p>ReadFile读取整个文件的内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(filename <span class="type">string</span>)</span></span>([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><blockquote><p>从指定的filename的文件中读取数据并返回文件的内容，成功的调用返回的err为nil而非EOF。因为本函数定义为读取整个文件不会将读取的EOF视为报告的错误</p></blockquote><p>WriteFile将data写入filename文件中，当文件不存在时会根据perm指定的权限创建一个，文件存在时会先清空内容，对于perm参数，可以指定为0666.</p><h2 id="tempdir和tempfile函数">TempDir和TempFile函数</h2><p>一般操作系统都会允许创建临时目录，比如linux下的/tmp目录。</p><p>通过TempDir可以创建一个临时目录，用于存放编译过程的临时目录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.work, err = ioutil.TempDir(<span class="string">&quot;&quot;</span>, <span class="string">&quot;tmp&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果第一个参数为空，表面在系统默认的临时目录中创建临时目录，第二个参数指定临时目录的前缀，函数返回临时目录的路径；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1, err := ioutil.TempFile(<span class="string">&quot;&quot;</span>, <span class="string">&quot;gofmt&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建者创建的临时变量和临时目录要负责删除这些临时目录和文件，比如删除临时文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f.<span class="built_in">close</span>()</span><br><span class="line">    os.Remove(f.Name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍了Go语言输入输出接口。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;golang&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://fly97.cn/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（十二）如何恢复etcd集群并重建k3s集群</title>
    <link href="https://fly97.cn/p/restoring-etcd-cluster/"/>
    <id>https://fly97.cn/p/restoring-etcd-cluster/</id>
    <published>2022-09-17T06:38:00.000Z</published>
    <updated>2022-09-17T06:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍在etcd集群崩溃时如何恢复。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><h2 id="背景">背景</h2><p>本人在实习公司主要负责管理k8s集群工作。使用的发行版是v1.24.3+k3s1。</p><p>为什么使用k3s呢，主要因为这个搭建比较方便，只需要一个二进制文件就可以起来一个集群。</p><p>在搭建集群的时候，考虑要保证集群高可用，因此使用了官网提供的<strong><ahref="https://docs.rancher.cn/docs/k3s/installation/ha-embedded/_index/">嵌入式DB的高可用| Rancher文档</a></strong>方案。</p><p>网站上写了<strong>需要奇数的 server节点，并且建议从三个节点开始</strong>。</p><p>因为我们现在管理的集群比较小，因此就<strong>使用了两个节点作为server节点</strong>。<strong>这为下文集群出现故障埋下了伏笔。</strong></p><p>⚠<strong>etcd 为了避免脑裂，采用了 raft算法，规定只有过半数节点在线才能提供服务，即 N/2+1 节点在线才能选出Leader。即如果有一个server挂了，那么集群就挂掉了！！</strong></p><p>因为某些原因，我将集群中的一个server踢出了集群，此时集群就不可用了。具体表现为：</p><p>在master节点上执行<code>kubectl get node</code>无法正常回显。</p><p>于是就有了本文。</p><h2 id="etcd集群恢复">etcd集群恢复</h2><p>当集群超过半数节点宕机，此时集群出于无法正常工作的状态，需要尽快恢复。</p><p>若机器宕机重启，IP保持不变，则证书无需重新生成；若IP更换，则还需要重新生成证书。</p><p>集群恢复还需要生成etcd的备份数据：使用<code>etcdctl snapshot save</code>命令备份或者从etcd数据目录复制<code>snap/db</code>文件。</p><h3 id="将备份数据恢复至集群">将备份数据恢复至集群</h3><p>首先明确k3s内置的etcd数据在<code>/var/lib/rancher/k3s/server/db/etcd</code>这个目录；</p><p>和etcd相关的证书在<code>/var/lib/rancher/k3s/server/tls/etcd</code>这个目录；</p><p>etcd配置文件在<code>/var/lib/rancher/k3s/server/db/etcd/config</code>这个文件。</p><p>以下操作都是在matser节点上执行的</p><ol type="1"><li><p>将k3s相关服务先关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop k3s</span><br></pre></td></tr></table></figure></li><li><p>安装一个etcd集群</p><p>这里为了简化操作，使用一个etcd服务端代替集群。</p><p>这里配置文件大部分还是使用原来k3s集群的配置文件，将数据的保存路径修改一下，安装完毕以后，将原有的etcd目录删除，然后启动etcd服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo etcd --config-file /newpath/etcd/config</span><br></pre></td></tr></table></figure></li><li><p>使用etcd客户端执行恢复etcd数据命令，这里的证书还是原来k3s集群使用的证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo etcdctl --endpoints=https://x.x.x.x:2379 --cert=client.crt --key=client.key --cacert=server-ca.crt --data-dir=/newpath/etcd/data snapshot restore snap/db</span><br></pre></td></tr></table></figure></li><li><p>修改k3s服务端相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/local/bin/k3s \</span><br><span class="line">    server \</span><br><span class="line">        <span class="string">&#x27;--disable=metrics-server&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--flannel-backend=host-gw&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--write-kubeconfig-mode=644&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--datastore-endpoint=https://192.168.31.29:2379&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--datastore-cafile=/var/lib/rancher/k3s/server/tls/etcd/server-ca.crt&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--datastore-certfile=/var/lib/rancher/k3s/server/tls/etcd/server-client.crt&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--datastore-keyfile=/var/lib/rancher/k3s/server/tls/etcd/server-client.key&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--bind-address=192.168.31.29&#x27;</span> \</span><br><span class="line">        <span class="string">&#x27;--kube-scheduler-arg=&#x27;</span>config=/usr/local/etc/scheduler-policy-config.yaml<span class="string">&#x27;&#x27;</span> \</span><br></pre></td></tr></table></figure></li><li><p>重启k3s服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart k3s</span><br></pre></td></tr></table></figure><p>此时k3s服务应该可以正常启动了，但是还会有些问题，如原来删除的节点的一些信息还存在etcd集群中，但是k3sapiserver中不存在相应的数据，此时只能执行强制删除操作。</p><p>在master节点上执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete xxx --force --grace-period=0</span><br></pre></td></tr></table></figure></li></ol><p>​ 其中xxx代之相应的资源</p><ol start="6" type="1"><li><p>如果还出现异常的话，需要链接到etcd服务端，直接执行删除操作：</p><p>先查找所有的etcd对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl.exe --cacert=certs\server-ca.crt --cert=certs\client.crt --key=certs\client.key --endpoints=https://192.168.31.29:2379 get <span class="string">&quot;&quot;</span>  --prefix --keys-only</span><br></pre></td></tr></table></figure><p>然后删除和master节点有关的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl.exe --cacert=certs\server-ca.crt --cert=certs\client.crt --key=certs\client.key --endpoints=https://192.168.31.29:2379 del /registry/csinodes/pve-master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcdctl.exe --cacert=certs\server-ca.crt --cert=certs\client.crt --key=certs\client.key --endpoints=https://192.168.31.29:2379 del /registry/csinodes/pve-master</span><br></pre></td></tr></table></figure></li></ol><p>完。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍在etcd集群崩溃时如何恢复。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>运维开发（一）MySQL备份</title>
    <link href="https://fly97.cn/p/MySQL-backup/"/>
    <id>https://fly97.cn/p/MySQL-backup/</id>
    <published>2022-09-07T06:10:00.000Z</published>
    <updated>2022-09-07T06:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍MySQL备份。</p><p>关键词：<strong>MySQL</strong></p><span id="more"></span><h2 id="逻辑备份">逻辑备份</h2><p>数据库对象级备份，备份内容是表、索引、存储过程等数据库对象，常见工具为MySQLmysqldump、Oracle exp/imp等。</p><p>逻辑备份备份速度较慢，恢复速度较慢，体积较大，需要数据库正常运行才可以执行逻辑备份。</p><p>优点是备份级别可控，即可以任意选择备份的数据库或者备份的表。</p><p>逻辑备份适用于任何存储引擎，一般使用<strong>mysqldump</strong>进行数据库的逻辑备份。</p><h3 id="常见参数">常见参数</h3><table><colgroup><col style="width: 22%" /><col style="width: 4%" /><col style="width: 66%" /><col style="width: 6%" /></colgroup><thead><tr class="header"><th>参数名</th><th>缩写</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr class="odd"><td>--user</td><td>-u</td><td>用户名</td><td></td></tr><tr class="even"><td>--password</td><td>-p</td><td>密码</td><td></td></tr><tr class="odd"><td>--host</td><td>-h</td><td>数据库地址</td><td></td></tr><tr class="even"><td>--port</td><td>-P</td><td>数据库端口号</td><td></td></tr><tr class="odd"><td>--databases</td><td>-B</td><td>指定要备份的数据库</td><td></td></tr><tr class="even"><td>--all-databases</td><td>-A</td><td>备份mysql服务器上所有的数据库</td><td></td></tr><tr class="odd"><td>--add-drop-database</td><td></td><td>每个数据库创建之前添加drop数据库语句</td><td>未开启</td></tr><tr class="even"><td>--add-drop-table</td><td></td><td>创建表之前添加drop语句</td><td>开启</td></tr><tr class="odd"><td>--event</td><td>-E</td><td>导出事件</td><td>未开启</td></tr><tr class="even"><td>--routines</td><td>-R</td><td>导出存储过程以及自定义函数</td><td>未开启</td></tr><tr class="odd"><td>--triggers</td><td></td><td>导出触发器</td><td>开启</td></tr><tr class="even"><td>--extended-insert</td><td>-e</td><td>使用具有多个VALUES列的INSERT语法</td><td>开启</td></tr><tr class="odd"><td>--ignore-table</td><td></td><td>指定不导出的表。需要忽略多个表时，需要重复多次</td><td></td></tr><tr class="even"><td>--no-data</td><td>-d</td><td>不导出任何数据，只导出数据库表</td><td></td></tr><tr class="odd"><td>--no-create-info</td><td>-t</td><td>只导出数据，不添加CREATE TABLE语句</td><td></td></tr><tr class="even"><td>--force</td><td>-f</td><td>导出过程中忽略SQL错误</td><td></td></tr><tr class="odd"><td>--tz-utc</td><td></td><td>导出顶部设置时区TIME_ZONE='+00:00'</td><td>开启</td></tr><tr class="even"><td>--where</td><td>-w</td><td>只转储指定WHERE条件选择的记录</td><td></td></tr><tr class="odd"><td>--set-gtid-purged</td><td></td><td>是否添加SET @<span class="citation"data-cites="GLOBAL.GTID_PURGED输出">@GLOBAL.GTID_PURGED输出</span></td><td></td></tr><tr class="even"><td>--single-transaction</td><td></td><td>通过在一个事务中导出所有表从而创建一个一致性的快照，适用于innodb引擎</td><td></td></tr><tr class="odd"><td>--master-data</td><td></td><td>该选项将当前服务器的binlog的位置和文件名追加到输出文件中。如果为1，将会输出CHANGEMASTER命令；如果为2，输出的CHANGE MASTER命令前添加注释信息</td><td></td></tr></tbody></table><h3 id="参考命令">参考命令</h3><p><strong>导出、导入所有的库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot -hlocalhost -A &gt; all_mysql_data.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot -hlocalhost &lt; all_muysql_data.sql</span><br></pre></td></tr></table></figure><p><strong>导出、导入指定库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot -hlocalhost newcoder &gt; newcoder.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot -hlocalhost &lt; newcoder.sql</span><br></pre></td></tr></table></figure><p><strong>导出、导入某几个库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot -hlocalhost -B aaa bbb &gt; aaa_bbb.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -proot -hlocalhost &lt; aaa_bbb.sql</span><br></pre></td></tr></table></figure><p><strong>导出、导入某个库的某些表数据</strong></p><p>比如操作aaa数据库的bbb表和ccc表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以在导出时加--add-locks参数，表示导出时锁定数据库表</span></span><br><span class="line">mysqldump -uroot -proot -hlocalhost aaa bbb ccc &gt; bbb_ccc.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要确保aaa库存在</span></span><br><span class="line">mysql -uroot -proot -hlocalhost aaa  &lt; bbb_ccc.sql</span><br></pre></td></tr></table></figure><p><strong>只导出数据库结构，不导出数据</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot -hlocalhost aaa -d &gt; bbb_ccc.sql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要确保aaa库存在</span></span><br><span class="line">mysql -uroot -proot -hlocalhost aaa &lt; bbb_ccc.sql</span><br></pre></td></tr></table></figure><h2 id="物理备份">物理备份</h2><p>数据库文件级备份，备份内容是操作系统上数据库文件，常见工具为MySQLXtraBackup、Oracle RMAN等。</p><p>由存储数据库的内容和文件的副本组成，适用于大型数据库。</p><p>优点是备份速度快，恢复速度快，体积小。</p><p>如果数据库正在运行，需要先执行锁定数据库，防止在备份期间更改数据库的内容。</p><p>一般使用XtraBackup进行数据备份。</p><h3 id="xtrabackup优点">Xtrabackup优点</h3><ul><li><p>备份速度快，物理备份可靠</p></li><li><p>备份过程不会打断正在执行的事务（无需锁表）</p></li><li><p>能够基于压缩等功能节约磁盘空间和流量</p></li><li><p>自动备份校验</p></li><li><p>还原速度快</p></li><li><p>可以流传将备份传输到另外一台机器上</p></li><li><p>在不增加服务器负载的情况备份数据</p></li></ul><h3 id="xtrabackup常见参数">Xtrabackup常见参数</h3><table><colgroup><col style="width: 22%" /><col style="width: 72%" /><col style="width: 4%" /></colgroup><thead><tr class="header"><th>参数</th><th>含义</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>--backup</td><td>备份到指定目录</td><td></td></tr><tr class="even"><td>--target-dir</td><td>指定目录</td><td></td></tr><tr class="odd"><td>--stream</td><td>流式传输指定备份，参数xbstream</td><td></td></tr><tr class="even"><td>--compress</td><td>是否启用压缩备份</td><td></td></tr><tr class="odd"><td>--compress-threads</td><td>指定压缩线程</td><td></td></tr><tr class="even"><td>--databases</td><td>指定要备份的数据库</td><td></td></tr><tr class="odd"><td>--databases-exclude</td><td>排除要备份的数据库</td><td></td></tr><tr class="even"><td>--user</td><td>用户名</td><td></td></tr><tr class="odd"><td>--password</td><td>密码</td><td></td></tr><tr class="even"><td>--host</td><td>数据库IP</td><td></td></tr><tr class="odd"><td>--rsync</td><td>使用rsync工具优化本地传输，当指定这个选项，innobackupex使用rsync拷贝非Innodb文件而替换cp，当有很多DB和表的时候会快很多，不能--stream一起使用。</td><td></td></tr></tbody></table><h3 id="参考命令-1">参考命令</h3><p><strong>流式备份并压缩、解压</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --backup --user=root --password=root --host=192.168.31.75 --stream=xbstream | gzip  &gt; `<span class="built_in">date</span> +%Y%m%d`.gz</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -f -d &lt; `<span class="built_in">date</span> +%Y%m%d`.gz  | xbstream -x -C mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍MySQL备份。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="SRE" scheme="https://fly97.cn/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（十一）编写一个自定义资源CRD</title>
    <link href="https://fly97.cn/p/create-crd-in-kubernetes/"/>
    <id>https://fly97.cn/p/create-crd-in-kubernetes/</id>
    <published>2022-09-04T06:38:00.000Z</published>
    <updated>2022-09-04T06:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何在Kubernetes编写自定义资源CRD。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><h2 id="前言">前言</h2><p>Kubernetes的最大亮点之一必定是它的声明式API设计，所谓的声明式就是告诉Kubernetes你要什么，而不是告诉它怎么做命令。我们日常使用Kubernetes做编排工作的时候，经常会接触Deployment、Service、Pod等资源对象，我们可以很灵活地创建其定义配置，然后执行kubectlapply命令，Kubernetes总能为我们创建相关资源对象并完成资源的注册，进而执行资源所负责的功能。</p><p>CRD，称之为自定义资源定义，本质上，它的表现形式是一段声明，用于定义用户定义的资源对象罢了。单单通过它还不能产生任何收益，因为开发者还要针对CRD定义提供关联的CRD对象CRD控制器（CRDController）。CRD控制器通常可以通过Golang进行开发，只需要遵循Kubernetes的控制器开发规范，并基于client-go进行调用，并实现Informer、ResourceEventHandler、Workqueue等组件逻辑即可。听起来感觉很复杂的样子，不过其实真正开发的时候，并不困难，因为大部分繁琐的代码逻辑都能通过Kubernetes的codegenerator代码生成出来。关于如何进行CRD控制器的开发，下面我们会通过一个例子慢慢地深入，希望通过实践来理解CRD的原理。</p><h2 id="声明式api">声明式API</h2><h3 id="命令式api">命令式API</h3><p>首先，声明式API是相对于命令式API而言的。</p><p>假设我们想创建一个deployment，可以创建一个下面的yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>然后在master执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f nginx.yaml</span><br></pre></td></tr></table></figure><p>然后这两个Pod就跑起来了。</p><p>如果想修改上的资源清单，需要先修改资源文件，然后再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl replace -f nginx.yaml</span><br></pre></td></tr></table></figure><p>以上基于yaml文件操作的方式，被称作命令式API。同样属于命令式API的还有DockerSwarm的创建方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name nginx --replicas 2  nginx</span><br></pre></td></tr></table></figure><h3 id="声明式api-1">声明式API</h3><p><strong>kubectl apply</strong> 的操作属于声明式API。</p><p>kubectlreplace的操作，可以看作是使用新的YAML文件的API对象，<strong>替换原有的API对象</strong>；kubectlset image和 kubelctl edit也是对原有对象的修改，这些都属于命令式API。</p><p>kube-apiserver在响应命令式请求时，只能一次处理一个写请求，否则可能会出现冲突。</p><p>而对于apply的声明式请求，可以一次处理多个写操作，并且具备merge能力。</p><p>所谓声明式API，<strong>就是告诉kubernetes你要什么，而不是告诉他怎么做命令</strong>。在日常做容器编排时，经常会操作Deployment、Service、Pod等资源对象，我们可以很灵活的创建其自定义配置，然后执行kubectlapply命令，kubernetes可以创建相关资源对象并完成资源的注册，进而执行资源所负责的功能。</p><p>有了自定义API对象，开发者就不需要逐一进行Deployment、Service、ConfigMap等步骤，而是创建一些可以表述整个应用程序或者软件服务的对象。除此之外，我们还可以在创建高阶对象的基础上创建底层对象。例如：我们想要创建一个backup资源，在定义yaml的同时，可以希望通过spec的定义进行日常的备份操作声明，当提交给k8s集群时，相关的Deployment、Service资源会被自动创建，很大程度上让业务扩展性加大。</p><h3 id="crd">CRD</h3><p>CRD，称之为自定义资源定义，本质上，它的表现形式是一段声明，用于定义用户定义的资源对象罢了。单单通过它还不能产生任何收益，因为开发者还要针对CRD定义提供关联的CRD对象CRD控制器（CRDController）。CRD控制器通常可以通过Golang进行开发，只需要遵循Kubernetes的控制器开发规范，并基于client-go进行调用，并实现Informer、ResourceEventHandler、Workqueue等组件逻辑即可。听起来感觉很复杂的样子，不过其实真正开发的时候，并不困难，因为大部分繁琐的代码逻辑都能通过Kubernetes的codegenerator代码生成出来。关于如何进行CRD控制器的开发，下面我们会通过一个例子慢慢地深入，希望通过实践来理解CRD的原理。</p><h2 id="api">API</h2><p>整个kubernetes里所有API对象都可以用下面的树形结构表示出来：</p><p><img data-src="编写一个自定义资源对象CRD/NeatReader-1663224393771.png" /></p><p>可以看出，API对象的组织方式，是层层递进的。</p><p>如果现在想要创建一个CronJob对象，那么YAML文件的开始部分需要这样写：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiversion:</span> <span class="string">batch/v2alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br></pre></td></tr></table></figure><p>对于上文，Crontab是这个API对象的资源类型，batch是他的组，v2alpha1是版本；</p><p>当提交了这个yaml文件一行，kubernetes就会把这个YAML文件描述内容，转换成一个CronJob对象</p><p>apiserver会遵循以下的流程：</p><ol type="1"><li><p>匹配API对象的组。</p><p>通常核心对象如Pod、Node不需要group，直接在/api这个层级下进行匹配；</p><p>而对于CronJob等非核心API对象来说，Kubernetes必须在/apis这个层级下找到对应的Group，根据batch，找到/apis/batch。</p><p>API是根据对象功能为依据的。如Job和CronJob就属于batch这个Group。</p></li><li><p>匹配API对象的版本号</p><p>对于CronJob这个API对象来说，Kubernetes在batch这个Group下，匹配的版本号就是v2alpha1</p><p>K8s中同一种API对象可以由多个版本，这正是K8s进行API版本化管理的手段</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何在Kubernetes编写自定义资源CRD。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（十）在Kubernetes部署MinIO对象存储服务器</title>
    <link href="https://fly97.cn/p/Install-MinIO-on-k8s/"/>
    <id>https://fly97.cn/p/Install-MinIO-on-k8s/</id>
    <published>2022-08-04T05:25:00.000Z</published>
    <updated>2022-08-04T05:25:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何安装和使用云原生对象存储服务器MinIO。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><h2 id="前言">前言</h2><p>MinIO 是在 GNU Affero 通用公共许可证 v3.0下发布的高性能对象存储。它与 Amazon S3 云存储服务 API 兼容。使用 MinIO为机器学习、分析和应用程序数据工作负载构建高性能基础架构。</p><p>本文主要介绍如何使用<ahref="https://github.com/minio/operator/blob/master/README.md">MinIOKubernetes Operator</a>部署和安装MinIO。</p><h2 id="准备工作">准备工作</h2><p>正常运行的K8s集群，这里使用三个master节点，两个worker节点进行演示；</p><p><img data-src="2022-08-12-14-15-48-image.png" /></p><p>在K8s上部署MinIO一般有两种方式，一种是通过Helm进行自动安装，还有一种是通过<strong>MinIOKubernetesOperator</strong>部署安装。处于学习的角度考虑，这里采用Operator进行手动安装</p><h2 id="部署minio-operator">部署MinIO Operator</h2><h3 id="安装kubectl-minio插件">安装kubectl-minio插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/minio/operator/releases/latest/download/kubectl-minio_linux_amd64.zip</span><br><span class="line">sudo unzip kubectl-minio_linux_amd64.zip -d /usr/local/bin/</span><br></pre></td></tr></table></figure><p>检查是否正常安装</p><p>如果显示版本号则说明插件安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wf09@amd-server ➜  ~ kubectl minio version</span><br><span class="line">v4.4.28</span><br></pre></td></tr></table></figure><h3 id="初始化minio-operator">初始化MinIO Operator</h3><h4 id="部署">部署</h4><p><code>--image</code>、<code>--console-image</code>分别指定私有仓库的镜像，这样可以节约部署的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl minio init \</span><br><span class="line">--image=hub.deepsoft-tech.com/minio/operator \</span><br><span class="line">--console-image=hub.deepsoft-tech.com/minio/console</span><br></pre></td></tr></table></figure><p>稍候片刻，可以看到下面的回显，说明部署完毕</p><p><img data-src="2022-08-12-15-04-50-image.png" /></p><h4 id="查看部署的资源">查看部署的资源</h4><p>可以查看minio-operator命名空间下的资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all -n minio-operator</span><br></pre></td></tr></table></figure><p><img data-src="2022-08-12-15-06-13-image.png" /></p><p>当所有Pod都为Running时，表示服务已经Ready了</p><h4 id="登录operator控制台">登录operator控制台</h4><p>可以通过kube-proxy访问控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl minio proxy </span><br></pre></td></tr></table></figure><p><img data-src="2022-08-12-15-41-52-image.png" /></p><p>记录JWT，并输入打开的浏览器页面</p><p><img data-src="2022-08-12-15-43-33-image.png" /></p><p>输入JWT，跳转到下一步</p><p><img data-src="2022-08-12-15-46-50-image.png" /></p><h2 id="部署多租户minio-tenant集群">部署多租户MinIO tenant集群</h2><h3 id="创建storangeclass">创建StorangeClass</h3><p>可以通过外部StorangeClass+PVC可以实现自动生成PV。</p><h4 id="k3s-local-path-provisioner-storangeclass">K3slocal-path-provisioner StorangeClass</h4><p>K3s Local PV 可以在本机通过PV控制器与Scheduler的结合，会对localPV做针对性的逻辑处理，从而，让Pod在多次调度时，能够调度到同一个Node上。</p><p>安装方式也很简单，默认在K3s集群中就自动安装完毕了。</p><p>若之前禁用了此安装，只需删除<code>--disable=local-storage</code>即可。</p><h4 id="minio-directpv-storangeclass">MinIO directpv StorangeClass</h4><p>DirectPV是用于直连存储的CSI驱动程序。从更简单的意义上讲，它是一个分布式持久卷管理器，而不是像SAN或NAS这样的存储系统。跨服务器发现、格式化、装载、调度和监视驱动器非常有用。由于<strong>KuberneteshostPath和LocalPV</strong>是静态配置的，并且功能有限，因此创建DirectPV就是为了解决这一限制。</p><p>以下是安装步骤</p><ol type="1"><li><p>安装kubectl directpv插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/minio/directpv/releases/latest/download/kubectl-directpv_linux_amd64.zip</span><br><span class="line">sudo unzip kubectl-directpv_linux_amd64.zip -d /usr/local/bin/</span><br></pre></td></tr></table></figure></li><li><p>检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl directpv --version</span><br></pre></td></tr></table></figure></li></ol><p>    如显示版本号说明安装成功了</p><ol start="3" type="1"><li><p>初始化 directpv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl directpv init </span><br></pre></td></tr></table></figure></li><li><p>检查是否初始化成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get all -n direct-csi-min-io</span><br></pre></td></tr></table></figure><p>查看上述命令的回显，如果PodStatus全部显示Running说明初始化成功</p></li><li><p>格式化磁盘</p><p>以下命令可以格式化所有磁盘，当所有磁盘格式化完毕以后，就可以分配PV了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl directpv drives format -a</span><br></pre></td></tr></table></figure><p>如果想释放某个节点，即不让该节点的设备分配PV，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl directpv drives release --nodes amd-server</span><br></pre></td></tr></table></figure></li><li><p>查看节点磁盘状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl directpv drives <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li></ol><p>    显示为Ready的节点，可以分配PV</p><p>    <img title="" data-src="2022-08-12-18-24-17-image.png" alt="" data-align="inline" width="611"></p><h3 id="创建-minio-tenant集群">创建 MinIO tenant集群</h3><h4 id="创建命名空间">创建命名空间</h4><p>需要将minio租户放在一个特定的命名空间中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create ns minio</span><br></pre></td></tr></table></figure><h4 id="创建-minio-tenant集群-1">创建 MinIO tenant集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl minio tenant create minio  \</span><br><span class="line">  --servers 4 \</span><br><span class="line">  --volumes 8 \</span><br><span class="line">  --capacity 200Gi \</span><br><span class="line">  --storage-class direct-csi-min-io \</span><br><span class="line">  --namespace minio \</span><br><span class="line">  --disable-tls</span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 46%" /><col style="width: 53%" /></colgroup><thead><tr class="header"><th>参数</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#kubectl-minio-tenant-create-servers"><code>--servers</code></a></td><td><code>minio</code>要跨 Kubernetes 集群部署的服务器数量。</td></tr><tr class="even"><td><ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#kubectl-minio-tenant-create-volumes"><code>--volumes</code></a></td><td>集群中的卷数。通过将确定每个服务器的卷数通过。<ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#command-kubectl-minio"><code>kubectl minio</code></a><code>volumes``servers</code></td></tr><tr class="odd"><td><ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#kubectl-minio-tenant-create-capacity"><code>--capacity</code></a></td><td>集群的总容量。确定每个体积的通过划分容量通过。<ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#command-kubectl-minio"><code>kubectl minio</code></a><code>capacity``volumes</code></td></tr><tr class="even"><td><ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#kubectl-minio-tenant-create-storage-class"><code>--storage-class</code></a></td><td><code>StorageClass</code>创建每个 PVC 时要使用的 Kubernetes。此示例使用 MinIO <ahref="https://github.com/minio/direct-csi">DirectCSI</a> 存储类。</td></tr><tr class="odd"><td><ahref="https://docs.min.io/minio/k8s/reference/minio-kubectl-plugin.html#kubectl-minio-tenant-create-namespace"><code>--namespace</code></a></td><td>用于部署 MinIO 租户的 Kubernetes 命名空间。</td></tr></tbody></table><p>注释：我们的集群有4个节点，<code>--servers=4</code>；总共4个卷，即每个节点上各有一个卷<code>--volumes 4</code>；总共容量是100G（由于奇偶校验等原因，最大可以存50G的数据）<code>-capacity 100Gi</code>；</p><p><img data-src="2022-08-15-14-00-42-image.png" /></p><h3 id="将集群暴露至外部">将集群暴露至外部</h3><p>将对应的service连接至ingress即可。</p><h4 id="s3-api">s3 API</h4><p>s3 API对应的是 minio Service</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">minio</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">s3.deepsoft-tech.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">minio</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="minio-控制台">MinIO 控制台</h4><p>控制台对应的是 minio-console Service</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">minio-console</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">minio</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">minio-console.deepsoft-tech.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">minio-console</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">number:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><h4 id="检查">检查</h4><p>登录控制台，查看s3存储桶信息</p><p><img data-src="2022-08-15-14-07-09-image.png" /></p><h2 id="使用-minio-client-连接-minio-集群">使用 MinIO Client 连接 minio集群</h2><h3 id="binary-download-gnulinux">Binary Download (GNU/Linux)</h3><table><colgroup><col style="width: 12%" /><col style="width: 16%" /><col style="width: 71%" /></colgroup><thead><tr class="header"><th>Platform</th><th>Architecture</th><th>URL</th></tr></thead><tbody><tr class="odd"><td>GNU/Linux</td><td>64-bit Intel</td><td>https://dl.min.io/client/mc/release/linux-amd64/mc</td></tr><tr class="even"><td></td><td>64-bit PPC</td><td>https://dl.min.io/client/mc/release/linux-ppc64le/mc</td></tr></tbody></table><h3 id="docker">Docker</h3><h4 id="docker-stable">Docker Stable</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/mc </span><br><span class="line">docker run minio/mc <span class="built_in">ls</span> play</span><br></pre></td></tr></table></figure><h4 id="docker-edge">Docker Edge</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/mc:edge</span><br><span class="line">docker run minio/mc:edge <span class="built_in">ls</span> play</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Above examples run <code>mc</code> againstMinIO <ahref="https://docs.min.io/docs/minio-client-complete-guide.html#test-your-setup"><em>play</em> environment</a> bydefault. To run <code>mc</code> against other S3 compatible servers,start the container this way:</p><p>Copy<code>docker run -it --entrypoint=/bin/sh minio/mc</code></p><p>then use the <ahref="https://docs.min.io/docs/minio-client-complete-guide.html#3-add-a-cloud-storage-service"><code>mc alias</code> command</a>.</p><h3 id="添加集群">添加集群</h3><p>账户名：root，密码：rootroot</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc config host add k8s http://s3.deepsoft-tech.com root rootroot --api s3v4</span><br></pre></td></tr></table></figure><h4 id="查看集群的桶">查看集群的桶</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc <span class="built_in">ls</span> k8s</span><br></pre></td></tr></table></figure><p><img data-src="2022-08-15-14-46-20-image.png" /></p><h4 id="备份文件到指定集群">备份文件到指定集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mc mirror -a textbook/ k8s/textbook</span><br></pre></td></tr></table></figure><ul><li><p><code>-a</code> ：属性同步备份</p></li><li><p><code>-w</code>：阻塞备份，<code>--watch</code></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何安装和使用云原生对象存储服务器MinIO。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（九）使用StatefulSet 搭建高可用的MySQL集群</title>
    <link href="https://fly97.cn/p/install-mysql-ha-on-k8s/"/>
    <id>https://fly97.cn/p/install-mysql-ha-on-k8s/</id>
    <published>2022-07-27T15:28:00.000Z</published>
    <updated>2022-07-27T15:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何使用StatefulSet搭建高可用的MySQL集群。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><h2 id="前言">前言</h2><p>为什么要用K8s搭建MySQL集群？</p><ul><li>在业务全面上云的背景下，为了要使用现有的设备快速搭建高可用的MySQL集群，K8s无非是一种比较方便的方案。</li></ul><h2 id="statefulset">StatefulSet</h2><p>StatefulSet被用来管理<strong>有状态应用</strong>的工作负载API对象。MySQL服务就是一个典型的有状态应用。</p><p>和Deployment类似，StatefulSet也是用来管理基于相同容器Spec的一组Pod。但和Deployment不同的是，StatefulSet为他们的Pod维护了一个<strong>有粘性的ID</strong>。这些Pod是基于相同的Spec来创建的，但是不能替换：无论怎么调度，他们Pod都有一个永久不变的ID。</p><p>如果使用PV卷为Pod提供持久存储，可以使用StatefulSet作为解决方案的一部分，尽管StatefulSet中的单个Pod仍可能出现故障，但持久的Pod 标识符使得将现有卷与替换已失败 Pod 的新 Pod 相匹配变得更加容易。</p><p>StatefulSet主要用于以下状态的应用更新：</p><ul><li>需要稳定的、唯一的网络标识符；</li><li>需要稳定的、持久的存储；</li><li>需要有序的、优雅的部署和扩缩；</li><li>需要有序的、自动的滚动更新。</li></ul><p>稳定意味着Pod的调度或者重新调度的整个过程是持久性的；</p><p>如果应用程序不需要任何稳定的标识符或者有序的部署、删除或扩缩，则应该使用无状态的副本控制提供的工作负载来部署应用程序，如Deployment或者ReplicaSet；</p><ul><li>StatefulSet的应用都是一个一个<strong>依次创建</strong>的；</li></ul><h3 id="限制">限制</h3><ul><li><p>Pod存储必须要由PV驱动基于StrongeClass来提供，或者由管理员预先提供；</p></li><li><p>删除或者扩缩StatefulSet<strong>不会删除它关联的PVC</strong>；</p></li><li><p>StatefulSet需要<strong>无头服务（headlessservice）</strong>来负责创建Pod的网络标识，管理员需要创建此服务；</p></li><li><p>当删除一个StatefulSet时，StatefulSet不提供任何终止Pod的保证。为了实现StatefulSet有序终止，可以在删除之前将StatefulSet缩容至0；</p></li><li><p>默认Pod管理策略是滚动更新，出现异常时可能<strong>需要人工干预</strong>才能恢复</p></li></ul><h3 id="组件">组件</h3><p>下面的示例演示了StatefulSet的组件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># 必须匹配 .spec.template.metadata.labels</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span> <span class="comment"># 默认值是 1</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">10</span> <span class="comment"># 默认值是 0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span> <span class="comment"># 必须匹配 .spec.selector.matchLabels</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">k8s.gcr.io/nginx-slim:0.8</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">www</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span> [ <span class="string">&quot;ReadWriteOnce&quot;</span> ]</span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;my-storage-class&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><h2 id="mysql-ha搭建">MySQL HA搭建</h2><p>普通MySQL集群的搭建可以参考：https://www.modb.pro/db/29214</p><p>主要就是以下几个步骤：</p><ol type="1"><li>安装数据库</li><li>主库开启binlog</li><li>授权</li><li>登陆主库查看此时日子状态</li><li>导出主库当前数据</li><li>从库和指定serverid</li><li>从库写入主库数据</li><li>指定开始同步位置</li></ol><p>K8s集群上的MySQL集群搭建略有不同，主要通过StatefulSet+ConfigMap+initContainer的模式和xtrabackup+ncat软件来实现主从复制；</p><ol type="1"><li>首先创建主库和从库的my.cnf文件，存入ConfigMap。这样可以持久化配置文件；</li><li>然后创建InitContainer。InitContainer容器是首先创建的容器，且该容器成功推出是PodReady的比较条件；<ul><li>InitContainer：init-mysql主要任务是根据hostname，选择拷贝主库的配置文件还是从库的文件到Volume中，这样就区分了Master和Slave；</li><li>InitContainer：clone-mysql任务是为<strong>级联复制</strong>做准备。如果存在数据，跳过克隆；跳过主库的克隆；从上一个Ready的Pod克隆数据来；准备备份为后面的节点服务；</li></ul></li><li>创建Container。这里的Container就是正常业务的MySQL容器了；</li><li>创建<strong>Sicar</strong>Container：backup-sql，主要任务是：调整当前节点的主从设置；准备为下一个节点提供复制的文件</li></ol><h3 id="资源清单文件">资源清单文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-ha</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">init.sql:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    use mysql;</span></span><br><span class="line"><span class="string">    /* update user set host = &#x27;%&#x27; where user =&#x27;root&#x27;;</span></span><br><span class="line"><span class="string">    flush privileges; */</span></span><br><span class="line"><span class="string">    grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"><span class="string">    flush privileges;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">primary.cnf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # 仅在主服务器上应用此配置</span></span><br><span class="line"><span class="string">    [mysqld]</span></span><br><span class="line"><span class="string">    lower_case_table_names=1</span></span><br><span class="line"><span class="string">    relay-log=mysql-relay</span></span><br><span class="line"><span class="string">    log-bin=mysql-bin</span></span><br><span class="line"><span class="string">    gtid_mode=on</span></span><br><span class="line"><span class="string">    enforce_gtid_consistency</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">max_connections=1000</span></span><br><span class="line">    <span class="string">character_set_server=utf8mb4</span></span><br><span class="line">    <span class="string">collation_server=utf8mb4_general_ci</span></span><br><span class="line">    <span class="string">default_authentication_plugin=mysql_native_password</span></span><br><span class="line">  <span class="attr">replica.cnf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    # 仅在副本服务器上应用此配置</span></span><br><span class="line"><span class="string">    [mysqld]</span></span><br><span class="line"><span class="string">    lower_case_table_names=1</span></span><br><span class="line"><span class="string">    log_replica_updates=1</span></span><br><span class="line"><span class="string">    relay-log=mysql-relay</span></span><br><span class="line"><span class="string">    log-bin=mysql-bin</span></span><br><span class="line"><span class="string">    gtid_mode=on</span></span><br><span class="line"><span class="string">    enforce_gtid_consistency</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="string">max_connections=1000</span></span><br><span class="line">    <span class="string">character_set_server=utf8mb4</span></span><br><span class="line">    <span class="string">collation_server=utf8mb4_general_ci</span></span><br><span class="line">    <span class="string">default_authentication_plugin=mysql_native_password</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 为 StatefulSet 成员提供稳定的 DNS 表项的无头服务（Headless Service）</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 用于连接到任一 MySQL 实例执行读操作的客户端服务</span></span><br><span class="line"><span class="comment"># 对于写操作，你必须连接到主服务器：mysql-0.mysql</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-read</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">readonly:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">999</span></span><br><span class="line">        <span class="attr">runAsGroup:</span> <span class="number">999</span></span><br><span class="line">        <span class="attr">fsGroup:</span> <span class="number">999</span></span><br><span class="line">      <span class="attr">initContainers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">label-pod</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.deepsoft-tech.com/wf09/curl</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PODNAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          APISERVER=https://kubernetes.default.svc</span></span><br><span class="line"><span class="string">          # 服务账号令牌的路径</span></span><br><span class="line"><span class="string">          SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"><span class="string">          # 读取 Pod 的名字空间</span></span><br><span class="line"><span class="string">          NAMESPACE=$(cat $&#123;SERVICEACCOUNT&#125;/namespace)</span></span><br><span class="line"><span class="string">          # 读取服务账号的持有者令牌</span></span><br><span class="line"><span class="string">          TOKEN=$(cat $&#123;SERVICEACCOUNT&#125;/token)</span></span><br><span class="line"><span class="string">          # 引用内部证书机构（CA）</span></span><br><span class="line"><span class="string">          CACERT=$&#123;SERVICEACCOUNT&#125;/ca.crt</span></span><br><span class="line"><span class="string">          # 使用令牌访问 API</span></span><br><span class="line"><span class="string">          # 基于 Pod 序号生成 MySQL 服务器的 ID。</span></span><br><span class="line"><span class="string">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span></span><br><span class="line"><span class="string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line"><span class="string">          if [[ $ordinal -eq 0 ]]; then</span></span><br><span class="line"><span class="string">            FLAG=false</span></span><br><span class="line"><span class="string">          else</span></span><br><span class="line"><span class="string">            FLAG=true</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          curl -X PATCH  \</span></span><br><span class="line"><span class="string">            --cacert $&#123;CACERT&#125; \</span></span><br><span class="line"><span class="string">            -H &quot;Content-Type:application/json-patch+json&quot; \</span></span><br><span class="line"><span class="string">            -H &quot;Authorization: Bearer $&#123;TOKEN&#125;&quot; $&#123;APISERVER&#125;/api \</span></span><br><span class="line"><span class="string">            -d \</span></span><br><span class="line"><span class="string">            &#x27;[</span></span><br><span class="line"><span class="string">                &#123; </span></span><br><span class="line"><span class="string">                  &quot;op&quot;: &quot;add&quot;,</span></span><br><span class="line"><span class="string">                  &quot;path&quot;: &quot;/metadata/labels/readonly&quot;,</span></span><br><span class="line"><span class="string">                  &quot;value&quot;: &quot;&#x27;&quot;$FLAG&quot;&#x27;&quot; </span></span><br><span class="line"><span class="string">                &#125; </span></span><br><span class="line"><span class="string">            ]&#x27; \</span></span><br><span class="line"><span class="string">            $&#123;APISERVER&#125;/api/v1/namespaces/$&#123;NAMESPACE&#125;/pods/$&#123;PODNAME&#125;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          # 基于 Pod 序号生成 MySQL 服务器的 ID。</span></span><br><span class="line"><span class="string">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span></span><br><span class="line"><span class="string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line"><span class="string">          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf</span></span><br><span class="line"><span class="string">          # 添加偏移量以避免使用 server-id=0 这一保留值。</span></span><br><span class="line"><span class="string">          echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf</span></span><br><span class="line"><span class="string">          # 将合适的 conf.d 文件从 config-map 复制到 emptyDir。</span></span><br><span class="line"><span class="string">          if [[ $ordinal -eq 0 ]]; then</span></span><br><span class="line"><span class="string">            cp /mnt/config-map/primary.cnf /mnt/conf.d/</span></span><br><span class="line"><span class="string">          else</span></span><br><span class="line"><span class="string">            cp /mnt/config-map/replica.cnf /mnt/conf.d/</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          echo &quot;Find init.sql...&quot;</span></span><br><span class="line"><span class="string">          cp /mnt/config-map/init.sql /docker-entrypoint-initdb.d/init.sql</span></span><br><span class="line"><span class="string">          [[ $? -eq 0 ]] || exit 1</span></span><br><span class="line"><span class="string">          cat /docker-entrypoint-initdb.d/init.sql</span></span><br><span class="line"><span class="string">          ls -l /var/lib/mysql</span></span><br><span class="line"><span class="string">          [[ $? -eq 0 ]] || exit 1</span></span><br><span class="line"><span class="string"></span>        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-sql</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/docker-entrypoint-initdb.d/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/mnt/conf.d</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-map</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/mnt/config-map</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">clone-mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.deepsoft-tech.com/wf09/backupsql</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          # 如果已有数据，则跳过克隆。</span></span><br><span class="line"><span class="string">          [[ -d /var/lib/mysql/mysql ]] &amp;&amp; exit 0</span></span><br><span class="line"><span class="string">          # 跳过主实例（序号索引 0）的克隆。</span></span><br><span class="line"><span class="string">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span></span><br><span class="line"><span class="string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line"><span class="string">          [[ $ordinal -eq 0 ]] &amp;&amp; exit 0</span></span><br><span class="line"><span class="string">          # 从原来的对等节点克隆数据。</span></span><br><span class="line"><span class="string">          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql</span></span><br><span class="line"><span class="string">          # 准备备份。</span></span><br><span class="line"><span class="string">          xtrabackup --prepare --target-dir=/var/lib/mysql          </span></span><br><span class="line"><span class="string"></span>        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:8.0.29-debian</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/run/mysqld</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-sql</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/docker-entrypoint-initdb.d/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;mysqladmin&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;-uroot&quot;</span>, <span class="string">&quot;-proot&quot;</span>]</span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">150</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="comment"># 检查我们是否可以通过 TCP 执行查询（skip-networking 是关闭的）。</span></span><br><span class="line">            <span class="attr">command:</span> [<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;-uroot&quot;</span>, <span class="string">&quot;-proot&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;SELECT 1&quot;</span>]</span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backup-sql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.deepsoft-tech.com/wf09/backupsql</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xtrabackup</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">3307</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          cd /var/lib/mysql</span></span><br><span class="line"><span class="string">          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span></span><br><span class="line"><span class="string">          ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line"><span class="string">          # 如果是第0个说明是Master，跳过设置主从的部分</span></span><br><span class="line"><span class="string">          [[ $ordinal -eq 0 ]] &amp;&amp; exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \</span></span><br><span class="line"><span class="string">            &quot;xtrabackup --backup --slave-info --stream=xbstream --user=root --password=root&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Waiting for mysqld to be ready (accepting connections)&quot;</span></span><br><span class="line">          <span class="string">until</span> <span class="string">mysql</span> <span class="string">-uroot</span> <span class="string">-proot</span> <span class="string">-e</span> <span class="string">&quot;SELECT 1&quot;</span> <span class="string">;</span> <span class="string">do</span> <span class="string">sleep</span> <span class="number">1</span><span class="string">;</span> <span class="string">done</span></span><br><span class="line"></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Initializing replication from clone position&quot;</span></span><br><span class="line">          <span class="string">mysql</span> <span class="string">-uroot</span> <span class="string">-proot</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">-e</span> <span class="string">&quot;STOP SLAVE;&quot;</span>  <span class="string">\</span></span><br><span class="line">                  <span class="string">-e</span> <span class="string">&quot;RESET SLAVE;&quot;</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">-e</span> <span class="string">&quot;CHANGE MASTER TO \</span></span><br><span class="line"><span class="string">                          MASTER_HOST=&#x27;mysql-0.mysql&#x27;, \</span></span><br><span class="line"><span class="string">                          MASTER_USER=&#x27;root&#x27;, \</span></span><br><span class="line"><span class="string">                          MASTER_PASSWORD=&#x27;root&#x27;, \</span></span><br><span class="line"><span class="string">                          MASTER_AUTO_POSITION = 1;&quot;</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">-e</span> <span class="string">&quot;START SLAVE;&quot;</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">          <span class="string">exec</span> <span class="string">ncat</span> <span class="string">--listen</span> <span class="string">--keep-open</span> <span class="string">--send-only</span> <span class="string">--max-conns=1</span> <span class="number">3307</span> <span class="string">-c</span> <span class="string">\</span></span><br><span class="line">            <span class="string">&quot;xtrabackup --backup --slave-info --stream=xbstream --user=root --password=root&quot;</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/run/mysqld</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">socket</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-sql</span></span><br><span class="line">        <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-map</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">mysql-ha</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">data</span>          </span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">rook-ceph-block</span></span><br><span class="line">      <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><h2 id="如何给pod动态的增加label">如何给Pod动态的增加Label</h2><p>现在要求ServiceA可以直接连接主库，即可以直接连接到StatefulSet创建的第一个Pod；ServiceB可以直接连接所有的从库，即除去第一个Pod都可以通过Service负载均衡到后端Pod。</p><p>现在思路是通过 initContainerd 容器，在workPod起来之前中执行以下逻辑：</p><ul><li>判断hostname，如果带0，说明是第一个主库，通过REST API请求K8s APIServer，根据每一个Pod都会<strong>自动挂载默认ServiceAccount（投射卷）</strong>的机制，可以获取到请求K8s APIServer的密钥。</li></ul><p>部分资源清单：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">initContainers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">label-pod</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">hub.deepsoft-tech.com/wf09/curl</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PODNAME</span></span><br><span class="line">      <span class="attr">valueFrom:</span></span><br><span class="line">        <span class="attr">fieldRef:</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">bash</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">    set -ex</span></span><br><span class="line"><span class="string">    APISERVER=https://kubernetes.default.svc</span></span><br><span class="line"><span class="string">    # 服务账号令牌的路径</span></span><br><span class="line"><span class="string">    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line"><span class="string">    # 读取 Pod 的名字空间</span></span><br><span class="line"><span class="string">    NAMESPACE=$(cat $&#123;SERVICEACCOUNT&#125;/namespace)</span></span><br><span class="line"><span class="string">    # 读取服务账号的持有者令牌</span></span><br><span class="line"><span class="string">    TOKEN=$(cat $&#123;SERVICEACCOUNT&#125;/token)</span></span><br><span class="line"><span class="string">    # 引用内部证书机构（CA）</span></span><br><span class="line"><span class="string">    CACERT=$&#123;SERVICEACCOUNT&#125;/ca.crt</span></span><br><span class="line"><span class="string">    # 使用令牌访问 API</span></span><br><span class="line"><span class="string">    # 基于 Pod 序号生成 MySQL 服务器的 ID。</span></span><br><span class="line"><span class="string">    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span></span><br><span class="line"><span class="string">    ordinal=$&#123;BASH_REMATCH[1]&#125;</span></span><br><span class="line"><span class="string">    if [[ $ordinal -eq 0 ]]; then</span></span><br><span class="line"><span class="string">      FLAG=false</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      FLAG=true</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    curl -X PATCH  \</span></span><br><span class="line"><span class="string">      --cacert $&#123;CACERT&#125; \</span></span><br><span class="line"><span class="string">      -H &quot;Content-Type:application/json-patch+json&quot; \</span></span><br><span class="line"><span class="string">      -H &quot;Authorization: Bearer $&#123;TOKEN&#125;&quot; $&#123;APISERVER&#125;/api \</span></span><br><span class="line"><span class="string">      -d \</span></span><br><span class="line"><span class="string">      &#x27;[</span></span><br><span class="line"><span class="string">          &#123; </span></span><br><span class="line"><span class="string">            &quot;op&quot;: &quot;add&quot;,</span></span><br><span class="line"><span class="string">            &quot;path&quot;: &quot;/metadata/labels/readonly&quot;,</span></span><br><span class="line"><span class="string">            &quot;value&quot;: &quot;&#x27;&quot;$FLAG&quot;&#x27;&quot; </span></span><br><span class="line"><span class="string">          &#125; </span></span><br><span class="line"><span class="string">      ]&#x27; \</span></span><br><span class="line"><span class="string">      $&#123;APISERVER&#125;/api/v1/namespaces/$&#123;NAMESPACE&#125;/pods/$&#123;PODNAME&#125;</span></span><br></pre></td></tr></table></figure><p>上面</p><p>⚠️默认情况下默认服务账号是不能更改PodLabel的，需要执行一下资源清单开放权限</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">patch-my-pods</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">patch-my-pods</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>] <span class="comment"># &quot;&quot; indicates the core API group</span></span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">patch-my-pods</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">patch-my-pods</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>apply以后可以检查一下自己是否有权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl auth can-i patch pods --as=system:serviceaccount:default:default -n default</span><br></pre></td></tr></table></figure><p>执行完以上操作就可以动态的Pod添加标签啦～</p><h2 id="问题">问题</h2><h3 id="error-my-010544-repl-failed-to-open-the-relay-log">[ERROR][MY-010544] [Repl] Failed to open the relay log</h3><p>当使用xtrabackup对<strong>从库</strong>进行冷备份时，并使用这个从库的备份创建一个新的从库实例时，会出现此问题。</p><p>通过relaylog介绍，很容易知道由于mysql.slave_relay_log_info表中保留了以前的复制信息，导致新从库启动时无法找到对应文件。</p><p>此时需要登陆到从库的MySQL实例，重置一下slave即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> stop slave;</span><br><span class="line">mysql<span class="operator">&gt;</span> reset slave;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><h3id="the-slave-io-thread-stops-because-master-and-slave-have-equal-mysql-server-uuids">Theslave I/O thread stops because master and slave have equal MySQL serverUUIDs</h3><p>这个问题通常是因为备份数据库时，把数据库的UUID也复制了下来。而主从关系要求这个UUID<strong>必须唯一</strong>。这个uuid通常存在<code>/var/log/mysql/auto.cnf</code>文件夹下，通常删除该文件，重启一下数据库即可。</p><p>PS：在开启<strong>GTID</strong>复制时，貌似不会自动复制auto.cnf此文件。</p><h2 id="引用">引用</h2><ul><li><p><a href="https://mp.weixin.qq.com/s/UzmWEnE13Fet1sxfuJm5Kg">MySQL基于GTID主从复制</a></p></li><li><p><ahref="https://mp.weixin.qq.com/s/g9M69oJwuMOUI3J-_QoFsQ">XtraBackup搭建从库的一般步骤及 XtraBackup 8.0 的注意事项</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何使用StatefulSet搭建高可用的MySQL集群。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群实践（八）Kubernetes安装云原生存储系统Rook</title>
    <link href="https://fly97.cn/p/Install-Rook-on-k8s/"/>
    <id>https://fly97.cn/p/Install-Rook-on-k8s/</id>
    <published>2022-07-27T05:28:00.000Z</published>
    <updated>2022-07-27T05:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何安装和使用云原生存储系统Rook。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><h2 id="准备工作">准备工作</h2><ul><li>Ubuntu 20.04 LTS amd64，32GB，作为Master节点</li></ul><p>假定已经安装了K8s集群，这里以单节点集群为例</p><h2 id="rook">Rook</h2><ul><li>Rook是一个开源的云原生存储协调器，提供平台、框架和对各种存储解决方案的支持，以与云原生环境进行本地集成。</li><li>Rook将存储软件转变为自我管理，自我扩展和自我修复的存储服务。它通过自动化部署、引导、配置、供应、扩展、升级、迁移、灾难恢复、监视和资源管理来实现。Rook使用底层云原生容器管理，调度和编排平台提供的功能来执行其职责。</li><li>Rook利用扩展点将其深度集成到云原生环境中，并为调度、生命周期管理、资源管理、安全性、监视和用户体验提供无缝的体验。</li></ul><h3 id="部署rook">部署Rook</h3><p>下载源码，项目地址：https://github.com/rook/rook/releases</p><p>最新源码为1.9.7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --single-branch --branch v1.9.7 https://github.com/rook/rook.git</span><br></pre></td></tr></table></figure><h4 id="以块存储rbd为例">以块存储RBD为例</h4><p>部署准备工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> rook/deploy/examples</span><br><span class="line">kubectl create -f crds.yaml -f common.yaml -f operator.yaml</span><br></pre></td></tr></table></figure><p>确保存储设备没有文件系统</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk -<span class="keyword">l</span></span><br></pre></td></tr></table></figure><p><img data-src="image-20220727110451053.png" /></p><p>如果有GPT或者dos等描述文字，说明存在分区表，需要把这个删掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wipefs /dev/sda</span><br></pre></td></tr></table></figure><p>可以看到分区表</p><p>执行删除命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wipefs -a -f /dev/sda</span><br></pre></td></tr></table></figure><p>根据需要修改一下集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim cluster.yaml</span><br></pre></td></tr></table></figure><p>主要是指定设备，设定mon为1，mgr为1等操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################################################################################################</span></span><br><span class="line"><span class="comment"># Define the settings for the rook-ceph cluster with common settings for a small test cluster.</span></span><br><span class="line"><span class="comment"># All nodes with available raw devices will be used for the Ceph cluster. One node is sufficient</span></span><br><span class="line"><span class="comment"># in this example.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For example, to create the cluster:</span></span><br><span class="line"><span class="comment">#   kubectl create -f crds.yaml -f common.yaml -f operator.yaml</span></span><br><span class="line"><span class="comment">#   kubectl create -f cluster-test.yaml</span></span><br><span class="line"><span class="comment">#################################################################################################################</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: rook-config-override</span><br><span class="line">  namespace: rook-ceph <span class="comment"># namespace:cluster</span></span><br><span class="line">data:</span><br><span class="line">  config: |</span><br><span class="line">    [global]</span><br><span class="line">    osd_pool_default_size = 1</span><br><span class="line">    mon_warn_on_pool_no_redundancy = <span class="literal">false</span></span><br><span class="line">    bdev_flock_retry = 20</span><br><span class="line">    bluefs_buffered_io = <span class="literal">false</span></span><br><span class="line">---</span><br><span class="line">apiVersion: ceph.rook.io/v1</span><br><span class="line">kind: CephCluster</span><br><span class="line">metadata:</span><br><span class="line">  name: my-cluster</span><br><span class="line">  namespace: rook-ceph <span class="comment"># namespace:cluster</span></span><br><span class="line">spec:</span><br><span class="line">  dataDirHostPath: /var/lib/rook</span><br><span class="line">  cephVersion:</span><br><span class="line">    image: quay.io/ceph/ceph:v17</span><br><span class="line">    allowUnsupported: <span class="literal">true</span></span><br><span class="line">  mon:</span><br><span class="line">    count: 1</span><br><span class="line">    allowMultiplePerNode: <span class="literal">true</span></span><br><span class="line">  mgr:</span><br><span class="line">    count: 1</span><br><span class="line">    allowMultiplePerNode: <span class="literal">true</span></span><br><span class="line">  dashboard:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  crashCollector:</span><br><span class="line">    <span class="built_in">disable</span>: <span class="literal">true</span></span><br><span class="line">  storage:</span><br><span class="line">    useAllNodes: <span class="literal">false</span></span><br><span class="line">    useAllDevices: <span class="literal">false</span></span><br><span class="line">    <span class="comment">#deviceFilter:</span></span><br><span class="line">    config:</span><br><span class="line">      <span class="comment"># crushRoot: &quot;custom-root&quot; # specify a non-default root label for the CRUSH map</span></span><br><span class="line">      <span class="comment"># metadataDevice: &quot;md0&quot; # specify a non-rotational storage so ceph-volume will use it as block db device of bluestore.</span></span><br><span class="line">      <span class="comment"># databaseSizeMB: &quot;1024&quot; # uncomment if the disks are smaller than 100 GB</span></span><br><span class="line">      <span class="comment"># journalSizeMB: &quot;1024&quot;  # uncomment if the disks are 20 GB or smaller</span></span><br><span class="line">      osdsPerDevice: <span class="string">&quot;1&quot;</span> <span class="comment"># this value can be overridden at the node or device level</span></span><br><span class="line">      <span class="comment"># encryptedDevice: &quot;true&quot; # the default value for this option is &quot;false&quot;</span></span><br><span class="line"><span class="comment"># Individual nodes and their config can be specified as well, but &#x27;useAllNodes&#x27; above must be set to false. Then, only the named</span></span><br><span class="line"><span class="comment"># nodes below will be used as storage resources.  Each node&#x27;s &#x27;name&#x27; field should match their &#x27;kubernetes.io/hostname&#x27; label.</span></span><br><span class="line">    nodes:</span><br><span class="line">      - name: <span class="string">&quot;amd-5700g&quot;</span></span><br><span class="line">        devices: <span class="comment"># specific devices to use for storage can be specified for each node</span></span><br><span class="line">          - name: <span class="string">&quot;sda&quot;</span></span><br><span class="line">    deviceFilter:</span><br><span class="line">  healthCheck:</span><br><span class="line">    daemonHealth:</span><br><span class="line">      mon:</span><br><span class="line">        interval: 45s</span><br><span class="line">        <span class="built_in">timeout</span>: 600s</span><br><span class="line">  priorityClassNames:</span><br><span class="line">    all: system-node-critical</span><br><span class="line">    mgr: system-cluster-critical</span><br><span class="line">  disruptionManagement:</span><br><span class="line">    managePodBudgets: <span class="literal">true</span></span><br><span class="line">---</span><br><span class="line">apiVersion: ceph.rook.io/v1</span><br><span class="line">kind: CephBlockPool</span><br><span class="line">metadata:</span><br><span class="line">  name: builtin-mgr</span><br><span class="line">  namespace: rook-ceph <span class="comment"># namespace:cluster</span></span><br><span class="line">spec:</span><br><span class="line">  name: .mgr</span><br><span class="line">  replicated:</span><br><span class="line">    size: 1</span><br><span class="line">    requireSafeReplicaSize: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>现在可以部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f cluster.yaml</span><br></pre></td></tr></table></figure><p>安装ceph工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl applt -f toolbox.yaml</span><br></pre></td></tr></table></figure><p>等待相关操作执行完毕</p><p><img data-src="image-20220727120539317.png" /></p><p>此时进入ceph-tools，查看ceph集群工作状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n rook-ceph <span class="built_in">exec</span> -it deploy/rook-ceph-tools -- bash</span><br></pre></td></tr></table></figure><p><img data-src="image-20220727120713981.png" /></p><h3 id="挂载rook块存储到pod容器">挂载Rook块存储到Pod容器</h3><p>首先需要创建strongeClass，才可以让k8s控制器根据声明的PVC创建PV</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-standalone-pvc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">rook-ceph-block</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Gi</span></span><br></pre></td></tr></table></figure><p>然后在Pod里创建PVC</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-standalone-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8-debian</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--max_connections=10000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--character-set-server=utf8mb4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--collation-server=utf8mb4_general_ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-standalone-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span>             <span class="comment"># 容器挂载路径</span></span><br><span class="line">      <span class="attr">subPath:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-conf</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/etc/mysql/conf.d</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-standalone-data</span></span><br><span class="line">    <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">      <span class="attr">claimName:</span> <span class="string">mysql-standalone-pvc</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-conf</span></span><br><span class="line">    <span class="attr">configMap:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mysql-standalone-config</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何安装和使用云原生存储系统Rook。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>应用编排与管理：核心原理</title>
    <link href="https://fly97.cn/p/core-concept-about-App-stores-and-persists-data/"/>
    <id>https://fly97.cn/p/core-concept-about-App-stores-and-persists-data/</id>
    <published>2022-07-14T07:26:00.000Z</published>
    <updated>2022-07-14T07:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是CNCF × Alibaba云原生技术公开课的<strong>第九章应用存储和持久化数据卷：核心知识</strong>学习笔记。</p><p>关键词：<strong>k8s</strong></p><span id="more"></span><p>本文主要介绍以下部分：</p><ol type="1"><li>K8s Volume使用场景</li><li>PVC/PV/StrongeClass基本操作和概念解析</li><li>PVC+PV体系的设计和实现原理</li></ol><h3 id="volumes介绍">Volumes介绍</h3><h4 id="pod-volumes">Pod Volumes</h4><p>首先来看Pod Volumes的使用场景：</p><ul><li>当Pod中的某一个容器在运行时异常退出，被kubelet重新拉起以后，如果保证之前容器产生的重要数据没有丢失？</li><li>如果 同一个Pod的多个Pod容器想要共享数据，应该如何去做？</li></ul><p>以上两个场景，可以使用Volumes来很好解决，接下来来看一下PodVolumes的常见类型：</p><ol type="1"><li>本地存储：常见的有emptydir和hostpath；</li><li>网络存储：网络存储的实现方式有两种，一种是<strong>in-tree</strong>，就是实现的代码是在k8s代码仓库中的，随着k8s对存储类型的增多，这种方式会给k8s本身的维护和发展带来很大的负担；另一种是out-in-tree，首先方式是给k8s<strong>解耦</strong>的，通过抽象接口将不同存储的driver实现从k8s代码仓库中剥离，因此out-of-tree是CNCF社区中主推的实现网络存储插件的方式；</li><li>ProjectVolumes：将一些配置信息，如secret/configmap用卷的形式挂载到容器中，让容器中的程序可以通过POSIX接口（系统调用）来访问配置数据；</li><li>PV和PVC</li></ol><h4 id="persistent-volumes">Persistent Volumes</h4><p><img data-src="image-20220714164531327.png" /></p><p>以下的几种场景，Pod Volumes是不能解决的：</p><ul><li>Pod销毁重建，如用Deployment管理的Pod，在做镜像升级的时候，会产生新的Pod并删除旧的Pod，那新Pod和旧Pod如何复用数据？</li><li>宿主机宕机，要迁移Pod，此时StatefulSet管理的Pod，其实是已经实现了带卷迁移的语义。此时PodVolumes显然是无法做到；</li><li>多个Pod之间想要共享数据，如何声明？同一个Pod中多个容器想要共享数据，可以借助PodVolumes来解决；当多个Pod共享数据时，就很难表达这种语义。</li><li>如果相对数据卷做一些功能扩展性，如snapshot、resize这些功能，又应该怎么实现？</li></ul><p>以上场景中，<strong>PodVolume</strong>很难表达复用的语义，对其扩展也比较困难，因此K8s又引入了<strong>PersistentVolume</strong>概念。通过PersistentVolume，可以将计算和存储分离，通过不同的组件来管理存储资源和计算资源，然后解耦Pod和Volume之间声明周期的关联，这样把Pod删除以后，使用的PV依然存在，还可以被新建的Pod复用。</p><h4 id="persistent-volumes-claim">Persistent Volumes Claim</h4><p><img data-src="image-20220714171037554.png" /></p><p>用户在使用PV时实际上是通过PVC，PVC简化了k8s用户对存储的使用方式，做到了职责分离。通常用户在使用存储时，只需要声明存储大小和访问方式即可。</p><p>访问模式指的是使用的存储可以被多个ndoe共享还是只能单node独占访问？只读访问还是读写访问？用户只关心这些东西，与存储相关的实现细节是不关心的。</p><p>通过PV和PVC的概念，将用户需求与实现细节解耦，用户只需要通过PVC声明自己的存储需求。PV是由集群管理员和存储相关团队来统一运维和管控，这样的话，就简化了用户使用存储的方式，可以看到，PV和PVC的设计其实有点像面向对象的接口与实现的关系。用户在使用其功能时，只关心用户接口，不需关心内部复杂的实现细节。</p><p>由于PV是由集群管理员统一管控的，接下来就看这个PV对象是如何产生的。</p><h5 id="static-volume-provisioning">Static Volume Provisioning</h5><p>静态PV</p><p><img data-src="image-20220715134705456.png" /></p><ul><li><p>静态PV：集群管理员事先去规划这个集群中的用户会怎样使用存储，它会先预分配一些存储，也就是预先创建一些PV；然后用户在提交自己的存储需求（也就是 PVC）的时候，K8s内部相关组件会帮助它把 PVC 和 PV 做绑定；之后用户再通过 pod去使用存储的时候，就可以通过 PVC 找到相应的PV，它就可以使用了。</p></li><li><p>不足：静态产生方式有什么不足呢？可以看到，首先需要集群管理员预分配，预分配其实是很难预测用户真实需求的。举一个最简单的例子：如果用户需要的是20G，然而集群管理员在分配的时候可能有 80G 、100G 的，但没有 20G的，这样就很难满足用户的真实需求，也会造成资源浪费。有没有更好的方式呢？</p></li></ul><h5 id="dynamic-volume-provisioning">Dynamic Volume Provisioning</h5><p>动态PV</p><p><img data-src="image-20220715134954652.png" /></p><ul><li>动态PV：集群管理员不预先分配PV，他写了一个配置文件，这个模版文件是用来表示创建某一类型存储（块存储和文件存储等）所需要的一些参数，这些参数是用户不关心的，给存储本身实现有关的参数，用户只需要提交自身的存储需求，也就是PVC文件，并在PVC中指定的存储模版（StorageClass）。</li><li>apiServer结合PVC和StorageClass的信息，动态生成用户所需要的存储（PV），将PVC和PV进行绑定后，Pod可以使用PV了。通过StorageClass配置生成存储需要的存储模版，结合用户的需求创建PV对象，做到按需分配，在没有增加用户使用难度的同时也解放了集群管理员的运维工作。</li></ul><h3 id="用例解读">用例解读</h3><p>来看一下Pod Volumes、PV、PVC、StrongeClass具体如何使用的？</p><h4 id="pod-volumes-1">Pod Volumes</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-pod-1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span>             <span class="comment"># 容器挂载路径</span></span><br><span class="line">      <span class="attr">subPath:</span> <span class="string">cache</span>               <span class="comment"># 挂载路径内部建立子目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-data</span>                 </span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/host</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span>               <span class="comment"># 只读挂载</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-pod-2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;                   <span class="comment"># 当Pod被分配至节点时，节点自动分配的目录。当Pod删除以后该目录也会被删除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-data</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/host-data</span>         <span class="comment"># 指定宿主机的目录，当Pod删除以后，该目录依然存在</span></span><br></pre></td></tr></table></figure><ul><li><code>.spec.volumes</code>：声明Pod的volume信息</li><li><code>.spec.volumes.volumeMounts</code>：声明container如何使用Pod的Volumes</li><li>当多个container共享同一个volume时，可以通过<code>spec.containers.volumeMounts.subPath</code>隔离不同容器在同一个volume上数据存储的路径。</li></ul><p>emptyDir、hostPath 都是本地存储，它们之间有什么细微的差别呢？</p><ul><li>emptyDir 其实是在 pod 创建的过程中会临时创建的一个目录，这个目录随着pod 删除也会被删除，里面的数据会被清空掉；hostPath顾名思义，其实就是宿主机上的一个路径，在 pod删除之后，这个目录还是存在的，它的数据也不会被丢失。这就是它们两者之间一个细微的差别。</li></ul><h4 id="静态pv使用">静态PV使用</h4><p>静态PV首先是有管理员创建的，这里使用hostPath类型作为演示。</p><p>⚠️在生产集群中，你不会使用hostPath。集群管理员会提供网络存储资源，比如 Google Compute Engine持久盘卷、NFS 共享卷或 Amazon Elastic Block Store 卷。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pv-volume</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">10Gi</span>                          <span class="comment"># 该Volume的总容量大小</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>                        <span class="comment"># 设置该Volume只能被当前node挂载且都具有读写权限</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Retain</span>    <span class="comment"># 设置该Volume使用后被release之后的回收策略</span></span><br><span class="line">  <span class="attr">hostPath:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;/mnt/data&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>persistentVolumeReclaimPolicy</code>的意思就是这块存在被使用后，如果使用方Pod以及PVC都被删除，这个PV的回收策略。</li></ul><p>首先，用户需要创建一个<strong>PVC对象</strong>，PVC对象只需要指定<strong>存储需求</strong>，而不用关心存储本身的具体实现细节。</p><p>存储需求包括：</p><ul><li>需要的volume大小</li><li>访问方式：即这个存储的访问方式：这里声明为ReadWriteOnce，即只能在给node上读写<ul><li>一般情况下文件存储的读写方式是ReadWriteMany，也就是多node读写访问；这里由于使用的是hostPath，因此只能设置ReadWriteOnce。</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pv-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">3Gi</span></span><br></pre></td></tr></table></figure><p>上文中可以看到，PVC的size和accessmode和刚刚创建的PV其实是匹配的；当用户在提交PVC的时候，K8s集群的相关组件就会把PV和PVCbound一起。之后用户在提交Podyaml时，在volumes上写PVC声明，通过claimName声明要用那个PVC。然后挂载方式就喝前面讲的一样了，当提交完yaml，apiserver可以通过PVC找到对应的PV， 然后就可以使用存储了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-pod-1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span>             <span class="comment"># 容器挂载路径</span></span><br><span class="line">      <span class="attr">subPath:</span> <span class="string">cache</span>               <span class="comment"># 挂载路径内部建立子目录</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-data</span>               </span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/host</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span>               <span class="comment"># 只读挂载</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-pod-2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-data</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;                   <span class="comment"># 当Pod被分配至节点时，节点自动分配的目录。当Pod删除以后该目录也会被删除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-data</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/tmp/host-data</span>         <span class="comment"># 指定宿主机的目录，当Pod删除以后，该目录依然存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态pv使用">动态PV使用</h4><p>动态PV模式下系统管理员不在预分配PV，只是创建一个模版文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-sc</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">example.com/external-nfs</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">nfs-server.example.com</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/share</span></span><br><span class="line">  <span class="attr">readOnly:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Delete</span></span><br></pre></td></tr></table></figure><ul><li><p>模版文件叫做StorageClass</p></li><li><p>上述模版问卷需要填写一个是provisioner，这个就是创建PV对应的存储插件，使用StorageClass时需要提前安装存储插件</p><ul><li>上述模版文件对应的驱动是 NFS文件系统</li></ul></li><li><p><code>parameters</code>：是通过K8s创建存储时需要指定的一些细节参数，而这些参数是用户不需要关心的：像server、path、readOnly分别就是NFS文件服务器的地址、文件分享路径、是否只读等的一些参数</p></li><li><p><code>reclaimPolicy</code>：是PV在Pod以及PVC被删除后的回收策略</p></li></ul><p>当向系统提交完StorageClass，也就是提交创建PV的模版之后，还是需要写一个PVC的资源清单：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-pv-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">nfs-sc</span>  <span class="comment"># </span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">3Gi</span></span><br></pre></td></tr></table></figure><ul><li><code>storageClassName</code>：指定后端storageClassName，如不指定则使用默认的storageClassName；默认的sc通过注解<code>storageclass.kubernetes.io/is-default-class: true</code>标示。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是CNCF × Alibaba
云原生技术公开课的&lt;strong&gt;第九章应用存储和持久化数据卷：核心知识&lt;/strong&gt;学习笔记。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;k8s&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="k8s" scheme="https://fly97.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ROS实战（七）Jetson Xavier NX 高级操作</title>
    <link href="https://fly97.cn/p/Advanced-operations-on-Jetson-Xavier/"/>
    <id>https://fly97.cn/p/Advanced-operations-on-Jetson-Xavier/</id>
    <published>2022-07-07T10:51:00.000Z</published>
    <updated>2022-07-07T10:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近的生活真的是一塌糊涂，秋招不像秋招，面试没有面试。</p><p>好久没有好好静下心来写文章了，今天就把最近折腾的东西记录一下吧。</p><p><strong>关键词：</strong>Jetson</p><span id="more"></span><h2 id="前言">前言</h2><p>Jeston是NVIDIA开发的嵌入式平台，支持CUDA。这款板子是笔者拿来用来做毕业设计的。</p><p>以下是他们的参数指标，可以看到性能还是不错的，除了有些鸡肋的armv8CPU。</p><p><img data-src="image-20220707210050935.png" /></p><h2 id="安装镜像到nvme硬盘">安装镜像到nvme硬盘</h2><p>NX自带一个NVMe M.2 SSD的插槽，还带一个M.2key的无线网卡插槽。我将自带的realtek网卡拿下来，换上了intel ax201wifi6无线网卡。并把闲置的SSD也放了上去。</p><p>从Jetpack4.6开始，官方就支持将系统写入固态硬盘。而之前是只能向SD卡里写的。固态硬盘的速度和SD卡里相比那可快多啦。下面就介绍以下如何安装镜像到nvme硬盘。</p><h3 id="下载sdk">下载SDK</h3><p>首先要准备一台ubuntu的电脑，或者使用docker，这个官网有说明：</p><p><img data-src="image-20220707212251884.png" /></p><ul><li>如果想装最新版的Jetpack DP 5.0.1，需要使用ubuntu18.04或者20.04，而5.0.1之前的版本只能使用ubuntu 18.04.</li></ul><h3 id="安装sdk">安装SDK</h3><p>下载完毕后，执行以下命令安装sdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ./sdkmanager.deb</span><br></pre></td></tr></table></figure><p>安装完毕以后是这个样子的</p><p><img data-src="image-20220707213053772.png" /></p><p>现在还没有检测到Xavier NX，用一根普通的usb线将板子的microusb口连接到电脑，然后就能检测到了。</p><p><img data-src="image-20220707213322544.png" /></p><p>点击CONTIUNE，进入下一步</p><h3 id="选择下载的部分">选择下载的部分</h3><p>第一次安装时，要把HOST的部分的内容全部下载下来，然后根据自己的需要安装Target。我这里为了方便起见就全部安装了。</p><p><img data-src="image-20220707213951561.png" /></p><p>为了方便起见，可以选择先下载后安装，这样即节约了时间，由减少了因下载数据丢失而出现的错误。</p><p>连接好Xariver，勾选协议，选择下一步</p><h3 id="安装步骤">安装步骤</h3><p>首先是输入ubuntu的密码，方便sdk安装一些Host主机没有的软件包。</p><p><img data-src="image-20220707214328696.png" /></p><p>接下来是选择刷入的存储设备，并连接到板子进行刷机。</p><p><img data-src="image-20220707214519814.png" /></p><ul><li>第一个箭头的位置是输入XavierNX现在的账户和密码，方便SDK自动设置NX进入恢复模式；如果此时NX已经无法是打开，那么也没有关系，将<strong>AutomaticSetup</strong>选项修改为<strong>ManalSetup</strong>，并根据给出的提示将NX手动设置恢复模式；具体请看下图</li><li>第二个箭头的位置是选择刷入的设备，这里选择NVMe设备，SDK会自动选择</li></ul><p><img data-src="image-20220707214838394.png" /></p><p>输入完毕以后，就可开始刷机了，点击Flash，耐心等待流程结束。</p><p><img data-src="image-20220707215020923.png" /></p><p>耐心等待刷机结束。</p><p><img data-src="image-20220707215219174.png" /></p><p>Ooooops：翻车了，刷机竟然失败。后来重新刷了一下就可以了。</p><h2 id="启用国内源">启用国内源</h2><p>这个老生常谈了，国内速度比较快的应该是中科大的源了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /etc/apt/source.list /etc/apt/source.list.bak</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal main main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.ustc.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><h2 id="安装smb文件共享服务器">安装smb文件共享服务器</h2><p>安装smb就可直接在windows上挂载NAS的硬盘了。</p><p>smb在linux上有一个开源的实现就是samba，这个软件通常在软件包管理器中。</p><h3 id="安装软件包">安装软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nmbd</span><br></pre></td></tr></table></figure><h3 id="修改配置文件">修改配置文件</h3><p>备份默认的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/samba/smb.conf&#123;,.backup&#125;</span><br></pre></td></tr></table></figure><h4 id="设置绑定网络接口">设置绑定网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The specific set of interfaces / networks to bind to</span></span><br><span class="line"><span class="comment"># This can be either the interface name or an IP address/netmask;</span></span><br><span class="line"><span class="comment"># interface names are normally preferred</span></span><br><span class="line">interfaces = 127.0.0.0/8 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only bind to the named interfaces and/or networks; you must use the</span></span><br><span class="line"><span class="comment"># &#x27;interfaces&#x27; option above to use this.</span></span><br><span class="line"><span class="comment"># It is recommended that you enable this feature if your Samba machine is</span></span><br><span class="line"><span class="comment"># not protected by a firewall or is a firewall itself.  However, this</span></span><br><span class="line"><span class="comment"># option cannot handle dynamic or non-broadcast interfaces correctly.</span></span><br><span class="line"><span class="built_in">bind</span> interfaces only = no</span><br></pre></td></tr></table></figure><ul><li>这里根据自己的网络接口确定，通过<code>ip a</code>命令可以查看。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近的生活真的是一塌糊涂，秋招不像秋招，面试没有面试。&lt;/p&gt;
&lt;p&gt;好久没有好好静下心来写文章了，今天就把最近折腾的东西记录一下吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词：&lt;/strong&gt;Jetson&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jetson" scheme="https://fly97.cn/tags/Jetson/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins实战（四）构建hexo博客</title>
    <link href="https://fly97.cn/p/build-hexo-blog-with-jenkins/"/>
    <id>https://fly97.cn/p/build-hexo-blog-with-jenkins/</id>
    <published>2022-06-30T06:10:00.000Z</published>
    <updated>2022-06-30T06:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何在Jenkins上构建hexo博客。</p><p>关键词：<strong>Jenkins</strong></p><span id="more"></span><h2 id="使用二进制文件进行构建">使用二进制文件进行构建</h2><h3 id="需求来源">需求来源</h3><p>博客源码是使用git托管在GitHub上的，之前使用的githubaction服务。由于滥用，github对actions的限制越发严格。</p><p>自己有几台闲置的Linux主机，可以拿来构建博客。</p><p>jenkins是著名的自动化构建软件，本次就拿构建博客做个小例子。</p><h3 id="准备">准备</h3><p>安装好jenkins的linux服务器，并运行jenkins。</p><h3 id="创建项目">创建项目</h3><h4 id="名称">名称</h4><p>这里的名称可以任选。</p><h4 id="源码管理">源码管理</h4><p>源码管理选择Git，这里写我自己的仓库的链接。</p><p><img data-src="image-20220630141619409.png" /></p><ul><li>注意Creditials要选择对应协议。如果是ssh协议就选sshkey，如果是https协议且是私有仓库，那就需要personal token。</li></ul><p>测试一下是否成功链接上了仓库：</p><p>点一下运行，看看最后的结果</p><p><img data-src="image-20220630143750474.png" /></p><h4 id="设置构建触发器">设置构建触发器</h4><p>这里选择轮训的方式：每隔5分钟拉一次，看看有没有更新，如果有更新了就继续运行下面的脚本。</p><p><img data-src="image-20220630143959280.png" /></p><h4 id="构建环境">构建环境</h4><p>这里根据自己的需要选择即可。</p><p><img data-src="image-20220630144212882.png" /></p><h4 id="构建">构建</h4><p>这里是整个流程的核心，这里运行bash脚本，执行生成博客静态文件的操作。</p><p>首先需要安装好nodejs，然后安装hexo博客工具，这里不再赘述。</p><p>这里有个小技巧：一般在主用户上设置的PATH环境变量上在jenkins用户是无法读取的，这里需要在节点配置上设置环境变量：</p><p><strong>系统管理→Configure System→环境变量</strong></p><p><img data-src="image-20220630153832331.png" /></p><p>构建脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line"><span class="built_in">cp</span> -r /temp/node_modules .</span><br><span class="line">hexo g</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;构建失败&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">git <span class="built_in">clone</span> https://xxx</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;克隆失败&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cp</span> -r flyzstu.github.io/.git public</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;复制失败&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git config user.name <span class="string">&quot;flyzstu&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;flyzstu@gmail.com&quot;</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Jenkins Service Auto Builder at <span class="subst">$(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span>&quot;</span></span><br><span class="line">git push --force --quiet</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;推送成功&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这里分开构建，国外的使用github pages，国内使用又拍云。</p><p>将生成好的静态文件通过upx的cli命令上传到又拍云。</p><p>这里主要有一个bash脚本交互输入的用法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/public</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;ServiceName\nOperator\nPassword&quot;</span> | upx login</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">upx <span class="built_in">sync</span> --strong</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;推送UPYUN成功&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 255</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍如何在Jenkins上构建hexo博客。&lt;/p&gt;
&lt;p&gt;关键词：&lt;strong&gt;Jenkins&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jenkins" scheme="https://fly97.cn/tags/Jenkins/"/>
    
  </entry>
  
</feed>
